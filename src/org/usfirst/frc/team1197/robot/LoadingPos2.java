package org.usfirst.frc.team1197.robot;

public class LoadingPos2 extends TorTrajectory {

	public LoadingPos2() {
		super(-1.5, 0);
		time.clear();
		translation.clear();
		rotation.clear();
		testMethod(0, 0, 0, 0, 0, 0, 0);
		testMethod(5, -0, -0.0003, -0.0623, 0, 0, 0);
		testMethod(10, -0, -0.0009, -0.1246, 0, 0, 0);
		testMethod(15, -0, -0.0019, -0.1869, 0, 0, 0);
		testMethod(20, -0, -0.0031, -0.2493, 0, 0, 0);
		testMethod(25, -0, -0.0047, -0.3116, 0, 0, 0);
		testMethod(30, -0.0001, -0.0065, -0.3739, 0, 0, 0);
		testMethod(35, -0.0001, -0.0087, -0.4362, 0, 0, 0);
		testMethod(40, -0.0002, -0.0112, -0.4985, 0, 0, 0);
		testMethod(45, -0.0002, -0.014, -0.5608, 0, 0, 0);
		testMethod(50, -0.0003, -0.0171, -0.6231, 0, 0, 0);
		testMethod(55, -0.0004, -0.0206, -0.6854, 0, 0, 0);
		testMethod(60, -0.0005, -0.0243, -0.7478, 0, 0, 0);
		testMethod(65, -0.0006, -0.0284, -0.8101, 0, 0, 0);
		testMethod(70, -0.0008, -0.0327, -0.8724, 0, 0, 0);
		testMethod(75, -0.001, -0.0374, -0.9347, 0, 0, 0);
		testMethod(80, -0.0012, -0.0424, -0.997, 0, 0, 0);
		testMethod(85, -0.0014, -0.0477, -1.0593, 0, 0, 0);
		testMethod(90, -0.0016, -0.0533, -1.1216, 0, 0, 0);
		testMethod(95, -0.0019, -0.0592, -1.1839, 0, 0, 0);
		testMethod(100, -0.0022, -0.0654, -1.2463, 0, 0, 0);
		testMethod(105, -0.0026, -0.072, -1.3086, 0, 0, 0);
		testMethod(110, -0.003, -0.0788, -1.3709, 0, 0, 0);
		testMethod(115, -0.0034, -0.086, -1.4332, 0, 0, 0);
		testMethod(120, -0.0038, -0.0935, -1.4955, 0, 0, 0);
		testMethod(125, -0.0043, -0.1013, -1.5578, 0, 0, 0);
		testMethod(130, -0.0048, -0.1094, -1.6201, 0, 0, 0);
		testMethod(135, -0.0054, -0.1178, -1.6825, 0, 0, 0);
		testMethod(140, -0.006, -0.1265, -1.7448, 0, 0, 0);
		testMethod(145, -0.0067, -0.1355, -1.8071, 0, 0, 0);
		testMethod(150, -0.0074, -0.1449, -1.8694, 0, 0, 0);
		testMethod(155, -0.0081, -0.1545, -1.9317, 0, 0, 0);
		testMethod(160, -0.0089, -0.1645, -1.994, 0, 0, 0);
		testMethod(165, -0.0098, -0.1748, -2.0563, 0, 0, 0);
		testMethod(170, -0.0107, -0.1854, -2.1186, 0, 0, 0);
		testMethod(175, -0.0116, -0.1963, -2.181, 0, 0, 0);
		testMethod(180, -0.0126, -0.2075, -2.2433, 0, 0, 0);
		testMethod(185, -0.0137, -0.219, -2.3056, 0, 0, 0);
		testMethod(190, -0.0148, -0.2309, -2.3679, 0, 0, 0);
		testMethod(195, -0.016, -0.243, -2.4302, 0, 0, 0);
		testMethod(200, -0.0172, -0.2555, -2.4925, 0, 0, 0);
		testMethod(205, -0.0186, -0.2679, -2.4925, 0, 0, 0);
		testMethod(210, -0.0199, -0.2804, -2.4925, 0, 0, 0);
		testMethod(215, -0.0214, -0.2929, -2.4925, 0, 0, 0);
		testMethod(220, -0.0229, -0.3053, -2.4925, 0, 0, 0);
		testMethod(225, -0.0244, -0.3178, -2.4925, 0, 0, 0);
		testMethod(230, -0.026, -0.3303, -2.4925, 0, 0, 0);
		testMethod(235, -0.0277, -0.3427, -2.4925, 0, 0, 0);
		testMethod(240, -0.0295, -0.3552, -2.4925, 0, 0, 0);
		testMethod(245, -0.0313, -0.3676, -2.4925, 0, 0, 0);
		testMethod(250, -0.0331, -0.3801, -2.4925, 0, 0, 0);
		testMethod(255, -0.0351, -0.3926, -2.4925, 0, 0, 0);
		testMethod(260, -0.0371, -0.405, -2.4925, 0, 0, 0);
		testMethod(265, -0.0391, -0.4175, -2.4925, 0, 0, 0);
		testMethod(270, -0.0412, -0.43, -2.4925, 0, 0, 0);
		testMethod(275, -0.0434, -0.4424, -2.4925, 0, 0, 0);
		testMethod(280, -0.0457, -0.4549, -2.4925, 0, 0, 0);
		testMethod(285, -0.048, -0.4673, -2.4925, 0, 0, 0);
		testMethod(290, -0.0503, -0.4798, -2.4925, 0, 0, 0);
		testMethod(295, -0.0528, -0.4923, -2.4925, 0, 0, 0);
		testMethod(300, -0.0553, -0.5047, -2.4925, 0, 0, 0);
		testMethod(305, -0.0578, -0.5172, -2.4925, 0, 0, 0);
		testMethod(310, -0.0604, -0.5297, -2.4925, 0, 0, 0);
		testMethod(315, -0.0631, -0.5421, -2.4925, 0, 0, 0);
		testMethod(320, -0.0658, -0.5546, -2.4925, 0, 0, 0);
		testMethod(325, -0.0687, -0.567, -2.4925, 0, 0, 0);
		testMethod(330, -0.0715, -0.5795, -2.4925, 0, 0, 0);
		testMethod(335, -0.0744, -0.592, -2.4925, 0, 0, 0);
		testMethod(340, -0.0774, -0.6044, -2.4925, 0, 0, 0);
		testMethod(345, -0.0805, -0.6169, -2.4925, 0, 0, 0);
		testMethod(350, -0.0836, -0.6294, -2.4925, 0, 0, 0);
		testMethod(355, -0.0868, -0.6418, -2.4925, 0, 0, 0);
		testMethod(360, -0.09, -0.6543, -2.4925, 0, 0, 0);
		testMethod(365, -0.0933, -0.6667, -2.4925, 0, 0, 0);
		testMethod(370, -0.0967, -0.6792, -2.4925, 0, 0, 0);
		testMethod(375, -0.1001, -0.6917, -2.4925, 0, 0, 0);
		testMethod(380, -0.1036, -0.7041, -2.4925, 0, 0, 0);
		testMethod(385, -0.1072, -0.7166, -2.4925, 0, 0, 0);
		testMethod(390, -0.1108, -0.7291, -2.4925, 0, 0, 0);
		testMethod(395, -0.1145, -0.7415, -2.4925, 0, 0, 0);
		testMethod(400, -0.1182, -0.754, -2.4925, 0, 0, 0);
		testMethod(405, -0.122, -0.7665, -2.4925, 0, 0, 0);
		testMethod(410, -0.1259, -0.7789, -2.4925, 0, 0, 0);
		testMethod(415, -0.1298, -0.7914, -2.4925, 0, 0, 0);
		testMethod(420, -0.1338, -0.8038, -2.4925, 0, 0, 0);
		testMethod(425, -0.1378, -0.8163, -2.4925, 0, 0, 0);
		testMethod(430, -0.1419, -0.8288, -2.4925, 0, 0, 0);
		testMethod(435, -0.1461, -0.8412, -2.4925, 0, 0, 0);
		testMethod(440, -0.1503, -0.8537, -2.4925, 0, 0, 0);
		testMethod(445, -0.1546, -0.8662, -2.4925, 0, 0, 0);
		testMethod(450, -0.159, -0.8786, -2.4925, 0, 0, 0);
		testMethod(455, -0.1634, -0.8911, -2.4925, 0, 0, 0);
		testMethod(460, -0.1679, -0.9035, -2.4925, 0, 0, 0);
		testMethod(465, -0.1725, -0.916, -2.4925, 0, 0, 0);
		testMethod(470, -0.1771, -0.9285, -2.4925, 0, 0, 0);
		testMethod(475, -0.1818, -0.9409, -2.4925, 0, 0, 0);
		testMethod(480, -0.1865, -0.9534, -2.4925, 0, 0, 0);
		testMethod(485, -0.1913, -0.9659, -2.4925, 0, 0, 0);
		testMethod(490, -0.1961, -0.9783, -2.4925, 0, 0, 0);
		testMethod(495, -0.2011, -0.9908, -2.4925, 0, 0, 0);
		testMethod(500, -0.2061, -1.0032, -2.4925, 0, 0, 0);
		testMethod(505, -0.2111, -1.0157, -2.4925, 0, 0, 0);
		testMethod(510, -0.2162, -1.0282, -2.4925, 0, 0, 0);
		testMethod(515, -0.2214, -1.0406, -2.4925, 0, 0, 0);
		testMethod(520, -0.2266, -1.0531, -2.4925, 0, 0, 0);
		testMethod(525, -0.2319, -1.0656, -2.4925, 0, 0, 0);
		testMethod(530, -0.2373, -1.078, -2.4925, 0, 0, 0);
		testMethod(535, -0.2427, -1.0905, -2.4925, 0, 0, 0);
		testMethod(540, -0.2482, -1.1029, -2.4925, 0, 0, 0);
		testMethod(545, -0.2537, -1.1154, -2.4925, 0, 0, 0);
		testMethod(550, -0.2593, -1.1279, -2.4925, 0, 0, 0);
		testMethod(555, -0.265, -1.1403, -2.4925, 0, 0, 0);
		testMethod(560, -0.2707, -1.1528, -2.4925, 0, 0, 0);
		testMethod(565, -0.2765, -1.1653, -2.4925, 0, 0, 0);
		testMethod(570, -0.2824, -1.1777, -2.4925, 0, 0, 0);
		testMethod(575, -0.2883, -1.1902, -2.4925, 0, 0, 0);
		testMethod(580, -0.2943, -1.2026, -2.4925, 0, 0, 0);
		testMethod(585, -0.3003, -1.2151, -2.4925, 0, 0, 0);
		testMethod(590, -0.3064, -1.2276, -2.4925, 0, 0, 0);
		testMethod(595, -0.3126, -1.24, -2.4925, 0, 0, 0);
		testMethod(600, -0.3188, -1.2525, -2.4925, 0, 0, 0);
		testMethod(605, -0.3251, -1.265, -2.4925, 0, 0, 0);
		testMethod(610, -0.3315, -1.2774, -2.4925, 0, 0, 0);
		testMethod(615, -0.3379, -1.2899, -2.4925, 0, 0, 0);
		testMethod(620, -0.3444, -1.3023, -2.4925, 0, 0, 0);
		testMethod(625, -0.3509, -1.3148, -2.4925, 0, 0, 0);
		testMethod(630, -0.3575, -1.3273, -2.4925, 0, 0, 0);
		testMethod(635, -0.3642, -1.3397, -2.4925, 0, 0, 0);
		testMethod(640, -0.3709, -1.3522, -2.4925, 0, 0, 0);
		testMethod(645, -0.3777, -1.3647, -2.4925, 0, 0, 0);
		testMethod(650, -0.3846, -1.3771, -2.4925, 0, 0, 0);
		testMethod(655, -0.3915, -1.3896, -2.4925, 0, 0, 0);
		testMethod(660, -0.3985, -1.402, -2.4925, 0, 0, 0);
		testMethod(665, -0.4055, -1.4145, -2.4925, 0, 0, 0);
		testMethod(670, -0.4126, -1.427, -2.4925, 0, 0, 0);
		testMethod(675, -0.4198, -1.4394, -2.4925, 0, 0, 0);
		testMethod(680, -0.427, -1.4519, -2.4925, 0, 0, 0);
		testMethod(685, -0.4343, -1.464, -2.4302, 0, 0, 0);
		testMethod(690, -0.4417, -1.4759, -2.3679, 0, 0, 0);
		testMethod(695, -0.4491, -1.4874, -2.3056, 0, 0, 0);
		testMethod(700, -0.4565, -1.4986, -2.2433, 0, 0, 0);
		testMethod(705, -0.464, -1.5095, -2.181, 0, 0, 0);
		testMethod(710, -0.4716, -1.5201, -2.1186, 0, 0, 0);
		testMethod(715, -0.4792, -1.5304, -2.0563, 0, 0, 0);
		testMethod(720, -0.4869, -1.5404, -1.994, 0, 0, 0);
		testMethod(725, -0.4947, -1.55, -1.9317, 0, 0, 0);
		testMethod(730, -0.5024, -1.5594, -1.8694, 0, 0, 0);
		testMethod(735, -0.5102, -1.5684, -1.8071, 0, 0, 0);
		testMethod(740, -0.5181, -1.5771, -1.7448, 0, 0, 0);
		testMethod(745, -0.526, -1.5856, -1.6825, 0, 0, 0);
		testMethod(750, -0.534, -1.5937, -1.6201, 0, 0, 0);
		testMethod(755, -0.542, -1.6014, -1.5578, 0, 0, 0);
		testMethod(760, -0.55, -1.6089, -1.4955, 0, 0, 0);
		testMethod(765, -0.558, -1.6161, -1.4332, 0, 0, 0);
		testMethod(770, -0.5661, -1.6229, -1.3709, 0, 0, 0);
		testMethod(775, -0.5743, -1.6295, -1.3086, 0, 0, 0);
		testMethod(780, -0.5824, -1.6357, -1.2463, 0, 0, 0);
		testMethod(785, -0.5906, -1.6416, -1.1839, 0, 0, 0);
		testMethod(790, -0.5988, -1.6472, -1.1216, 0, 0, 0);
		testMethod(795, -0.6071, -1.6525, -1.0593, 0, 0, 0);
		testMethod(800, -0.6154, -1.6575, -0.997, 0, 0, 0);
		testMethod(805, -0.6237, -1.6622, -0.9347, 0, 0, 0);
		testMethod(810, -0.632, -1.6666, -0.8724, 0, 0, 0);
		testMethod(815, -0.6403, -1.6706, -0.8101, 0, 0, 0);
		testMethod(820, -0.6487, -1.6744, -0.7478, 0, 0, 0);
		testMethod(825, -0.6571, -1.6778, -0.6854, 0, 0, 0);
		testMethod(830, -0.6655, -1.6809, -0.6231, 0, 0, 0);
		testMethod(835, -0.6739, -1.6837, -0.5608, 0, 0, 0);
		testMethod(840, -0.6823, -1.6862, -0.4985, 0, 0, 0);
		testMethod(845, -0.6907, -1.6884, -0.4362, 0, 0, 0);
		testMethod(850, -0.6992, -1.6902, -0.3739, 0, 0, 0);
		testMethod(855, -0.7077, -1.6918, -0.3116, 0, 0, 0);
		testMethod(860, -0.7161, -1.693, -0.2493, 0, 0, 0);
		testMethod(865, -0.7246, -1.694, -0.1869, 0, 0, 0);
		testMethod(870, -0.7331, -1.6946, -0.1246, 0, 0, 0);
		testMethod(875, -0.7415, -1.6949, -0.0623, 0, 0, 0);
		testMethod(880, -0.75, -1.6949, -0, 0, 0, 0);
		testMethod(885, -0.7585, -1.6949, -0, 0, 0, 0);
		testMethod(890, -0.7669, -1.6946, 0.0623, 0, 0, 0);
		testMethod(895, -0.7754, -1.694, 0.1246, 0, 0, 0);
		testMethod(900, -0.7839, -1.693, 0.1869, 0, 0, 0);
		testMethod(905, -0.7923, -1.6918, 0.2493, 0, 0, 0);
		testMethod(910, -0.8008, -1.6902, 0.3116, 0, 0, 0);
		testMethod(915, -0.8093, -1.6884, 0.3739, 0, 0, 0);
		testMethod(920, -0.8177, -1.6862, 0.4362, 0, 0, 0);
		testMethod(925, -0.8261, -1.6837, 0.4985, 0, 0, 0);
		testMethod(930, -0.8345, -1.6809, 0.5608, 0, 0, 0);
		testMethod(935, -0.8429, -1.6778, 0.6231, 0, 0, 0);
		testMethod(940, -0.8513, -1.6744, 0.6854, 0, 0, 0);
		testMethod(945, -0.8597, -1.6706, 0.7478, 0, 0, 0);
		testMethod(950, -0.868, -1.6666, 0.8101, 0, 0, 0);
		testMethod(955, -0.8763, -1.6622, 0.8724, 0, 0, 0);
		testMethod(960, -0.8846, -1.6575, 0.9347, 0, 0, 0);
		testMethod(965, -0.8929, -1.6525, 0.997, 0, 0, 0);
		testMethod(970, -0.9012, -1.6472, 1.0593, 0, 0, 0);
		testMethod(975, -0.9094, -1.6416, 1.1216, 0, 0, 0);
		testMethod(980, -0.9176, -1.6357, 1.1839, 0, 0, 0);
		testMethod(985, -0.9257, -1.6295, 1.2463, 0, 0, 0);
		testMethod(990, -0.9339, -1.6229, 1.3086, 0, 0, 0);
		testMethod(995, -0.942, -1.6161, 1.3709, 0, 0, 0);
		testMethod(1000, -0.95, -1.6089, 1.4332, 0, 0, 0);
		testMethod(1005, -0.958, -1.6014, 1.4955, 0, 0, 0);
		testMethod(1010, -0.966, -1.5937, 1.5578, 0, 0, 0);
		testMethod(1015, -0.974, -1.5856, 1.6201, 0, 0, 0);
		testMethod(1020, -0.9819, -1.5771, 1.6825, 0, 0, 0);
		testMethod(1025, -0.9898, -1.5684, 1.7448, 0, 0, 0);
		testMethod(1030, -0.9976, -1.5594, 1.8071, 0, 0, 0);
		testMethod(1035, -1.0053, -1.55, 1.8694, 0, 0, 0);
		testMethod(1040, -1.0131, -1.5404, 1.9317, 0, 0, 0);
		testMethod(1045, -1.0208, -1.5304, 1.994, 0, 0, 0);
		testMethod(1050, -1.0284, -1.5201, 2.0563, 0, 0, 0);
		testMethod(1055, -1.036, -1.5095, 2.1186, 0, 0, 0);
		testMethod(1060, -1.0435, -1.4986, 2.181, 0, 0, 0);
		testMethod(1065, -1.0509, -1.4874, 2.2433, 0, 0, 0);
		testMethod(1070, -1.0583, -1.4759, 2.3056, 0, 0, 0);
		testMethod(1075, -1.0657, -1.464, 2.3679, 0, 0, 0);
		testMethod(1080, -1.073, -1.4519, 2.4302, 0, 0, 0);
		testMethod(1085, -1.0802, -1.4394, 2.4925, 0, 0, 0);
		testMethod(1090, -1.0874, -1.427, 2.4925, 0, 0, 0);
		testMethod(1095, -1.0945, -1.4145, 2.4925, 0, 0, 0);
		testMethod(1100, -1.1015, -1.402, 2.4925, 0, 0, 0);
		testMethod(1105, -1.1085, -1.3896, 2.4925, 0, 0, 0);
		testMethod(1110, -1.1154, -1.3771, 2.4925, 0, 0, 0);
		testMethod(1115, -1.1223, -1.3647, 2.4925, 0, 0, 0);
		testMethod(1120, -1.1291, -1.3522, 2.4925, 0, 0, 0);
		testMethod(1125, -1.1358, -1.3397, 2.4925, 0, 0, 0);
		testMethod(1130, -1.1425, -1.3273, 2.4925, 0, 0, 0);
		testMethod(1135, -1.1491, -1.3148, 2.4925, 0, 0, 0);
		testMethod(1140, -1.1556, -1.3023, 2.4925, 0, 0, 0);
		testMethod(1145, -1.1621, -1.2899, 2.4925, 0, 0, 0);
		testMethod(1150, -1.1685, -1.2774, 2.4925, 0, 0, 0);
		testMethod(1155, -1.1749, -1.265, 2.4925, 0, 0, 0);
		testMethod(1160, -1.1812, -1.2525, 2.4925, 0, 0, 0);
		testMethod(1165, -1.1874, -1.24, 2.4925, 0, 0, 0);
		testMethod(1170, -1.1936, -1.2276, 2.4925, 0, 0, 0);
		testMethod(1175, -1.1997, -1.2151, 2.4925, 0, 0, 0);
		testMethod(1180, -1.2057, -1.2026, 2.4925, 0, 0, 0);
		testMethod(1185, -1.2117, -1.1902, 2.4925, 0, 0, 0);
		testMethod(1190, -1.2176, -1.1777, 2.4925, 0, 0, 0);
		testMethod(1195, -1.2235, -1.1653, 2.4925, 0, 0, 0);
		testMethod(1200, -1.2293, -1.1528, 2.4925, 0, 0, 0);
		testMethod(1205, -1.235, -1.1403, 2.4925, 0, 0, 0);
		testMethod(1210, -1.2407, -1.1279, 2.4925, 0, 0, 0);
		testMethod(1215, -1.2463, -1.1154, 2.4925, 0, 0, 0);
		testMethod(1220, -1.2518, -1.1029, 2.4925, 0, 0, 0);
		testMethod(1225, -1.2573, -1.0905, 2.4925, 0, 0, 0);
		testMethod(1230, -1.2627, -1.078, 2.4925, 0, 0, 0);
		testMethod(1235, -1.2681, -1.0656, 2.4925, 0, 0, 0);
		testMethod(1240, -1.2734, -1.0531, 2.4925, 0, 0, 0);
		testMethod(1245, -1.2786, -1.0406, 2.4925, 0, 0, 0);
		testMethod(1250, -1.2838, -1.0282, 2.4925, 0, 0, 0);
		testMethod(1255, -1.2889, -1.0157, 2.4925, 0, 0, 0);
		testMethod(1260, -1.2939, -1.0032, 2.4925, 0, 0, 0);
		testMethod(1265, -1.2989, -0.9908, 2.4925, 0, 0, 0);
		testMethod(1270, -1.3039, -0.9783, 2.4925, 0, 0, 0);
		testMethod(1275, -1.3087, -0.9659, 2.4925, 0, 0, 0);
		testMethod(1280, -1.3135, -0.9534, 2.4925, 0, 0, 0);
		testMethod(1285, -1.3182, -0.9409, 2.4925, 0, 0, 0);
		testMethod(1290, -1.3229, -0.9285, 2.4925, 0, 0, 0);
		testMethod(1295, -1.3275, -0.916, 2.4925, 0, 0, 0);
		testMethod(1300, -1.3321, -0.9035, 2.4925, 0, 0, 0);
		testMethod(1305, -1.3366, -0.8911, 2.4925, 0, 0, 0);
		testMethod(1310, -1.341, -0.8786, 2.4925, 0, 0, 0);
		testMethod(1315, -1.3454, -0.8662, 2.4925, 0, 0, 0);
		testMethod(1320, -1.3497, -0.8537, 2.4925, 0, 0, 0);
		testMethod(1325, -1.3539, -0.8412, 2.4925, 0, 0, 0);
		testMethod(1330, -1.3581, -0.8288, 2.4925, 0, 0, 0);
		testMethod(1335, -1.3622, -0.8163, 2.4925, 0, 0, 0);
		testMethod(1340, -1.3662, -0.8038, 2.4925, 0, 0, 0);
		testMethod(1345, -1.3702, -0.7914, 2.4925, 0, 0, 0);
		testMethod(1350, -1.3741, -0.7789, 2.4925, 0, 0, 0);
		testMethod(1355, -1.378, -0.7665, 2.4925, 0, 0, 0);
		testMethod(1360, -1.3818, -0.754, 2.4925, 0, 0, 0);
		testMethod(1365, -1.3855, -0.7415, 2.4925, 0, 0, 0);
		testMethod(1370, -1.3892, -0.7291, 2.4925, 0, 0, 0);
		testMethod(1375, -1.3928, -0.7166, 2.4925, 0, 0, 0);
		testMethod(1380, -1.3964, -0.7041, 2.4925, 0, 0, 0);
		testMethod(1385, -1.3999, -0.6917, 2.4925, 0, 0, 0);
		testMethod(1390, -1.4033, -0.6792, 2.4925, 0, 0, 0);
		testMethod(1395, -1.4067, -0.6667, 2.4925, 0, 0, 0);
		testMethod(1400, -1.41, -0.6543, 2.4925, 0, 0, 0);
		testMethod(1405, -1.4132, -0.6418, 2.4925, 0, 0, 0);
		testMethod(1410, -1.4164, -0.6294, 2.4925, 0, 0, 0);
		testMethod(1415, -1.4195, -0.6169, 2.4925, 0, 0, 0);
		testMethod(1420, -1.4226, -0.6044, 2.4925, 0, 0, 0);
		testMethod(1425, -1.4256, -0.592, 2.4925, 0, 0, 0);
		testMethod(1430, -1.4285, -0.5795, 2.4925, 0, 0, 0);
		testMethod(1435, -1.4313, -0.567, 2.4925, 0, 0, 0);
		testMethod(1440, -1.4342, -0.5546, 2.4925, 0, 0, 0);
		testMethod(1445, -1.4369, -0.5421, 2.4925, 0, 0, 0);
		testMethod(1450, -1.4396, -0.5297, 2.4925, 0, 0, 0);
		testMethod(1455, -1.4422, -0.5172, 2.4925, 0, 0, 0);
		testMethod(1460, -1.4447, -0.5047, 2.4925, 0, 0, 0);
		testMethod(1465, -1.4472, -0.4923, 2.4925, 0, 0, 0);
		testMethod(1470, -1.4497, -0.4798, 2.4925, 0, 0, 0);
		testMethod(1475, -1.452, -0.4673, 2.4925, 0, 0, 0);
		testMethod(1480, -1.4543, -0.4549, 2.4925, 0, 0, 0);
		testMethod(1485, -1.4566, -0.4424, 2.4925, 0, 0, 0);
		testMethod(1490, -1.4588, -0.43, 2.4925, 0, 0, 0);
		testMethod(1495, -1.4609, -0.4175, 2.4925, 0, 0, 0);
		testMethod(1500, -1.4629, -0.405, 2.4925, 0, 0, 0);
		testMethod(1505, -1.4649, -0.3926, 2.4925, 0, 0, 0);
		testMethod(1510, -1.4669, -0.3801, 2.4925, 0, 0, 0);
		testMethod(1515, -1.4687, -0.3676, 2.4925, 0, 0, 0);
		testMethod(1520, -1.4705, -0.3552, 2.4925, 0, 0, 0);
		testMethod(1525, -1.4723, -0.3427, 2.4925, 0, 0, 0);
		testMethod(1530, -1.474, -0.3303, 2.4925, 0, 0, 0);
		testMethod(1535, -1.4756, -0.3178, 2.4925, 0, 0, 0);
		testMethod(1540, -1.4771, -0.3053, 2.4925, 0, 0, 0);
		testMethod(1545, -1.4786, -0.2929, 2.4925, 0, 0, 0);
		testMethod(1550, -1.4801, -0.2804, 2.4925, 0, 0, 0);
		testMethod(1555, -1.4814, -0.2679, 2.4925, 0, 0, 0);
		testMethod(1560, -1.4828, -0.2555, 2.4925, 0, 0, 0);
		testMethod(1565, -1.484, -0.243, 2.4925, 0, 0, 0);
		testMethod(1570, -1.4852, -0.2309, 2.4302, 0, 0, 0);
		testMethod(1575, -1.4863, -0.219, 2.3679, 0, 0, 0);
		testMethod(1580, -1.4874, -0.2075, 2.3056, 0, 0, 0);
		testMethod(1585, -1.4884, -0.1963, 2.2433, 0, 0, 0);
		testMethod(1590, -1.4893, -0.1854, 2.181, 0, 0, 0);
		testMethod(1595, -1.4902, -0.1748, 2.1186, 0, 0, 0);
		testMethod(1600, -1.4911, -0.1645, 2.0563, 0, 0, 0);
		testMethod(1605, -1.4919, -0.1545, 1.994, 0, 0, 0);
		testMethod(1610, -1.4926, -0.1449, 1.9317, 0, 0, 0);
		testMethod(1615, -1.4933, -0.1355, 1.8694, 0, 0, 0);
		testMethod(1620, -1.494, -0.1265, 1.8071, 0, 0, 0);
		testMethod(1625, -1.4946, -0.1178, 1.7448, 0, 0, 0);
		testMethod(1630, -1.4952, -0.1094, 1.6825, 0, 0, 0);
		testMethod(1635, -1.4957, -0.1013, 1.6201, 0, 0, 0);
		testMethod(1640, -1.4962, -0.0935, 1.5578, 0, 0, 0);
		testMethod(1645, -1.4966, -0.086, 1.4955, 0, 0, 0);
		testMethod(1650, -1.497, -0.0788, 1.4332, 0, 0, 0);
		testMethod(1655, -1.4974, -0.072, 1.3709, 0, 0, 0);
		testMethod(1660, -1.4978, -0.0654, 1.3086, 0, 0, 0);
		testMethod(1665, -1.4981, -0.0592, 1.2463, 0, 0, 0);
		testMethod(1670, -1.4984, -0.0533, 1.1839, 0, 0, 0);
		testMethod(1675, -1.4986, -0.0477, 1.1216, 0, 0, 0);
		testMethod(1680, -1.4988, -0.0424, 1.0593, 0, 0, 0);
		testMethod(1685, -1.499, -0.0374, 0.997, 0, 0, 0);
		testMethod(1690, -1.4992, -0.0327, 0.9347, 0, 0, 0);
		testMethod(1695, -1.4994, -0.0284, 0.8724, 0, 0, 0);
		testMethod(1700, -1.4995, -0.0243, 0.8101, 0, 0, 0);
		testMethod(1705, -1.4996, -0.0206, 0.7478, 0, 0, 0);
		testMethod(1710, -1.4997, -0.0171, 0.6854, 0, 0, 0);
		testMethod(1715, -1.4998, -0.014, 0.6231, 0, 0, 0);
		testMethod(1720, -1.4998, -0.0112, 0.5608, 0, 0, 0);
		testMethod(1725, -1.4999, -0.0087, 0.4985, 0, 0, 0);
		testMethod(1730, -1.4999, -0.0065, 0.4362, 0, 0, 0);
		testMethod(1735, -1.5, -0.0047, 0.3739, 0, 0, 0);
		testMethod(1740, -1.5, -0.0031, 0.3116, 0, 0, 0);
		testMethod(1745, -1.5, -0.0019, 0.2493, 0, 0, 0);
		testMethod(1750, -1.5, -0.0009, 0.1869, 0, 0, 0);
		testMethod(1755, -1.5, -0.0003, 0.1246, 0, 0, 0);
		testMethod(1760, -1.5, -0, 0.0623, 0, 0, 0);
		testMethod(1765, -1.5, -0, -0, 0, 0, 0);
		testMethod(1765, -1.5, -0, -0, 0, 0, 0);
	}
	public void testMethod(int t, double pos, double vel, double acc, double hed, double omg, double alf) {
		time.add((long) t);
		translation.add(new MotionState1D(pos, vel, acc));
		rotation.add(new MotionState1D(hed, omg, alf));
	}

}