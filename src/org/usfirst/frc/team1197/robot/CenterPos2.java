package org.usfirst.frc.team1197.robot;

public class CenterPos2 extends TorTrajectory {

	public CenterPos2() {
		super(-1, 0);
		time.clear();
		translation.clear();
		rotation.clear();
		testMethod(0, 0, 0, 0, 0, 0, 0);
		testMethod(5, -0, -0.0003, -0.0621, 0, 0, 0);
		testMethod(10, -0, -0.0009, -0.1243, 0, 0, 0);
		testMethod(15, -0, -0.0019, -0.1864, 0, 0, 0);
		testMethod(20, -0, -0.0031, -0.2486, 0, 0, 0);
		testMethod(25, -0, -0.0047, -0.3107, 0, 0, 0);
		testMethod(30, -0.0001, -0.0065, -0.3729, 0, 0, 0);
		testMethod(35, -0.0001, -0.0087, -0.435, 0, 0, 0);
		testMethod(40, -0.0002, -0.0112, -0.4971, 0, 0, 0);
		testMethod(45, -0.0002, -0.014, -0.5593, 0, 0, 0);
		testMethod(50, -0.0003, -0.0171, -0.6214, 0, 0, 0);
		testMethod(55, -0.0004, -0.0205, -0.6836, 0, 0, 0);
		testMethod(60, -0.0005, -0.0242, -0.7457, 0, 0, 0);
		testMethod(65, -0.0006, -0.0283, -0.8079, 0, 0, 0);
		testMethod(70, -0.0008, -0.0326, -0.87, 0, 0, 0);
		testMethod(75, -0.001, -0.0373, -0.9321, 0, 0, 0);
		testMethod(80, -0.0012, -0.0423, -0.9943, 0, 0, 0);
		testMethod(85, -0.0014, -0.0475, -1.0564, 0, 0, 0);
		testMethod(90, -0.0016, -0.0531, -1.1186, 0, 0, 0);
		testMethod(95, -0.0019, -0.059, -1.1807, 0, 0, 0);
		testMethod(100, -0.0022, -0.0652, -1.2429, 0, 0, 0);
		testMethod(105, -0.0026, -0.0718, -1.305, 0, 0, 0);
		testMethod(110, -0.0029, -0.0786, -1.3671, 0, 0, 0);
		testMethod(115, -0.0034, -0.0858, -1.4293, 0, 0, 0);
		testMethod(120, -0.0038, -0.0932, -1.4914, 0, 0, 0);
		testMethod(125, -0.0043, -0.101, -1.5536, 0, 0, 0);
		testMethod(130, -0.0048, -0.1091, -1.6157, 0, 0, 0);
		testMethod(135, -0.0054, -0.1174, -1.6779, 0, 0, 0);
		testMethod(140, -0.006, -0.1261, -1.74, 0, 0, 0);
		testMethod(145, -0.0066, -0.1352, -1.8021, 0, 0, 0);
		testMethod(150, -0.0073, -0.1445, -1.8643, 0, 0, 0);
		testMethod(155, -0.0081, -0.1541, -1.9264, 0, 0, 0);
		testMethod(160, -0.0089, -0.1641, -1.9886, 0, 0, 0);
		testMethod(165, -0.0097, -0.1743, -2.0507, 0, 0, 0);
		testMethod(170, -0.0106, -0.1849, -2.1129, 0, 0, 0);
		testMethod(175, -0.0116, -0.1957, -2.175, 0, 0, 0);
		testMethod(180, -0.0126, -0.2069, -2.2371, 0, 0, 0);
		testMethod(185, -0.0137, -0.2184, -2.2993, 0, 0, 0);
		testMethod(190, -0.0148, -0.2302, -2.3614, 0, 0, 0);
		testMethod(195, -0.016, -0.2424, -2.4236, 0, 0, 0);
		testMethod(200, -0.0172, -0.2548, -2.4857, 0, 0, 0);
		testMethod(205, -0.0185, -0.2672, -2.4857, 0, 0, 0);
		testMethod(210, -0.0199, -0.2796, -2.4857, 0, 0, 0);
		testMethod(215, -0.0213, -0.2921, -2.4857, 0, 0, 0);
		testMethod(220, -0.0228, -0.3045, -2.4857, 0, 0, 0);
		testMethod(225, -0.0243, -0.3169, -2.4857, 0, 0, 0);
		testMethod(230, -0.026, -0.3294, -2.4857, 0, 0, 0);
		testMethod(235, -0.0276, -0.3418, -2.4857, 0, 0, 0);
		testMethod(240, -0.0294, -0.3542, -2.4857, 0, 0, 0);
		testMethod(245, -0.0312, -0.3666, -2.4857, 0, 0, 0);
		testMethod(250, -0.033, -0.3791, -2.4857, 0, 0, 0);
		testMethod(255, -0.035, -0.3915, -2.4857, 0, 0, 0);
		testMethod(260, -0.037, -0.4039, -2.4857, 0, 0, 0);
		testMethod(265, -0.039, -0.4164, -2.4857, 0, 0, 0);
		testMethod(270, -0.0411, -0.4288, -2.4857, 0, 0, 0);
		testMethod(275, -0.0433, -0.4412, -2.4857, 0, 0, 0);
		testMethod(280, -0.0455, -0.4536, -2.4857, 0, 0, 0);
		testMethod(285, -0.0478, -0.4661, -2.4857, 0, 0, 0);
		testMethod(290, -0.0502, -0.4785, -2.4857, 0, 0, 0);
		testMethod(295, -0.0526, -0.4909, -2.4857, 0, 0, 0);
		testMethod(300, -0.0551, -0.5034, -2.4857, 0, 0, 0);
		testMethod(305, -0.0577, -0.5158, -2.4857, 0, 0, 0);
		testMethod(310, -0.0603, -0.5282, -2.4857, 0, 0, 0);
		testMethod(315, -0.0629, -0.5406, -2.4857, 0, 0, 0);
		testMethod(320, -0.0657, -0.5531, -2.4857, 0, 0, 0);
		testMethod(325, -0.0685, -0.5655, -2.4857, 0, 0, 0);
		testMethod(330, -0.0713, -0.5779, -2.4857, 0, 0, 0);
		testMethod(335, -0.0742, -0.5904, -2.4857, 0, 0, 0);
		testMethod(340, -0.0772, -0.6028, -2.4857, 0, 0, 0);
		testMethod(345, -0.0803, -0.6152, -2.4857, 0, 0, 0);
		testMethod(350, -0.0834, -0.6276, -2.4857, 0, 0, 0);
		testMethod(355, -0.0865, -0.6401, -2.4857, 0, 0, 0);
		testMethod(360, -0.0898, -0.6525, -2.4857, 0, 0, 0);
		testMethod(365, -0.0931, -0.6649, -2.4857, 0, 0, 0);
		testMethod(370, -0.0964, -0.6774, -2.4857, 0, 0, 0);
		testMethod(375, -0.0998, -0.6898, -2.4857, 0, 0, 0);
		testMethod(380, -0.1033, -0.7022, -2.4857, 0, 0, 0);
		testMethod(385, -0.1069, -0.7146, -2.4857, 0, 0, 0);
		testMethod(390, -0.1105, -0.7271, -2.4857, 0, 0, 0);
		testMethod(395, -0.1141, -0.7395, -2.4857, 0, 0, 0);
		testMethod(400, -0.1179, -0.7519, -2.4857, 0, 0, 0);
		testMethod(405, -0.1217, -0.7644, -2.4857, 0, 0, 0);
		testMethod(410, -0.1255, -0.7768, -2.4857, 0, 0, 0);
		testMethod(415, -0.1294, -0.7892, -2.4857, 0, 0, 0);
		testMethod(420, -0.1334, -0.8016, -2.4857, 0, 0, 0);
		testMethod(425, -0.1374, -0.8141, -2.4857, 0, 0, 0);
		testMethod(430, -0.1415, -0.8265, -2.4857, 0, 0, 0);
		testMethod(435, -0.1457, -0.8389, -2.4857, 0, 0, 0);
		testMethod(440, -0.1499, -0.8514, -2.4857, 0, 0, 0);
		testMethod(445, -0.1542, -0.8638, -2.4857, 0, 0, 0);
		testMethod(450, -0.1586, -0.8762, -2.4857, 0, 0, 0);
		testMethod(455, -0.163, -0.8886, -2.4857, 0, 0, 0);
		testMethod(460, -0.1675, -0.9011, -2.4857, 0, 0, 0);
		testMethod(465, -0.172, -0.9135, -2.4857, 0, 0, 0);
		testMethod(470, -0.1766, -0.9259, -2.4857, 0, 0, 0);
		testMethod(475, -0.1813, -0.9384, -2.4857, 0, 0, 0);
		testMethod(480, -0.186, -0.9508, -2.4857, 0, 0, 0);
		testMethod(485, -0.1908, -0.9632, -2.4857, 0, 0, 0);
		testMethod(490, -0.1956, -0.9756, -2.4857, 0, 0, 0);
		testMethod(495, -0.2005, -0.9881, -2.4857, 0, 0, 0);
		testMethod(500, -0.2055, -1.0005, -2.4857, 0, 0, 0);
		testMethod(505, -0.2105, -1.0129, -2.4857, 0, 0, 0);
		testMethod(510, -0.2156, -1.0254, -2.4857, 0, 0, 0);
		testMethod(515, -0.2208, -1.0378, -2.4857, 0, 0, 0);
		testMethod(520, -0.226, -1.0502, -2.4857, 0, 0, 0);
		testMethod(525, -0.2313, -1.0626, -2.4857, 0, 0, 0);
		testMethod(530, -0.2366, -1.0751, -2.4857, 0, 0, 0);
		testMethod(535, -0.242, -1.0875, -2.4857, 0, 0, 0);
		testMethod(540, -0.2475, -1.0999, -2.4857, 0, 0, 0);
		testMethod(545, -0.253, -1.112, -2.4236, 0, 0, 0);
		testMethod(550, -0.2586, -1.1239, -2.3614, 0, 0, 0);
		testMethod(555, -0.2643, -1.1353, -2.2993, 0, 0, 0);
		testMethod(560, -0.27, -1.1465, -2.2371, 0, 0, 0);
		testMethod(565, -0.2757, -1.1574, -2.175, 0, 0, 0);
		testMethod(570, -0.2815, -1.168, -2.1129, 0, 0, 0);
		testMethod(575, -0.2874, -1.1782, -2.0507, 0, 0, 0);
		testMethod(580, -0.2933, -1.1882, -1.9886, 0, 0, 0);
		testMethod(585, -0.2993, -1.1978, -1.9264, 0, 0, 0);
		testMethod(590, -0.3053, -1.2071, -1.8643, 0, 0, 0);
		testMethod(595, -0.3114, -1.2161, -1.8021, 0, 0, 0);
		testMethod(600, -0.3175, -1.2248, -1.74, 0, 0, 0);
		testMethod(605, -0.3236, -1.2332, -1.6779, 0, 0, 0);
		testMethod(610, -0.3298, -1.2413, -1.6157, 0, 0, 0);
		testMethod(615, -0.336, -1.2491, -1.5536, 0, 0, 0);
		testMethod(620, -0.3423, -1.2565, -1.4914, 0, 0, 0);
		testMethod(625, -0.3486, -1.2637, -1.4293, 0, 0, 0);
		testMethod(630, -0.3549, -1.2705, -1.3671, 0, 0, 0);
		testMethod(635, -0.3613, -1.277, -1.305, 0, 0, 0);
		testMethod(640, -0.3677, -1.2832, -1.2429, 0, 0, 0);
		testMethod(645, -0.3741, -1.2891, -1.1807, 0, 0, 0);
		testMethod(650, -0.3806, -1.2947, -1.1186, 0, 0, 0);
		testMethod(655, -0.3871, -1.3, -1.0564, 0, 0, 0);
		testMethod(660, -0.3936, -1.305, -0.9943, 0, 0, 0);
		testMethod(665, -0.4001, -1.3097, -0.9321, 0, 0, 0);
		testMethod(670, -0.4067, -1.314, -0.87, 0, 0, 0);
		testMethod(675, -0.4133, -1.318, -0.8079, 0, 0, 0);
		testMethod(680, -0.4199, -1.3218, -0.7457, 0, 0, 0);
		testMethod(685, -0.4265, -1.3252, -0.6836, 0, 0, 0);
		testMethod(690, -0.4331, -1.3283, -0.6214, 0, 0, 0);
		testMethod(695, -0.4398, -1.3311, -0.5593, 0, 0, 0);
		testMethod(700, -0.4464, -1.3336, -0.4971, 0, 0, 0);
		testMethod(705, -0.4531, -1.3358, -0.435, 0, 0, 0);
		testMethod(710, -0.4598, -1.3376, -0.3729, 0, 0, 0);
		testMethod(715, -0.4665, -1.3392, -0.3107, 0, 0, 0);
		testMethod(720, -0.4732, -1.3404, -0.2486, 0, 0, 0);
		testMethod(725, -0.4799, -1.3413, -0.1864, 0, 0, 0);
		testMethod(730, -0.4866, -1.342, -0.1243, 0, 0, 0);
		testMethod(735, -0.4933, -1.3423, -0.0621, 0, 0, 0);
		testMethod(740, -0.5, -1.3423, -0, 0, 0, 0);
		testMethod(745, -0.5067, -1.3423, -0, 0, 0, 0);
		testMethod(750, -0.5134, -1.342, 0.0621, 0, 0, 0);
		testMethod(755, -0.5201, -1.3413, 0.1243, 0, 0, 0);
		testMethod(760, -0.5268, -1.3404, 0.1864, 0, 0, 0);
		testMethod(765, -0.5335, -1.3392, 0.2486, 0, 0, 0);
		testMethod(770, -0.5402, -1.3376, 0.3107, 0, 0, 0);
		testMethod(775, -0.5469, -1.3358, 0.3729, 0, 0, 0);
		testMethod(780, -0.5536, -1.3336, 0.435, 0, 0, 0);
		testMethod(785, -0.5602, -1.3311, 0.4971, 0, 0, 0);
		testMethod(790, -0.5669, -1.3283, 0.5593, 0, 0, 0);
		testMethod(795, -0.5735, -1.3252, 0.6214, 0, 0, 0);
		testMethod(800, -0.5801, -1.3218, 0.6836, 0, 0, 0);
		testMethod(805, -0.5867, -1.318, 0.7457, 0, 0, 0);
		testMethod(810, -0.5933, -1.314, 0.8079, 0, 0, 0);
		testMethod(815, -0.5999, -1.3097, 0.87, 0, 0, 0);
		testMethod(820, -0.6064, -1.305, 0.9321, 0, 0, 0);
		testMethod(825, -0.6129, -1.3, 0.9943, 0, 0, 0);
		testMethod(830, -0.6194, -1.2947, 1.0564, 0, 0, 0);
		testMethod(835, -0.6259, -1.2891, 1.1186, 0, 0, 0);
		testMethod(840, -0.6323, -1.2832, 1.1807, 0, 0, 0);
		testMethod(845, -0.6387, -1.277, 1.2429, 0, 0, 0);
		testMethod(850, -0.6451, -1.2705, 1.305, 0, 0, 0);
		testMethod(855, -0.6514, -1.2637, 1.3671, 0, 0, 0);
		testMethod(860, -0.6577, -1.2565, 1.4293, 0, 0, 0);
		testMethod(865, -0.664, -1.2491, 1.4914, 0, 0, 0);
		testMethod(870, -0.6702, -1.2413, 1.5536, 0, 0, 0);
		testMethod(875, -0.6764, -1.2332, 1.6157, 0, 0, 0);
		testMethod(880, -0.6825, -1.2248, 1.6779, 0, 0, 0);
		testMethod(885, -0.6886, -1.2161, 1.74, 0, 0, 0);
		testMethod(890, -0.6947, -1.2071, 1.8021, 0, 0, 0);
		testMethod(895, -0.7007, -1.1978, 1.8643, 0, 0, 0);
		testMethod(900, -0.7067, -1.1882, 1.9264, 0, 0, 0);
		testMethod(905, -0.7126, -1.1782, 1.9886, 0, 0, 0);
		testMethod(910, -0.7185, -1.168, 2.0507, 0, 0, 0);
		testMethod(915, -0.7243, -1.1574, 2.1129, 0, 0, 0);
		testMethod(920, -0.73, -1.1465, 2.175, 0, 0, 0);
		testMethod(925, -0.7357, -1.1353, 2.2371, 0, 0, 0);
		testMethod(930, -0.7414, -1.1239, 2.2993, 0, 0, 0);
		testMethod(935, -0.747, -1.112, 2.3614, 0, 0, 0);
		testMethod(940, -0.7525, -1.0999, 2.4236, 0, 0, 0);
		testMethod(945, -0.758, -1.0875, 2.4857, 0, 0, 0);
		testMethod(950, -0.7634, -1.0751, 2.4857, 0, 0, 0);
		testMethod(955, -0.7687, -1.0626, 2.4857, 0, 0, 0);
		testMethod(960, -0.774, -1.0502, 2.4857, 0, 0, 0);
		testMethod(965, -0.7792, -1.0378, 2.4857, 0, 0, 0);
		testMethod(970, -0.7844, -1.0254, 2.4857, 0, 0, 0);
		testMethod(975, -0.7895, -1.0129, 2.4857, 0, 0, 0);
		testMethod(980, -0.7945, -1.0005, 2.4857, 0, 0, 0);
		testMethod(985, -0.7995, -0.9881, 2.4857, 0, 0, 0);
		testMethod(990, -0.8044, -0.9756, 2.4857, 0, 0, 0);
		testMethod(995, -0.8092, -0.9632, 2.4857, 0, 0, 0);
		testMethod(1000, -0.814, -0.9508, 2.4857, 0, 0, 0);
		testMethod(1005, -0.8187, -0.9384, 2.4857, 0, 0, 0);
		testMethod(1010, -0.8234, -0.9259, 2.4857, 0, 0, 0);
		testMethod(1015, -0.828, -0.9135, 2.4857, 0, 0, 0);
		testMethod(1020, -0.8325, -0.9011, 2.4857, 0, 0, 0);
		testMethod(1025, -0.837, -0.8886, 2.4857, 0, 0, 0);
		testMethod(1030, -0.8414, -0.8762, 2.4857, 0, 0, 0);
		testMethod(1035, -0.8458, -0.8638, 2.4857, 0, 0, 0);
		testMethod(1040, -0.8501, -0.8514, 2.4857, 0, 0, 0);
		testMethod(1045, -0.8543, -0.8389, 2.4857, 0, 0, 0);
		testMethod(1050, -0.8585, -0.8265, 2.4857, 0, 0, 0);
		testMethod(1055, -0.8626, -0.8141, 2.4857, 0, 0, 0);
		testMethod(1060, -0.8666, -0.8016, 2.4857, 0, 0, 0);
		testMethod(1065, -0.8706, -0.7892, 2.4857, 0, 0, 0);
		testMethod(1070, -0.8745, -0.7768, 2.4857, 0, 0, 0);
		testMethod(1075, -0.8783, -0.7644, 2.4857, 0, 0, 0);
		testMethod(1080, -0.8821, -0.7519, 2.4857, 0, 0, 0);
		testMethod(1085, -0.8859, -0.7395, 2.4857, 0, 0, 0);
		testMethod(1090, -0.8895, -0.7271, 2.4857, 0, 0, 0);
		testMethod(1095, -0.8931, -0.7146, 2.4857, 0, 0, 0);
		testMethod(1100, -0.8967, -0.7022, 2.4857, 0, 0, 0);
		testMethod(1105, -0.9002, -0.6898, 2.4857, 0, 0, 0);
		testMethod(1110, -0.9036, -0.6774, 2.4857, 0, 0, 0);
		testMethod(1115, -0.9069, -0.6649, 2.4857, 0, 0, 0);
		testMethod(1120, -0.9102, -0.6525, 2.4857, 0, 0, 0);
		testMethod(1125, -0.9135, -0.6401, 2.4857, 0, 0, 0);
		testMethod(1130, -0.9166, -0.6276, 2.4857, 0, 0, 0);
		testMethod(1135, -0.9197, -0.6152, 2.4857, 0, 0, 0);
		testMethod(1140, -0.9228, -0.6028, 2.4857, 0, 0, 0);
		testMethod(1145, -0.9258, -0.5904, 2.4857, 0, 0, 0);
		testMethod(1150, -0.9287, -0.5779, 2.4857, 0, 0, 0);
		testMethod(1155, -0.9315, -0.5655, 2.4857, 0, 0, 0);
		testMethod(1160, -0.9343, -0.5531, 2.4857, 0, 0, 0);
		testMethod(1165, -0.9371, -0.5406, 2.4857, 0, 0, 0);
		testMethod(1170, -0.9397, -0.5282, 2.4857, 0, 0, 0);
		testMethod(1175, -0.9423, -0.5158, 2.4857, 0, 0, 0);
		testMethod(1180, -0.9449, -0.5034, 2.4857, 0, 0, 0);
		testMethod(1185, -0.9474, -0.4909, 2.4857, 0, 0, 0);
		testMethod(1190, -0.9498, -0.4785, 2.4857, 0, 0, 0);
		testMethod(1195, -0.9522, -0.4661, 2.4857, 0, 0, 0);
		testMethod(1200, -0.9545, -0.4536, 2.4857, 0, 0, 0);
		testMethod(1205, -0.9567, -0.4412, 2.4857, 0, 0, 0);
		testMethod(1210, -0.9589, -0.4288, 2.4857, 0, 0, 0);
		testMethod(1215, -0.961, -0.4164, 2.4857, 0, 0, 0);
		testMethod(1220, -0.963, -0.4039, 2.4857, 0, 0, 0);
		testMethod(1225, -0.965, -0.3915, 2.4857, 0, 0, 0);
		testMethod(1230, -0.967, -0.3791, 2.4857, 0, 0, 0);
		testMethod(1235, -0.9688, -0.3666, 2.4857, 0, 0, 0);
		testMethod(1240, -0.9706, -0.3542, 2.4857, 0, 0, 0);
		testMethod(1245, -0.9724, -0.3418, 2.4857, 0, 0, 0);
		testMethod(1250, -0.974, -0.3294, 2.4857, 0, 0, 0);
		testMethod(1255, -0.9757, -0.3169, 2.4857, 0, 0, 0);
		testMethod(1260, -0.9772, -0.3045, 2.4857, 0, 0, 0);
		testMethod(1265, -0.9787, -0.2921, 2.4857, 0, 0, 0);
		testMethod(1270, -0.9801, -0.2796, 2.4857, 0, 0, 0);
		testMethod(1275, -0.9815, -0.2672, 2.4857, 0, 0, 0);
		testMethod(1280, -0.9828, -0.2548, 2.4857, 0, 0, 0);
		testMethod(1285, -0.984, -0.2424, 2.4857, 0, 0, 0);
		testMethod(1290, -0.9852, -0.2302, 2.4236, 0, 0, 0);
		testMethod(1295, -0.9863, -0.2184, 2.3614, 0, 0, 0);
		testMethod(1300, -0.9874, -0.2069, 2.2993, 0, 0, 0);
		testMethod(1305, -0.9884, -0.1957, 2.2371, 0, 0, 0);
		testMethod(1310, -0.9894, -0.1849, 2.175, 0, 0, 0);
		testMethod(1315, -0.9903, -0.1743, 2.1129, 0, 0, 0);
		testMethod(1320, -0.9911, -0.1641, 2.0507, 0, 0, 0);
		testMethod(1325, -0.9919, -0.1541, 1.9886, 0, 0, 0);
		testMethod(1330, -0.9927, -0.1445, 1.9264, 0, 0, 0);
		testMethod(1335, -0.9934, -0.1352, 1.8643, 0, 0, 0);
		testMethod(1340, -0.994, -0.1261, 1.8021, 0, 0, 0);
		testMethod(1345, -0.9946, -0.1174, 1.74, 0, 0, 0);
		testMethod(1350, -0.9952, -0.1091, 1.6779, 0, 0, 0);
		testMethod(1355, -0.9957, -0.101, 1.6157, 0, 0, 0);
		testMethod(1360, -0.9962, -0.0932, 1.5536, 0, 0, 0);
		testMethod(1365, -0.9966, -0.0858, 1.4914, 0, 0, 0);
		testMethod(1370, -0.9971, -0.0786, 1.4293, 0, 0, 0);
		testMethod(1375, -0.9974, -0.0718, 1.3671, 0, 0, 0);
		testMethod(1380, -0.9978, -0.0652, 1.305, 0, 0, 0);
		testMethod(1385, -0.9981, -0.059, 1.2429, 0, 0, 0);
		testMethod(1390, -0.9984, -0.0531, 1.1807, 0, 0, 0);
		testMethod(1395, -0.9986, -0.0475, 1.1186, 0, 0, 0);
		testMethod(1400, -0.9988, -0.0423, 1.0564, 0, 0, 0);
		testMethod(1405, -0.999, -0.0373, 0.9943, 0, 0, 0);
		testMethod(1410, -0.9992, -0.0326, 0.9321, 0, 0, 0);
		testMethod(1415, -0.9994, -0.0283, 0.87, 0, 0, 0);
		testMethod(1420, -0.9995, -0.0242, 0.8079, 0, 0, 0);
		testMethod(1425, -0.9996, -0.0205, 0.7457, 0, 0, 0);
		testMethod(1430, -0.9997, -0.0171, 0.6836, 0, 0, 0);
		testMethod(1435, -0.9998, -0.014, 0.6214, 0, 0, 0);
		testMethod(1440, -0.9998, -0.0112, 0.5593, 0, 0, 0);
		testMethod(1445, -0.9999, -0.0087, 0.4971, 0, 0, 0);
		testMethod(1450, -0.9999, -0.0065, 0.435, 0, 0, 0);
		testMethod(1455, -1, -0.0047, 0.3729, 0, 0, 0);
		testMethod(1460, -1, -0.0031, 0.3107, 0, 0, 0);
		testMethod(1465, -1, -0.0019, 0.2486, 0, 0, 0);
		testMethod(1470, -1, -0.0009, 0.1864, 0, 0, 0);
		testMethod(1475, -1, -0.0003, 0.1243, 0, 0, 0);
		testMethod(1480, -1, -0, 0.0621, 0, 0, 0);
		testMethod(1485, -1, -0, -0, 0, 0, 0);
		testMethod(1485, -1, -0, -0, 0, 0, 0);
	}
	public void testMethod(int t, double pos, double vel, double acc, double hed, double omg, double alf) {
		time.add((long) t);
		translation.add(new MotionState1D(pos, vel, acc));
		rotation.add(new MotionState1D(hed, omg, alf));
	}

}