package org.usfirst.frc.team1197.robot;

public class BoilerPos1 extends TorTrajectory {

	public BoilerPos1() {
		super(3.2833, 1.0471);
		time.clear();
		translation.clear();
		rotation.clear();
		testMethod(0, 0, 0, 0, 0, 0, 0);
		testMethod(5, 0, 0.0005, 0.0991, 0, 0, 0);
		testMethod(10, 0, 0.0015, 0.1983, 0, 0, 0);
		testMethod(15, 0, 0.003, 0.2974, 0, 0, 0);
		testMethod(20, 0, 0.005, 0.3965, 0, 0, 0);
		testMethod(25, 0.0001, 0.0074, 0.4957, 0, 0, 0);
		testMethod(30, 0.0001, 0.0104, 0.5948, 0, 0, 0);
		testMethod(35, 0.0002, 0.0139, 0.6939, 0, 0, 0);
		testMethod(40, 0.0003, 0.0178, 0.7931, 0, 0, 0);
		testMethod(45, 0.0004, 0.0223, 0.8922, 0, 0, 0);
		testMethod(50, 0.0005, 0.0273, 0.9914, 0, 0, 0);
		testMethod(55, 0.0006, 0.0327, 1.0905, 0, 0, 0);
		testMethod(60, 0.0008, 0.0387, 1.1896, 0, 0, 0);
		testMethod(65, 0.001, 0.0451, 1.2888, 0, 0, 0);
		testMethod(70, 0.0013, 0.052, 1.3879, 0, 0, 0);
		testMethod(75, 0.0015, 0.0595, 1.487, 0, 0, 0);
		testMethod(80, 0.0019, 0.0674, 1.5862, 0, 0, 0);
		testMethod(85, 0.0022, 0.0758, 1.6853, 0, 0, 0);
		testMethod(90, 0.0026, 0.0848, 1.7844, 0, 0, 0);
		testMethod(95, 0.0031, 0.0942, 1.8836, 0, 0, 0);
		testMethod(100, 0.0036, 0.1041, 1.9827, 0, 0, 0);
		testMethod(105, 0.0041, 0.1145, 2.0818, 0, 0, 0);
		testMethod(110, 0.0047, 0.1254, 2.181, 0, 0, 0);
		testMethod(115, 0.0054, 0.1368, 2.2801, 0, 0, 0);
		testMethod(120, 0.0061, 0.1487, 2.3792, 0, 0, 0);
		testMethod(125, 0.0068, 0.1611, 2.4784, 0, 0, 0);
		testMethod(130, 0.0077, 0.174, 2.5775, 0, 0, 0);
		testMethod(135, 0.0086, 0.1874, 2.6767, 0, 0, 0);
		testMethod(140, 0.0096, 0.2012, 2.7758, 0, 0, 0);
		testMethod(145, 0.0106, 0.2156, 2.8749, 0, 0, 0);
		testMethod(150, 0.0117, 0.2305, 2.9741, 0, 0, 0);
		testMethod(155, 0.0129, 0.2459, 3.0732, 0, 0, 0);
		testMethod(160, 0.0142, 0.2617, 3.1723, 0, 0, 0);
		testMethod(165, 0.0155, 0.2781, 3.2715, 0, 0, 0);
		testMethod(170, 0.017, 0.2949, 3.3706, 0, 0, 0);
		testMethod(175, 0.0185, 0.3123, 3.4697, 0, 0, 0);
		testMethod(180, 0.0201, 0.3296, 3.4697, 0, 0, 0);
		testMethod(185, 0.0218, 0.347, 3.4697, 0, 0, 0);
		testMethod(190, 0.0236, 0.3643, 3.4697, 0, 0, 0);
		testMethod(195, 0.0254, 0.3817, 3.4697, 0, 0, 0);
		testMethod(200, 0.0274, 0.399, 3.4697, 0, 0, 0);
		testMethod(205, 0.0294, 0.4164, 3.4697, 0, 0, 0);
		testMethod(210, 0.0315, 0.4337, 3.4697, 0, 0, 0);
		testMethod(215, 0.0337, 0.4511, 3.4697, 0, 0, 0);
		testMethod(220, 0.036, 0.4684, 3.4697, 0, 0, 0);
		testMethod(225, 0.0384, 0.4858, 3.4697, 0, 0, 0);
		testMethod(230, 0.0409, 0.5031, 3.4697, 0, 0, 0);
		testMethod(235, 0.0435, 0.5205, 3.4697, 0, 0, 0);
		testMethod(240, 0.0461, 0.5378, 3.4697, 0, 0, 0);
		testMethod(245, 0.0488, 0.5552, 3.4697, 0, 0, 0);
		testMethod(250, 0.0517, 0.5725, 3.4697, 0, 0, 0);
		testMethod(255, 0.0546, 0.5899, 3.4697, 0, 0, 0);
		testMethod(260, 0.0576, 0.6072, 3.4697, 0, 0, 0);
		testMethod(265, 0.0606, 0.6246, 3.4697, 0, 0, 0);
		testMethod(270, 0.0638, 0.6419, 3.4697, 0, 0, 0);
		testMethod(275, 0.0671, 0.6593, 3.4697, 0, 0, 0);
		testMethod(280, 0.0704, 0.6766, 3.4697, 0, 0, 0);
		testMethod(285, 0.0738, 0.6939, 3.4697, 0, 0, 0);
		testMethod(290, 0.0773, 0.7113, 3.4697, 0, 0, 0);
		testMethod(295, 0.0809, 0.7286, 3.4697, 0, 0, 0);
		testMethod(300, 0.0846, 0.746, 3.4697, 0, 0, 0);
		testMethod(305, 0.0884, 0.7633, 3.4697, 0, 0, 0);
		testMethod(310, 0.0923, 0.7807, 3.4697, 0, 0, 0);
		testMethod(315, 0.0962, 0.798, 3.4697, 0, 0, 0);
		testMethod(320, 0.1002, 0.8154, 3.4697, 0, 0, 0);
		testMethod(325, 0.1044, 0.8327, 3.4697, 0, 0, 0);
		testMethod(330, 0.1086, 0.8501, 3.4697, 0, 0, 0);
		testMethod(335, 0.1129, 0.8674, 3.4697, 0, 0, 0);
		testMethod(340, 0.1172, 0.8848, 3.4697, 0, 0, 0);
		testMethod(345, 0.1217, 0.9021, 3.4697, 0, 0, 0);
		testMethod(350, 0.1263, 0.9195, 3.4697, 0, 0, 0);
		testMethod(355, 0.1309, 0.9368, 3.4697, 0, 0, 0);
		testMethod(360, 0.1356, 0.9542, 3.4697, 0, 0, 0);
		testMethod(365, 0.1404, 0.9715, 3.4697, 0, 0, 0);
		testMethod(370, 0.1453, 0.9889, 3.4697, 0, 0, 0);
		testMethod(375, 0.1503, 1.0062, 3.4697, 0, 0, 0);
		testMethod(380, 0.1554, 1.0236, 3.4697, 0, 0, 0);
		testMethod(385, 0.1606, 1.0409, 3.4697, 0, 0, 0);
		testMethod(390, 0.1658, 1.0583, 3.4697, 0, 0, 0);
		testMethod(395, 0.1711, 1.0756, 3.4697, 0, 0, 0);
		testMethod(400, 0.1766, 1.093, 3.4697, 0, 0, 0);
		testMethod(405, 0.1821, 1.1103, 3.4697, 0, 0, 0);
		testMethod(410, 0.1877, 1.1277, 3.4697, 0, 0, 0);
		testMethod(415, 0.1934, 1.145, 3.4697, 0, 0, 0);
		testMethod(420, 0.1991, 1.1624, 3.4697, 0, 0, 0);
		testMethod(425, 0.205, 1.1797, 3.4697, 0, 0, 0);
		testMethod(430, 0.2109, 1.1971, 3.4697, 0, 0, 0);
		testMethod(435, 0.2169, 1.2144, 3.4697, 0, 0, 0);
		testMethod(440, 0.2231, 1.2318, 3.4697, 0, 0, 0);
		testMethod(445, 0.2293, 1.2491, 3.4697, 0, 0, 0);
		testMethod(450, 0.2356, 1.2665, 3.4697, 0, 0, 0);
		testMethod(455, 0.2419, 1.2838, 3.4697, 0, 0, 0);
		testMethod(460, 0.2484, 1.3012, 3.4697, 0, 0, 0);
		testMethod(465, 0.2549, 1.3185, 3.4697, 0, 0, 0);
		testMethod(470, 0.2616, 1.3358, 3.4697, 0, 0, 0);
		testMethod(475, 0.2683, 1.3532, 3.4697, 0, 0, 0);
		testMethod(480, 0.2751, 1.3705, 3.4697, 0, 0, 0);
		testMethod(485, 0.282, 1.3879, 3.4697, 0, 0, 0);
		testMethod(490, 0.289, 1.4052, 3.4697, 0, 0, 0);
		testMethod(495, 0.2961, 1.4226, 3.4697, 0, 0, 0);
		testMethod(500, 0.3032, 1.4399, 3.4697, 0, 0, 0);
		testMethod(505, 0.3105, 1.4573, 3.4697, 0, 0, 0);
		testMethod(510, 0.3178, 1.4746, 3.4697, 0, 0, 0);
		testMethod(515, 0.3252, 1.492, 3.4697, 0, 0, 0);
		testMethod(520, 0.3327, 1.5093, 3.4697, 0, 0, 0);
		testMethod(525, 0.3403, 1.5267, 3.4697, 0, 0, 0);
		testMethod(530, 0.348, 1.544, 3.4697, 0, 0, 0);
		testMethod(535, 0.3557, 1.5614, 3.4697, 0, 0, 0);
		testMethod(540, 0.3636, 1.5787, 3.4697, 0, 0, 0);
		testMethod(545, 0.3715, 1.5961, 3.4697, 0, 0, 0);
		testMethod(550, 0.3795, 1.6134, 3.4697, 0, 0, 0);
		testMethod(555, 0.3877, 1.6308, 3.4697, 0, 0, 0);
		testMethod(560, 0.3959, 1.6476, 3.3706, 0, 0.0001, 0.0219);
		testMethod(565, 0.4041, 1.664, 3.2715, 0, 0.0008, 0.1386);
		testMethod(570, 0.4125, 1.6798, 3.1723, 0, 0.0022, 0.2725);
		testMethod(575, 0.4209, 1.6952, 3.0732, 0, 0.0042, 0.4136);
		testMethod(580, 0.4294, 1.7101, 2.9741, 0.0001, 0.007, 0.5616);
		testMethod(585, 0.438, 1.7245, 2.8749, 0.0001, 0.0106, 0.7163);
		testMethod(590, 0.4467, 1.7383, 2.7758, 0.0002, 0.015, 0.8774);
		testMethod(595, 0.4554, 1.7517, 2.6767, 0.0002, 0.0202, 1.0446);
		testMethod(600, 0.4642, 1.7646, 2.5775, 0.0004, 0.0263, 1.2177);
		testMethod(605, 0.4731, 1.777, 2.4784, 0.0005, 0.0333, 1.3962);
		testMethod(610, 0.482, 1.7889, 2.3792, 0.0007, 0.0412, 1.5799);
		testMethod(615, 0.4909, 1.8003, 2.2801, 0.0009, 0.05, 1.7684);
		testMethod(620, 0.5, 1.8112, 2.181, 0.0012, 0.0599, 1.9614);
		testMethod(625, 0.5091, 1.8216, 2.0818, 0.0015, 0.0706, 2.1584);
		testMethod(630, 0.5182, 1.8315, 1.9827, 0.0019, 0.0824, 2.3591);
		testMethod(635, 0.5274, 1.8409, 1.8836, 0.0024, 0.0953, 2.563);
		testMethod(640, 0.5366, 1.8499, 1.7844, 0.0029, 0.1091, 2.7698);
		testMethod(645, 0.5459, 1.8583, 1.6853, 0.0034, 0.124, 2.9789);
		testMethod(650, 0.5552, 1.8662, 1.5862, 0.0041, 0.1399, 3.19);
		testMethod(655, 0.5645, 1.8737, 1.487, 0.0048, 0.157, 3.4025);
		testMethod(660, 0.5739, 1.8806, 1.3879, 0.0057, 0.175, 3.6161);
		testMethod(665, 0.5833, 1.887, 1.2888, 0.0066, 0.1942, 3.8302);
		testMethod(670, 0.5928, 1.893, 1.1896, 0.0076, 0.2144, 4.0443);
		testMethod(675, 0.6023, 1.8984, 1.0905, 0.0087, 0.2357, 4.258);
		testMethod(680, 0.6118, 1.9034, 0.9914, 0.01, 0.2581, 4.4708);
		testMethod(685, 0.6213, 1.9079, 0.8922, 0.0113, 0.2815, 4.682);
		testMethod(690, 0.6308, 1.9118, 0.7931, 0.0128, 0.3059, 4.8914);
		testMethod(695, 0.6404, 1.9153, 0.6939, 0.0144, 0.3314, 5.0982);
		testMethod(700, 0.65, 1.9183, 0.5948, 0.0161, 0.3579, 5.3021);
		testMethod(705, 0.6596, 1.9207, 0.4957, 0.018, 0.3854, 5.5024);
		testMethod(710, 0.6692, 1.9227, 0.3965, 0.02, 0.4139, 5.6988);
		testMethod(715, 0.6788, 1.9242, 0.2974, 0.0221, 0.4434, 5.8905);
		testMethod(720, 0.6884, 1.9252, 0.1983, 0.0244, 0.4738, 6.0772);
		testMethod(725, 0.6981, 1.9257, 0.0991, 0.0268, 0.5051, 6.2583);
		testMethod(730, 0.7077, 1.9257, 0, 0.0295, 0.5372, 6.4333);
		testMethod(735, 0.7173, 1.9257, 0, 0.0322, 0.5704, 6.6319);
		testMethod(740, 0.727, 1.9257, 0, 0.0352, 0.6045, 6.8304);
		testMethod(745, 0.7366, 1.9257, 0, 0.0383, 0.6397, 7.029);
		testMethod(750, 0.7462, 1.9257, 0, 0.0416, 0.6758, 7.2276);
		testMethod(755, 0.7558, 1.9257, 0, 0.045, 0.7129, 7.407);
		testMethod(760, 0.7655, 1.9257, 0, 0.0487, 0.7488, 7.1975);
		testMethod(765, 0.7751, 1.9257, 0, 0.0525, 0.7838, 6.9989);
		testMethod(770, 0.7847, 1.9257, 0, 0.0565, 0.8178, 6.8003);
		testMethod(775, 0.7944, 1.9257, 0, 0.0607, 0.8508, 6.6017);
		testMethod(780, 0.804, 1.9257, 0, 0.065, 0.8829, 6.4031);
		testMethod(785, 0.8136, 1.9257, 0, 0.0695, 0.9139, 6.2045);
		testMethod(790, 0.8232, 1.9257, 0, 0.0742, 0.9439, 6.0059);
		testMethod(795, 0.8329, 1.9257, 0, 0.079, 0.973, 5.8074);
		testMethod(800, 0.8425, 1.9257, 0, 0.0839, 1.001, 5.6088);
		testMethod(805, 0.8521, 1.9257, 0, 0.089, 1.028, 5.4102);
		testMethod(810, 0.8618, 1.9257, 0, 0.0942, 1.0541, 5.2116);
		testMethod(815, 0.8714, 1.9257, 0, 0.0995, 1.0792, 5.013);
		testMethod(820, 0.881, 1.9257, 0, 0.105, 1.1032, 4.8144);
		testMethod(825, 0.8906, 1.9257, 0, 0.1105, 1.1263, 4.6158);
		testMethod(830, 0.9003, 1.9257, 0, 0.1162, 1.1484, 4.4173);
		testMethod(835, 0.9099, 1.9257, 0, 0.122, 1.1695, 4.2187);
		testMethod(840, 0.9195, 1.9257, 0, 0.1279, 1.1896, 4.0201);
		testMethod(845, 0.9292, 1.9257, 0, 0.1339, 1.2087, 3.8215);
		testMethod(850, 0.9388, 1.9257, 0, 0.14, 1.2268, 3.6229);
		testMethod(855, 0.9484, 1.9257, 0, 0.1462, 1.2439, 3.4243);
		testMethod(860, 0.958, 1.9257, 0, 0.1524, 1.2601, 3.2257);
		testMethod(865, 0.9677, 1.9257, 0, 0.1588, 1.2752, 3.0271);
		testMethod(870, 0.9773, 1.9257, 0, 0.1652, 1.2894, 2.8286);
		testMethod(875, 0.9869, 1.9257, 0, 0.1717, 1.3025, 2.63);
		testMethod(880, 0.9966, 1.9257, 0, 0.1782, 1.3147, 2.4314);
		testMethod(885, 1.0062, 1.9257, 0, 0.1848, 1.3258, 2.2328);
		testMethod(890, 1.0158, 1.9257, 0, 0.1915, 1.336, 2.0342);
		testMethod(895, 1.0254, 1.9257, 0, 0.1982, 1.3452, 1.8356);
		testMethod(900, 1.0351, 1.9257, 0, 0.2049, 1.3534, 1.637);
		testMethod(905, 1.0447, 1.9257, 0, 0.2117, 1.3606, 1.4384);
		testMethod(910, 1.0543, 1.9257, 0, 0.2185, 1.3667, 1.2399);
		testMethod(915, 1.064, 1.9257, 0, 0.2254, 1.372, 1.0413);
		testMethod(920, 1.0736, 1.9257, 0, 0.2322, 1.3762, 0.8427);
		testMethod(925, 1.0832, 1.9257, 0, 0.2391, 1.3794, 0.6441);
		testMethod(930, 1.0928, 1.9257, 0, 0.246, 1.3816, 0.4455);
		testMethod(935, 1.1025, 1.9257, 0, 0.2529, 1.3829, 0.2469);
		testMethod(940, 1.1121, 1.9257, 0, 0.2599, 1.3831, 0.0549);
		testMethod(945, 1.1217, 1.9257, 0, 0.2668, 1.3831, 0);
		testMethod(950, 1.1314, 1.9257, 0, 0.2737, 1.3831, 0);
		testMethod(955, 1.141, 1.9257, 0, 0.2806, 1.3831, 0);
		testMethod(960, 1.1506, 1.9257, 0, 0.2875, 1.3831, 0);
		testMethod(965, 1.1602, 1.9257, 0, 0.2944, 1.3831, 0);
		testMethod(970, 1.1699, 1.9257, 0, 0.3014, 1.3831, 0);
		testMethod(975, 1.1795, 1.9257, 0, 0.3083, 1.3831, 0);
		testMethod(980, 1.1891, 1.9257, 0, 0.3152, 1.3831, 0);
		testMethod(985, 1.1988, 1.9257, 0, 0.3221, 1.3831, 0);
		testMethod(990, 1.2084, 1.9257, 0, 0.329, 1.3831, 0);
		testMethod(995, 1.218, 1.9257, 0, 0.3359, 1.3831, 0);
		testMethod(1000, 1.2276, 1.9257, 0, 0.3428, 1.3831, 0);
		testMethod(1005, 1.2373, 1.9257, 0, 0.3498, 1.3831, 0);
		testMethod(1010, 1.2469, 1.9257, 0, 0.3567, 1.3831, 0);
		testMethod(1015, 1.2565, 1.9257, 0, 0.3636, 1.3831, 0);
		testMethod(1020, 1.2662, 1.9257, 0, 0.3705, 1.3831, 0);
		testMethod(1025, 1.2758, 1.9257, 0, 0.3774, 1.3831, 0);
		testMethod(1030, 1.2854, 1.9257, 0, 0.3843, 1.3831, 0);
		testMethod(1035, 1.295, 1.9257, 0, 0.3913, 1.3831, 0);
		testMethod(1040, 1.3047, 1.9257, 0, 0.3982, 1.3831, 0);
		testMethod(1045, 1.3143, 1.9257, 0, 0.4051, 1.3831, 0);
		testMethod(1050, 1.3239, 1.9257, 0, 0.412, 1.3831, 0);
		testMethod(1055, 1.3336, 1.9257, 0, 0.4189, 1.3831, 0);
		testMethod(1060, 1.3432, 1.9257, 0, 0.4258, 1.3831, 0);
		testMethod(1065, 1.3528, 1.9257, 0, 0.4328, 1.3831, 0);
		testMethod(1070, 1.3624, 1.9257, 0, 0.4397, 1.3831, 0);
		testMethod(1075, 1.3721, 1.9257, 0, 0.4466, 1.3831, 0);
		testMethod(1080, 1.3817, 1.9257, 0, 0.4535, 1.3831, 0);
		testMethod(1085, 1.3913, 1.9257, 0, 0.4604, 1.3831, 0);
		testMethod(1090, 1.401, 1.9257, 0, 0.4673, 1.3831, 0);
		testMethod(1095, 1.4106, 1.9257, 0, 0.4742, 1.3831, 0);
		testMethod(1100, 1.4202, 1.9257, 0, 0.4812, 1.3831, 0);
		testMethod(1105, 1.4298, 1.9257, 0, 0.4881, 1.3831, 0);
		testMethod(1110, 1.4395, 1.9257, 0, 0.495, 1.3831, 0);
		testMethod(1115, 1.4491, 1.9257, 0, 0.5019, 1.3831, 0);
		testMethod(1120, 1.4587, 1.9257, 0, 0.5088, 1.3831, 0);
		testMethod(1125, 1.4684, 1.9257, 0, 0.5157, 1.3831, 0);
		testMethod(1130, 1.478, 1.9257, 0, 0.5227, 1.3831, 0);
		testMethod(1135, 1.4876, 1.9257, 0, 0.5296, 1.3831, 0);
		testMethod(1140, 1.4972, 1.9257, 0, 0.5365, 1.3831, 0);
		testMethod(1145, 1.5069, 1.9257, 0, 0.5434, 1.3831, 0);
		testMethod(1150, 1.5165, 1.9257, 0, 0.5503, 1.3831, 0);
		testMethod(1155, 1.5261, 1.9257, 0, 0.5572, 1.3831, 0);
		testMethod(1160, 1.5357, 1.9257, 0, 0.5641, 1.3831, 0);
		testMethod(1165, 1.5454, 1.9257, 0, 0.5711, 1.3831, 0);
		testMethod(1170, 1.555, 1.9257, 0, 0.578, 1.3831, 0);
		testMethod(1175, 1.5646, 1.9257, 0, 0.5849, 1.3831, 0);
		testMethod(1180, 1.5743, 1.9257, 0, 0.5918, 1.3831, 0);
		testMethod(1185, 1.5839, 1.9257, 0, 0.5987, 1.3831, 0);
		testMethod(1190, 1.5935, 1.9257, 0, 0.6056, 1.3831, 0);
		testMethod(1195, 1.6031, 1.9257, 0, 0.6126, 1.3831, 0);
		testMethod(1200, 1.6128, 1.9257, 0, 0.6195, 1.3831, 0);
		testMethod(1205, 1.6224, 1.9257, 0, 0.6264, 1.3831, 0);
		testMethod(1210, 1.632, 1.9257, 0, 0.6333, 1.3831, 0);
		testMethod(1215, 1.6417, 1.9257, 0, 0.6402, 1.3831, 0);
		testMethod(1220, 1.6513, 1.9257, 0, 0.6471, 1.3831, 0);
		testMethod(1225, 1.6609, 1.9257, 0, 0.6541, 1.3831, 0);
		testMethod(1230, 1.6705, 1.9257, 0, 0.661, 1.3831, 0);
		testMethod(1235, 1.6802, 1.9257, 0, 0.6679, 1.3831, 0);
		testMethod(1240, 1.6898, 1.9257, 0, 0.6748, 1.3831, 0);
		testMethod(1245, 1.6994, 1.9257, 0, 0.6817, 1.3831, 0);
		testMethod(1250, 1.7091, 1.9257, 0, 0.6886, 1.3831, 0);
		testMethod(1255, 1.7187, 1.9257, 0, 0.6955, 1.3831, 0);
		testMethod(1260, 1.7283, 1.9257, 0, 0.7025, 1.3831, 0);
		testMethod(1265, 1.7379, 1.9257, 0, 0.7094, 1.3831, 0);
		testMethod(1270, 1.7476, 1.9257, 0, 0.7163, 1.3831, 0);
		testMethod(1275, 1.7572, 1.9257, 0, 0.7232, 1.3831, 0);
		testMethod(1280, 1.7668, 1.9257, 0, 0.7301, 1.3831, 0);
		testMethod(1285, 1.7765, 1.9257, 0, 0.737, 1.3831, 0);
		testMethod(1290, 1.7861, 1.9257, 0, 0.744, 1.3831, 0);
		testMethod(1295, 1.7957, 1.9257, 0, 0.7509, 1.3831, 0);
		testMethod(1300, 1.8053, 1.9257, 0, 0.7578, 1.3831, 0);
		testMethod(1305, 1.815, 1.9257, 0, 0.7647, 1.3831, 0);
		testMethod(1310, 1.8246, 1.9257, 0, 0.7716, 1.3831, 0);
		testMethod(1315, 1.8342, 1.9257, 0, 0.7785, 1.3831, 0);
		testMethod(1320, 1.8439, 1.9257, 0, 0.7854, 1.3831, 0);
		testMethod(1325, 1.8535, 1.9257, 0, 0.7924, 1.383, -0.0239);
		testMethod(1330, 1.8631, 1.9257, 0, 0.7993, 1.382, -0.1968);
		testMethod(1335, 1.8727, 1.9257, 0, 0.8062, 1.38, -0.3954);
		testMethod(1340, 1.8824, 1.9257, 0, 0.8131, 1.3771, -0.594);
		testMethod(1345, 1.892, 1.9257, 0, 0.82, 1.3731, -0.7926);
		testMethod(1350, 1.9016, 1.9257, 0, 0.8268, 1.3682, -0.9911);
		testMethod(1355, 1.9113, 1.9257, 0, 0.8336, 1.3622, -1.1897);
		testMethod(1360, 1.9209, 1.9257, 0, 0.8404, 1.3553, -1.3883);
		testMethod(1365, 1.9305, 1.9257, 0, 0.8472, 1.3473, -1.5869);
		testMethod(1370, 1.9401, 1.9257, 0, 0.8539, 1.3384, -1.7855);
		testMethod(1375, 1.9498, 1.9257, 0, 0.8606, 1.3285, -1.9841);
		testMethod(1380, 1.9594, 1.9257, 0, 0.8672, 1.3176, -2.1827);
		testMethod(1385, 1.969, 1.9257, 0, 0.8737, 1.3057, -2.3813);
		testMethod(1390, 1.9787, 1.9257, 0, 0.8802, 1.2928, -2.5798);
		testMethod(1395, 1.9883, 1.9257, 0, 0.8867, 1.2789, -2.7784);
		testMethod(1400, 1.9979, 1.9257, 0, 0.893, 1.264, -2.977);
		testMethod(1405, 2.0075, 1.9257, 0, 0.8993, 1.2481, -3.1756);
		testMethod(1410, 2.0172, 1.9257, 0, 0.9055, 1.2312, -3.3742);
		testMethod(1415, 2.0268, 1.9257, 0, 0.9116, 1.2134, -3.5728);
		testMethod(1420, 2.0364, 1.9257, 0, 0.9176, 1.1945, -3.7714);
		testMethod(1425, 2.0461, 1.9257, 0, 0.9236, 1.1747, -3.9699);
		testMethod(1430, 2.0557, 1.9257, 0, 0.9294, 1.1538, -4.1685);
		testMethod(1435, 2.0653, 1.9257, 0, 0.9351, 1.132, -4.3671);
		testMethod(1440, 2.0749, 1.9257, 0, 0.9407, 1.1092, -4.5657);
		testMethod(1445, 2.0846, 1.9257, 0, 0.9462, 1.0853, -4.7643);
		testMethod(1450, 2.0942, 1.9257, 0, 0.9516, 1.0605, -4.9629);
		testMethod(1455, 2.1038, 1.9257, 0, 0.9568, 1.0347, -5.1615);
		testMethod(1460, 2.1135, 1.9257, 0, 0.9619, 1.0079, -5.3601);
		testMethod(1465, 2.1231, 1.9257, 0, 0.9669, 0.9801, -5.5586);
		testMethod(1470, 2.1327, 1.9257, 0, 0.9717, 0.9513, -5.7572);
		testMethod(1475, 2.1423, 1.9257, 0, 0.9764, 0.9216, -5.9558);
		testMethod(1480, 2.152, 1.9257, 0, 0.9809, 0.8908, -6.1544);
		testMethod(1485, 2.1616, 1.9257, 0, 0.9853, 0.859, -6.353);
		testMethod(1490, 2.1712, 1.9257, 0, 0.9895, 0.8263, -6.5516);
		testMethod(1495, 2.1809, 1.9257, 0, 0.9935, 0.7925, -6.7502);
		testMethod(1500, 2.1905, 1.9257, 0, 0.9974, 0.7578, -6.9488);
		testMethod(1505, 2.2001, 1.9257, 0, 1.0011, 0.722, -7.1473);
		testMethod(1510, 2.2097, 1.9257, 0, 1.0046, 0.6851, -7.3868);
		testMethod(1515, 2.2194, 1.9257, 0, 1.008, 0.6487, -7.2778);
		testMethod(1520, 2.229, 1.9257, 0, 1.0111, 0.6133, -7.0792);
		testMethod(1525, 2.2386, 1.9257, 0, 1.0141, 0.5789, -6.8806);
		testMethod(1530, 2.2483, 1.9257, 0, 1.0169, 0.5455, -6.682);
		testMethod(1535, 2.2579, 1.9257, 0, 1.0196, 0.5131, -6.4834);
		testMethod(1540, 2.2675, 1.9257, 0, 1.0221, 0.4817, -6.2848);
		testMethod(1545, 2.2771, 1.9257, 0, 1.0244, 0.4512, -6.0862);
		testMethod(1550, 2.2868, 1.9257, 0, 1.0266, 0.4218, -5.8876);
		testMethod(1555, 2.2964, 1.9257, 0, 1.0286, 0.3933, -5.6891);
		testMethod(1560, 2.306, 1.9257, 0, 1.0305, 0.3659, -5.4905);
		testMethod(1565, 2.3157, 1.9257, 0, 1.0323, 0.3394, -5.2919);
		testMethod(1570, 2.3253, 1.9257, 0, 1.0339, 0.314, -5.0933);
		testMethod(1575, 2.3349, 1.9257, 0, 1.0354, 0.2895, -4.8947);
		testMethod(1580, 2.3445, 1.9257, 0, 1.0368, 0.266, -4.6961);
		testMethod(1585, 2.3542, 1.9257, 0, 1.0381, 0.2435, -4.4975);
		testMethod(1590, 2.3638, 1.9257, 0, 1.0392, 0.222, -4.2989);
		testMethod(1595, 2.3734, 1.9257, 0, 1.0403, 0.2015, -4.1004);
		testMethod(1600, 2.3831, 1.9257, 0, 1.0412, 0.182, -3.9018);
		testMethod(1605, 2.3927, 1.9257, 0, 1.0421, 0.1635, -3.7032);
		testMethod(1610, 2.4023, 1.9257, 0, 1.0429, 0.146, -3.5046);
		testMethod(1615, 2.4119, 1.9257, 0, 1.0436, 0.1295, -3.306);
		testMethod(1620, 2.4216, 1.9257, 0, 1.0442, 0.1139, -3.1074);
		testMethod(1625, 2.4312, 1.9257, 0, 1.0447, 0.0994, -2.9088);
		testMethod(1630, 2.4408, 1.9257, 0, 1.0452, 0.0858, -2.7103);
		testMethod(1635, 2.4505, 1.9257, 0, 1.0456, 0.0733, -2.5117);
		testMethod(1640, 2.4601, 1.9257, 0, 1.0459, 0.0617, -2.3131);
		testMethod(1645, 2.4697, 1.9257, 0, 1.0462, 0.0511, -2.1145);
		testMethod(1650, 2.4793, 1.9257, 0, 1.0464, 0.0415, -1.9159);
		testMethod(1655, 2.489, 1.9257, 0, 1.0466, 0.033, -1.7173);
		testMethod(1660, 2.4986, 1.9257, 0, 1.0468, 0.0254, -1.5187);
		testMethod(1665, 2.5082, 1.9257, 0, 1.0469, 0.0188, -1.3201);
		testMethod(1670, 2.5179, 1.9257, 0, 1.0469, 0.0132, -1.1216);
		testMethod(1675, 2.5275, 1.9257, 0, 1.047, 0.0085, -0.923);
		testMethod(1680, 2.5371, 1.9257, 0, 1.047, 0.0049, -0.7244);
		testMethod(1685, 2.5467, 1.9257, 0, 1.047, 0.0023, -0.5258);
		testMethod(1690, 2.5564, 1.9257, 0, 1.0471, 0.0007, -0.3272);
		testMethod(1695, 2.566, 1.9257, 0, 1.0471, 0, -0.1286);
		testMethod(1700, 2.5756, 1.9257, 0, 1.0471, 0, -0.0022);
		testMethod(1705, 2.5853, 1.9257, 0, 1.0471, 0, 0);
		testMethod(1710, 2.5949, 1.9252, -0.0991, 1.0471, 0, 0);
		testMethod(1715, 2.6045, 1.9242, -0.1983, 1.0471, 0, 0);
		testMethod(1720, 2.6141, 1.9227, -0.2974, 1.0471, 0, 0);
		testMethod(1725, 2.6237, 1.9207, -0.3965, 1.0471, 0, 0);
		testMethod(1730, 2.6333, 1.9183, -0.4957, 1.0471, 0, 0);
		testMethod(1735, 2.6429, 1.9153, -0.5948, 1.0471, 0, 0);
		testMethod(1740, 2.6525, 1.9118, -0.6939, 1.0471, 0, 0);
		testMethod(1745, 2.662, 1.9079, -0.7931, 1.0471, 0, 0);
		testMethod(1750, 2.6716, 1.9034, -0.8922, 1.0471, 0, 0);
		testMethod(1755, 2.6811, 1.8984, -0.9914, 1.0471, 0, 0);
		testMethod(1760, 2.6905, 1.893, -1.0905, 1.0471, 0, 0);
		testMethod(1765, 2.7, 1.887, -1.1896, 1.0471, 0, 0);
		testMethod(1770, 2.7094, 1.8806, -1.2888, 1.0471, 0, 0);
		testMethod(1775, 2.7188, 1.8737, -1.3879, 1.0471, 0, 0);
		testMethod(1780, 2.7282, 1.8662, -1.487, 1.0471, 0, 0);
		testMethod(1785, 2.7375, 1.8583, -1.5862, 1.0471, 0, 0);
		testMethod(1790, 2.7467, 1.8499, -1.6853, 1.0471, 0, 0);
		testMethod(1795, 2.756, 1.8409, -1.7844, 1.0471, 0, 0);
		testMethod(1800, 2.7651, 1.8315, -1.8836, 1.0471, 0, 0);
		testMethod(1805, 2.7743, 1.8216, -1.9827, 1.0471, 0, 0);
		testMethod(1810, 2.7834, 1.8112, -2.0818, 1.0471, 0, 0);
		testMethod(1815, 2.7924, 1.8003, -2.181, 1.0471, 0, 0);
		testMethod(1820, 2.8014, 1.7889, -2.2801, 1.0471, 0, 0);
		testMethod(1825, 2.8103, 1.777, -2.3792, 1.0471, 0, 0);
		testMethod(1830, 2.8191, 1.7646, -2.4784, 1.0471, 0, 0);
		testMethod(1835, 2.8279, 1.7517, -2.5775, 1.0471, 0, 0);
		testMethod(1840, 2.8366, 1.7383, -2.6767, 1.0471, 0, 0);
		testMethod(1845, 2.8453, 1.7245, -2.7758, 1.0471, 0, 0);
		testMethod(1850, 2.8539, 1.7101, -2.8749, 1.0471, 0, 0);
		testMethod(1855, 2.8624, 1.6952, -2.9741, 1.0471, 0, 0);
		testMethod(1860, 2.8708, 1.6798, -3.0732, 1.0471, 0, 0);
		testMethod(1865, 2.8792, 1.664, -3.1723, 1.0471, 0, 0);
		testMethod(1870, 2.8875, 1.6476, -3.2715, 1.0471, 0, 0);
		testMethod(1875, 2.8957, 1.6308, -3.3706, 1.0471, 0, 0);
		testMethod(1880, 2.9038, 1.6134, -3.4697, 1.0471, 0, 0);
		testMethod(1885, 2.9118, 1.5961, -3.4697, 1.0471, 0, 0);
		testMethod(1890, 2.9197, 1.5787, -3.4697, 1.0471, 0, 0);
		testMethod(1895, 2.9276, 1.5614, -3.4697, 1.0471, 0, 0);
		testMethod(1900, 2.9354, 1.544, -3.4697, 1.0471, 0, 0);
		testMethod(1905, 2.943, 1.5267, -3.4697, 1.0471, 0, 0);
		testMethod(1910, 2.9506, 1.5093, -3.4697, 1.0471, 0, 0);
		testMethod(1915, 2.9581, 1.492, -3.4697, 1.0471, 0, 0);
		testMethod(1920, 2.9655, 1.4746, -3.4697, 1.0471, 0, 0);
		testMethod(1925, 2.9729, 1.4573, -3.4697, 1.0471, 0, 0);
		testMethod(1930, 2.9801, 1.4399, -3.4697, 1.0471, 0, 0);
		testMethod(1935, 2.9873, 1.4226, -3.4697, 1.0471, 0, 0);
		testMethod(1940, 2.9943, 1.4052, -3.4697, 1.0471, 0, 0);
		testMethod(1945, 3.0013, 1.3879, -3.4697, 1.0471, 0, 0);
		testMethod(1950, 3.0082, 1.3705, -3.4697, 1.0471, 0, 0);
		testMethod(1955, 3.015, 1.3532, -3.4697, 1.0471, 0, 0);
		testMethod(1960, 3.0218, 1.3358, -3.4697, 1.0471, 0, 0);
		testMethod(1965, 3.0284, 1.3185, -3.4697, 1.0471, 0, 0);
		testMethod(1970, 3.0349, 1.3012, -3.4697, 1.0471, 0, 0);
		testMethod(1975, 3.0414, 1.2838, -3.4697, 1.0471, 0, 0);
		testMethod(1980, 3.0478, 1.2665, -3.4697, 1.0471, 0, 0);
		testMethod(1985, 3.0541, 1.2491, -3.4697, 1.0471, 0, 0);
		testMethod(1990, 3.0603, 1.2318, -3.4697, 1.0471, 0, 0);
		testMethod(1995, 3.0664, 1.2144, -3.4697, 1.0471, 0, 0);
		testMethod(2000, 3.0724, 1.1971, -3.4697, 1.0471, 0, 0);
		testMethod(2005, 3.0784, 1.1797, -3.4697, 1.0471, 0, 0);
		testMethod(2010, 3.0842, 1.1624, -3.4697, 1.0471, 0, 0);
		testMethod(2015, 3.09, 1.145, -3.4697, 1.0471, 0, 0);
		testMethod(2020, 3.0957, 1.1277, -3.4697, 1.0471, 0, 0);
		testMethod(2025, 3.1013, 1.1103, -3.4697, 1.0471, 0, 0);
		testMethod(2030, 3.1068, 1.093, -3.4697, 1.0471, 0, 0);
		testMethod(2035, 3.1122, 1.0756, -3.4697, 1.0471, 0, 0);
		testMethod(2040, 3.1175, 1.0583, -3.4697, 1.0471, 0, 0);
		testMethod(2045, 3.1228, 1.0409, -3.4697, 1.0471, 0, 0);
		testMethod(2050, 3.1279, 1.0236, -3.4697, 1.0471, 0, 0);
		testMethod(2055, 3.133, 1.0062, -3.4697, 1.0471, 0, 0);
		testMethod(2060, 3.138, 0.9889, -3.4697, 1.0471, 0, 0);
		testMethod(2065, 3.1429, 0.9715, -3.4697, 1.0471, 0, 0);
		testMethod(2070, 3.1477, 0.9542, -3.4697, 1.0471, 0, 0);
		testMethod(2075, 3.1524, 0.9368, -3.4697, 1.0471, 0, 0);
		testMethod(2080, 3.1571, 0.9195, -3.4697, 1.0471, 0, 0);
		testMethod(2085, 3.1616, 0.9021, -3.4697, 1.0471, 0, 0);
		testMethod(2090, 3.1661, 0.8848, -3.4697, 1.0471, 0, 0);
		testMethod(2095, 3.1705, 0.8674, -3.4697, 1.0471, 0, 0);
		testMethod(2100, 3.1748, 0.8501, -3.4697, 1.0471, 0, 0);
		testMethod(2105, 3.179, 0.8327, -3.4697, 1.0471, 0, 0);
		testMethod(2110, 3.1831, 0.8154, -3.4697, 1.0471, 0, 0);
		testMethod(2115, 3.1871, 0.798, -3.4697, 1.0471, 0, 0);
		testMethod(2120, 3.1911, 0.7807, -3.4697, 1.0471, 0, 0);
		testMethod(2125, 3.1949, 0.7633, -3.4697, 1.0471, 0, 0);
		testMethod(2130, 3.1987, 0.746, -3.4697, 1.0471, 0, 0);
		testMethod(2135, 3.2024, 0.7286, -3.4697, 1.0471, 0, 0);
		testMethod(2140, 3.206, 0.7113, -3.4697, 1.0471, 0, 0);
		testMethod(2145, 3.2095, 0.6939, -3.4697, 1.0471, 0, 0);
		testMethod(2150, 3.2129, 0.6766, -3.4697, 1.0471, 0, 0);
		testMethod(2155, 3.2163, 0.6593, -3.4697, 1.0471, 0, 0);
		testMethod(2160, 3.2195, 0.6419, -3.4697, 1.0471, 0, 0);
		testMethod(2165, 3.2227, 0.6246, -3.4697, 1.0471, 0, 0);
		testMethod(2170, 3.2258, 0.6072, -3.4697, 1.0471, 0, 0);
		testMethod(2175, 3.2288, 0.5899, -3.4697, 1.0471, 0, 0);
		testMethod(2180, 3.2317, 0.5725, -3.4697, 1.0471, 0, 0);
		testMethod(2185, 3.2345, 0.5552, -3.4697, 1.0471, 0, 0);
		testMethod(2190, 3.2372, 0.5378, -3.4697, 1.0471, 0, 0);
		testMethod(2195, 3.2399, 0.5205, -3.4697, 1.0471, 0, 0);
		testMethod(2200, 3.2424, 0.5031, -3.4697, 1.0471, 0, 0);
		testMethod(2205, 3.2449, 0.4858, -3.4697, 1.0471, 0, 0);
		testMethod(2210, 3.2473, 0.4684, -3.4697, 1.0471, 0, 0);
		testMethod(2215, 3.2496, 0.4511, -3.4697, 1.0471, 0, 0);
		testMethod(2220, 3.2518, 0.4337, -3.4697, 1.0471, 0, 0);
		testMethod(2225, 3.2539, 0.4164, -3.4697, 1.0471, 0, 0);
		testMethod(2230, 3.256, 0.399, -3.4697, 1.0471, 0, 0);
		testMethod(2235, 3.2579, 0.3817, -3.4697, 1.0471, 0, 0);
		testMethod(2240, 3.2598, 0.3643, -3.4697, 1.0471, 0, 0);
		testMethod(2245, 3.2616, 0.347, -3.4697, 1.0471, 0, 0);
		testMethod(2250, 3.2632, 0.3296, -3.4697, 1.0471, 0, 0);
		testMethod(2255, 3.2649, 0.3123, -3.4697, 1.0471, 0, 0);
		testMethod(2260, 3.2664, 0.2949, -3.4697, 1.0471, 0, 0);
		testMethod(2265, 3.2678, 0.2781, -3.3706, 1.0471, 0, 0);
		testMethod(2270, 3.2692, 0.2617, -3.2715, 1.0471, 0, 0);
		testMethod(2275, 3.2704, 0.2459, -3.1723, 1.0471, 0, 0);
		testMethod(2280, 3.2716, 0.2305, -3.0732, 1.0471, 0, 0);
		testMethod(2285, 3.2727, 0.2156, -2.9741, 1.0471, 0, 0);
		testMethod(2290, 3.2738, 0.2012, -2.8749, 1.0471, 0, 0);
		testMethod(2295, 3.2747, 0.1874, -2.7758, 1.0471, 0, 0);
		testMethod(2300, 3.2756, 0.174, -2.6767, 1.0471, 0, 0);
		testMethod(2305, 3.2765, 0.1611, -2.5775, 1.0471, 0, 0);
		testMethod(2310, 3.2773, 0.1487, -2.4784, 1.0471, 0, 0);
		testMethod(2315, 3.278, 0.1368, -2.3792, 1.0471, 0, 0);
		testMethod(2320, 3.2786, 0.1254, -2.2801, 1.0471, 0, 0);
		testMethod(2325, 3.2792, 0.1145, -2.181, 1.0471, 0, 0);
		testMethod(2330, 3.2798, 0.1041, -2.0818, 1.0471, 0, 0);
		testMethod(2335, 3.2803, 0.0942, -1.9827, 1.0471, 0, 0);
		testMethod(2340, 3.2807, 0.0848, -1.8836, 1.0471, 0, 0);
		testMethod(2345, 3.2811, 0.0758, -1.7844, 1.0471, 0, 0);
		testMethod(2350, 3.2815, 0.0674, -1.6853, 1.0471, 0, 0);
		testMethod(2355, 3.2818, 0.0595, -1.5862, 1.0471, 0, 0);
		testMethod(2360, 3.2821, 0.052, -1.487, 1.0471, 0, 0);
		testMethod(2365, 3.2823, 0.0451, -1.3879, 1.0471, 0, 0);
		testMethod(2370, 3.2825, 0.0387, -1.2888, 1.0471, 0, 0);
		testMethod(2375, 3.2827, 0.0327, -1.1896, 1.0471, 0, 0);
		testMethod(2380, 3.2829, 0.0273, -1.0905, 1.0471, 0, 0);
		testMethod(2385, 3.283, 0.0223, -0.9914, 1.0471, 0, 0);
		testMethod(2390, 3.2831, 0.0178, -0.8922, 1.0471, 0, 0);
		testMethod(2395, 3.2832, 0.0139, -0.7931, 1.0471, 0, 0);
		testMethod(2400, 3.2832, 0.0104, -0.6939, 1.0471, 0, 0);
		testMethod(2405, 3.2833, 0.0074, -0.5948, 1.0471, 0, 0);
		testMethod(2410, 3.2833, 0.005, -0.4957, 1.0471, 0, 0);
		testMethod(2415, 3.2833, 0.003, -0.3965, 1.0471, 0, 0);
		testMethod(2420, 3.2833, 0.0015, -0.2974, 1.0471, 0, 0);
		testMethod(2425, 3.2833, 0.0005, -0.1983, 1.0471, 0, 0);
		testMethod(2430, 3.2833, 0, -0.0991, 1.0471, 0, 0);
		testMethod(2435, 3.2833, 0, 0, 1.0471, 0, 0);
		testMethod(2435, 3.2833, 0, 0, 1.0471, 0, 0);
	}
	public void testMethod(int t, double pos, double vel, double acc, double hed, double omg, double alf) {
		time.add((long) t);
		translation.add(new MotionState1D(pos, vel, acc));
		rotation.add(new MotionState1D(hed, omg, alf));
	}

}