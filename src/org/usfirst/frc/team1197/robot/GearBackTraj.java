package org.usfirst.frc.team1197.robot;

public class GearBackTraj extends TorTrajectory {

	public GearBackTraj() {
		super(-0.35, 0);
		time.clear();
		translation.clear();
		rotation.clear();
		testMethod(0, 0, 0, 0, 0, 0, 0);
		testMethod(5, -0, -0.0005, -0.0992, 0, 0, 0);
		testMethod(10, -0, -0.0015, -0.1984, 0, 0, 0);
		testMethod(15, -0, -0.003, -0.2976, 0, 0, 0);
		testMethod(20, -0, -0.005, -0.3968, 0, 0, 0);
		testMethod(25, -0.0001, -0.0074, -0.496, 0, 0, 0);
		testMethod(30, -0.0001, -0.0104, -0.5952, 0, 0, 0);
		testMethod(35, -0.0002, -0.0139, -0.6944, 0, 0, 0);
		testMethod(40, -0.0003, -0.0179, -0.7937, 0, 0, 0);
		testMethod(45, -0.0004, -0.0223, -0.8929, 0, 0, 0);
		testMethod(50, -0.0005, -0.0273, -0.9921, 0, 0, 0);
		testMethod(55, -0.0006, -0.0327, -1.0913, 0, 0, 0);
		testMethod(60, -0.0008, -0.0387, -1.1905, 0, 0, 0);
		testMethod(65, -0.001, -0.0451, -1.2897, 0, 0, 0);
		testMethod(70, -0.0013, -0.0521, -1.3889, 0, 0, 0);
		testMethod(75, -0.0015, -0.0595, -1.4881, 0, 0, 0);
		testMethod(80, -0.0019, -0.0675, -1.5873, 0, 0, 0);
		testMethod(85, -0.0022, -0.0759, -1.6865, 0, 0, 0);
		testMethod(90, -0.0026, -0.0848, -1.7857, 0, 0, 0);
		testMethod(95, -0.0031, -0.0942, -1.8849, 0, 0, 0);
		testMethod(100, -0.0036, -0.1042, -1.9841, 0, 0, 0);
		testMethod(105, -0.0041, -0.1146, -2.0833, 0, 0, 0);
		testMethod(110, -0.0047, -0.1255, -2.1825, 0, 0, 0);
		testMethod(115, -0.0054, -0.1369, -2.2817, 0, 0, 0);
		testMethod(120, -0.0061, -0.1488, -2.381, 0, 0, 0);
		testMethod(125, -0.0069, -0.1612, -2.4802, 0, 0, 0);
		testMethod(130, -0.0077, -0.1741, -2.5794, 0, 0, 0);
		testMethod(135, -0.0086, -0.1875, -2.6786, 0, 0, 0);
		testMethod(140, -0.0096, -0.2014, -2.7778, 0, 0, 0);
		testMethod(145, -0.0106, -0.2158, -2.877, 0, 0, 0);
		testMethod(150, -0.0117, -0.2307, -2.9762, 0, 0, 0);
		testMethod(155, -0.0129, -0.246, -3.0754, 0, 0, 0);
		testMethod(160, -0.0142, -0.2619, -3.1746, 0, 0, 0);
		testMethod(165, -0.0155, -0.2783, -3.2738, 0, 0, 0);
		testMethod(170, -0.017, -0.2951, -3.373, 0, 0, 0);
		testMethod(175, -0.0185, -0.3125, -3.4722, 0, 0, 0);
		testMethod(180, -0.0201, -0.3299, -3.4722, 0, 0, 0);
		testMethod(185, -0.0218, -0.3472, -3.4722, 0, 0, 0);
		testMethod(190, -0.0236, -0.3646, -3.4722, 0, 0, 0);
		testMethod(195, -0.0254, -0.3819, -3.4722, 0, 0, 0);
		testMethod(200, -0.0274, -0.3993, -3.4722, 0, 0, 0);
		testMethod(205, -0.0294, -0.4167, -3.4722, 0, 0, 0);
		testMethod(210, -0.0316, -0.434, -3.4722, 0, 0, 0);
		testMethod(215, -0.0338, -0.4514, -3.4722, 0, 0, 0);
		testMethod(220, -0.0361, -0.4687, -3.4722, 0, 0, 0);
		testMethod(225, -0.0385, -0.4861, -3.4722, 0, 0, 0);
		testMethod(230, -0.0409, -0.5035, -3.4722, 0, 0, 0);
		testMethod(235, -0.0435, -0.5208, -3.4722, 0, 0, 0);
		testMethod(240, -0.0461, -0.5382, -3.4722, 0, 0, 0);
		testMethod(245, -0.0489, -0.5551, -3.373, 0, 0, 0);
		testMethod(250, -0.0517, -0.5714, -3.2738, 0, 0, 0);
		testMethod(255, -0.0546, -0.5873, -3.1746, 0, 0, 0);
		testMethod(260, -0.0576, -0.6027, -3.0754, 0, 0, 0);
		testMethod(265, -0.0606, -0.6176, -2.9762, 0, 0, 0);
		testMethod(270, -0.0637, -0.6319, -2.877, 0, 0, 0);
		testMethod(275, -0.0669, -0.6458, -2.7778, 0, 0, 0);
		testMethod(280, -0.0702, -0.6592, -2.6786, 0, 0, 0);
		testMethod(285, -0.0735, -0.6721, -2.5794, 0, 0, 0);
		testMethod(290, -0.0769, -0.6845, -2.4802, 0, 0, 0);
		testMethod(295, -0.0804, -0.6964, -2.381, 0, 0, 0);
		testMethod(300, -0.0839, -0.7078, -2.2817, 0, 0, 0);
		testMethod(305, -0.0874, -0.7187, -2.1825, 0, 0, 0);
		testMethod(310, -0.0911, -0.7292, -2.0833, 0, 0, 0);
		testMethod(315, -0.0947, -0.7391, -1.9841, 0, 0, 0);
		testMethod(320, -0.0984, -0.7485, -1.8849, 0, 0, 0);
		testMethod(325, -0.1022, -0.7574, -1.7857, 0, 0, 0);
		testMethod(330, -0.106, -0.7659, -1.6865, 0, 0, 0);
		testMethod(335, -0.1099, -0.7738, -1.5873, 0, 0, 0);
		testMethod(340, -0.1138, -0.7812, -1.4881, 0, 0, 0);
		testMethod(345, -0.1177, -0.7882, -1.3889, 0, 0, 0);
		testMethod(350, -0.1216, -0.7946, -1.2897, 0, 0, 0);
		testMethod(355, -0.1256, -0.8006, -1.1905, 0, 0, 0);
		testMethod(360, -0.1296, -0.8061, -1.0913, 0, 0, 0);
		testMethod(365, -0.1337, -0.811, -0.9921, 0, 0, 0);
		testMethod(370, -0.1378, -0.8155, -0.8929, 0, 0, 0);
		testMethod(375, -0.1418, -0.8194, -0.7937, 0, 0, 0);
		testMethod(380, -0.1459, -0.8229, -0.6944, 0, 0, 0);
		testMethod(385, -0.1501, -0.8259, -0.5952, 0, 0, 0);
		testMethod(390, -0.1542, -0.8284, -0.496, 0, 0, 0);
		testMethod(395, -0.1584, -0.8304, -0.3968, 0, 0, 0);
		testMethod(400, -0.1625, -0.8318, -0.2976, 0, 0, 0);
		testMethod(405, -0.1667, -0.8328, -0.1984, 0, 0, 0);
		testMethod(410, -0.1708, -0.8333, -0.0992, 0, 0, 0);
		testMethod(415, -0.175, -0.8333, -0, 0, 0, 0);
		testMethod(420, -0.1792, -0.8333, -0, 0, 0, 0);
		testMethod(425, -0.1833, -0.8328, 0.0992, 0, 0, 0);
		testMethod(430, -0.1875, -0.8318, 0.1984, 0, 0, 0);
		testMethod(435, -0.1916, -0.8304, 0.2976, 0, 0, 0);
		testMethod(440, -0.1958, -0.8284, 0.3968, 0, 0, 0);
		testMethod(445, -0.1999, -0.8259, 0.496, 0, 0, 0);
		testMethod(450, -0.2041, -0.8229, 0.5952, 0, 0, 0);
		testMethod(455, -0.2082, -0.8194, 0.6944, 0, 0, 0);
		testMethod(460, -0.2122, -0.8155, 0.7937, 0, 0, 0);
		testMethod(465, -0.2163, -0.811, 0.8929, 0, 0, 0);
		testMethod(470, -0.2204, -0.8061, 0.9921, 0, 0, 0);
		testMethod(475, -0.2244, -0.8006, 1.0913, 0, 0, 0);
		testMethod(480, -0.2284, -0.7946, 1.1905, 0, 0, 0);
		testMethod(485, -0.2323, -0.7882, 1.2897, 0, 0, 0);
		testMethod(490, -0.2362, -0.7813, 1.3889, 0, 0, 0);
		testMethod(495, -0.2401, -0.7738, 1.4881, 0, 0, 0);
		testMethod(500, -0.244, -0.7659, 1.5873, 0, 0, 0);
		testMethod(505, -0.2478, -0.7574, 1.6865, 0, 0, 0);
		testMethod(510, -0.2516, -0.7485, 1.7857, 0, 0, 0);
		testMethod(515, -0.2553, -0.7391, 1.8849, 0, 0, 0);
		testMethod(520, -0.2589, -0.7292, 1.9841, 0, 0, 0);
		testMethod(525, -0.2626, -0.7188, 2.0833, 0, 0, 0);
		testMethod(530, -0.2661, -0.7078, 2.1825, 0, 0, 0);
		testMethod(535, -0.2696, -0.6964, 2.2817, 0, 0, 0);
		testMethod(540, -0.2731, -0.6845, 2.381, 0, 0, 0);
		testMethod(545, -0.2765, -0.6721, 2.4802, 0, 0, 0);
		testMethod(550, -0.2798, -0.6592, 2.5794, 0, 0, 0);
		testMethod(555, -0.2831, -0.6458, 2.6786, 0, 0, 0);
		testMethod(560, -0.2863, -0.6319, 2.7778, 0, 0, 0);
		testMethod(565, -0.2894, -0.6176, 2.877, 0, 0, 0);
		testMethod(570, -0.2924, -0.6027, 2.9762, 0, 0, 0);
		testMethod(575, -0.2954, -0.5873, 3.0754, 0, 0, 0);
		testMethod(580, -0.2983, -0.5714, 3.1746, 0, 0, 0);
		testMethod(585, -0.3011, -0.5551, 3.2738, 0, 0, 0);
		testMethod(590, -0.3039, -0.5382, 3.373, 0, 0, 0);
		testMethod(595, -0.3065, -0.5208, 3.4722, 0, 0, 0);
		testMethod(600, -0.3091, -0.5035, 3.4722, 0, 0, 0);
		testMethod(605, -0.3115, -0.4861, 3.4722, 0, 0, 0);
		testMethod(610, -0.3139, -0.4687, 3.4722, 0, 0, 0);
		testMethod(615, -0.3162, -0.4514, 3.4722, 0, 0, 0);
		testMethod(620, -0.3184, -0.434, 3.4722, 0, 0, 0);
		testMethod(625, -0.3206, -0.4167, 3.4722, 0, 0, 0);
		testMethod(630, -0.3226, -0.3993, 3.4722, 0, 0, 0);
		testMethod(635, -0.3246, -0.3819, 3.4722, 0, 0, 0);
		testMethod(640, -0.3264, -0.3646, 3.4722, 0, 0, 0);
		testMethod(645, -0.3282, -0.3472, 3.4722, 0, 0, 0);
		testMethod(650, -0.3299, -0.3299, 3.4722, 0, 0, 0);
		testMethod(655, -0.3315, -0.3125, 3.4722, 0, 0, 0);
		testMethod(660, -0.333, -0.2951, 3.4722, 0, 0, 0);
		testMethod(665, -0.3345, -0.2783, 3.373, 0, 0, 0);
		testMethod(670, -0.3358, -0.2619, 3.2738, 0, 0, 0);
		testMethod(675, -0.3371, -0.246, 3.1746, 0, 0, 0);
		testMethod(680, -0.3383, -0.2307, 3.0754, 0, 0, 0);
		testMethod(685, -0.3394, -0.2158, 2.9762, 0, 0, 0);
		testMethod(690, -0.3404, -0.2014, 2.877, 0, 0, 0);
		testMethod(695, -0.3414, -0.1875, 2.7778, 0, 0, 0);
		testMethod(700, -0.3423, -0.1741, 2.6786, 0, 0, 0);
		testMethod(705, -0.3431, -0.1612, 2.5794, 0, 0, 0);
		testMethod(710, -0.3439, -0.1488, 2.4802, 0, 0, 0);
		testMethod(715, -0.3446, -0.1369, 2.381, 0, 0, 0);
		testMethod(720, -0.3453, -0.1255, 2.2817, 0, 0, 0);
		testMethod(725, -0.3459, -0.1146, 2.1825, 0, 0, 0);
		testMethod(730, -0.3464, -0.1042, 2.0833, 0, 0, 0);
		testMethod(735, -0.3469, -0.0942, 1.9841, 0, 0, 0);
		testMethod(740, -0.3474, -0.0848, 1.8849, 0, 0, 0);
		testMethod(745, -0.3478, -0.0759, 1.7857, 0, 0, 0);
		testMethod(750, -0.3481, -0.0675, 1.6865, 0, 0, 0);
		testMethod(755, -0.3485, -0.0595, 1.5873, 0, 0, 0);
		testMethod(760, -0.3487, -0.0521, 1.4881, 0, 0, 0);
		testMethod(765, -0.349, -0.0451, 1.3889, 0, 0, 0);
		testMethod(770, -0.3492, -0.0387, 1.2897, 0, 0, 0);
		testMethod(775, -0.3494, -0.0327, 1.1905, 0, 0, 0);
		testMethod(780, -0.3495, -0.0273, 1.0913, 0, 0, 0);
		testMethod(785, -0.3496, -0.0223, 0.9921, 0, 0, 0);
		testMethod(790, -0.3497, -0.0179, 0.8929, 0, 0, 0);
		testMethod(795, -0.3498, -0.0139, 0.7937, 0, 0, 0);
		testMethod(800, -0.3499, -0.0104, 0.6944, 0, 0, 0);
		testMethod(805, -0.3499, -0.0074, 0.5952, 0, 0, 0);
		testMethod(810, -0.35, -0.005, 0.496, 0, 0, 0);
		testMethod(815, -0.35, -0.003, 0.3968, 0, 0, 0);
		testMethod(820, -0.35, -0.0015, 0.2976, 0, 0, 0);
		testMethod(825, -0.35, -0.0005, 0.1984, 0, 0, 0);
		testMethod(830, -0.35, -0, 0.0992, 0, 0, 0);
		testMethod(835, -0.35, -0, -0, 0, 0, 0);
		testMethod(835, -0.35, -0, -0, 0, 0, 0);
	}
	public void testMethod(int t, double pos, double vel, double acc, double hed, double omg, double alf) {
		time.add((long) t);
		translation.add(new MotionState1D(pos, vel, acc));
		rotation.add(new MotionState1D(hed, omg, alf));
	}

}