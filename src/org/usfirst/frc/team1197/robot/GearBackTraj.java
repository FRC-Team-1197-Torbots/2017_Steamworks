package org.usfirst.frc.team1197.robot;

public class GearBackTraj extends TorTrajectory {

	public GearBackTraj() {
		super(-1, 0);
		time.clear();
		translation.clear();
		rotation.clear();
		testMethod(0, 0, 0, 0, 0, 0, 0);
		testMethod(5, -0, -0.0005, -0.1, 0, 0, 0);
		testMethod(10, -0, -0.0015, -0.2, 0, 0, 0);
		testMethod(15, -0, -0.003, -0.3, 0, 0, 0);
		testMethod(20, -0, -0.005, -0.4, 0, 0, 0);
		testMethod(25, -0.0001, -0.0075, -0.4999, 0, 0, 0);
		testMethod(30, -0.0001, -0.0105, -0.5999, 0, 0, 0);
		testMethod(35, -0.0002, -0.014, -0.6999, 0, 0, 0);
		testMethod(40, -0.0003, -0.018, -0.7999, 0, 0, 0);
		testMethod(45, -0.0004, -0.0225, -0.8999, 0, 0, 0);
		testMethod(50, -0.0005, -0.0275, -0.9999, 0, 0, 0);
		testMethod(55, -0.0006, -0.033, -1.0999, 0, 0, 0);
		testMethod(60, -0.0008, -0.039, -1.1999, 0, 0, 0);
		testMethod(65, -0.001, -0.0455, -1.2998, 0, 0, 0);
		testMethod(70, -0.0013, -0.0525, -1.3998, 0, 0, 0);
		testMethod(75, -0.0015, -0.06, -1.4998, 0, 0, 0);
		testMethod(80, -0.0019, -0.068, -1.5998, 0, 0, 0);
		testMethod(85, -0.0022, -0.0765, -1.6998, 0, 0, 0);
		testMethod(90, -0.0026, -0.0855, -1.7998, 0, 0, 0);
		testMethod(95, -0.0031, -0.095, -1.8998, 0, 0, 0);
		testMethod(100, -0.0036, -0.105, -1.9998, 0, 0, 0);
		testMethod(105, -0.0041, -0.1155, -2.0997, 0, 0, 0);
		testMethod(110, -0.0047, -0.1265, -2.1997, 0, 0, 0);
		testMethod(115, -0.0054, -0.138, -2.2997, 0, 0, 0);
		testMethod(120, -0.0061, -0.15, -2.3997, 0, 0, 0);
		testMethod(125, -0.0069, -0.1625, -2.4997, 0, 0, 0);
		testMethod(130, -0.0078, -0.1755, -2.5997, 0, 0, 0);
		testMethod(135, -0.0087, -0.189, -2.6997, 0, 0, 0);
		testMethod(140, -0.0096, -0.203, -2.7997, 0, 0, 0);
		testMethod(145, -0.0107, -0.2175, -2.8996, 0, 0, 0);
		testMethod(150, -0.0118, -0.2325, -2.9996, 0, 0, 0);
		testMethod(155, -0.013, -0.248, -3.0996, 0, 0, 0);
		testMethod(160, -0.0143, -0.264, -3.1996, 0, 0, 0);
		testMethod(165, -0.0157, -0.2805, -3.2996, 0, 0, 0);
		testMethod(170, -0.0171, -0.2975, -3.3996, 0, 0, 0);
		testMethod(175, -0.0186, -0.315, -3.4996, 0, 0, 0);
		testMethod(180, -0.0203, -0.3325, -3.4996, 0, 0, 0);
		testMethod(185, -0.022, -0.35, -3.4996, 0, 0, 0);
		testMethod(190, -0.0238, -0.3675, -3.4996, 0, 0, 0);
		testMethod(195, -0.0256, -0.385, -3.4996, 0, 0, 0);
		testMethod(200, -0.0276, -0.4024, -3.4996, 0, 0, 0);
		testMethod(205, -0.0297, -0.4199, -3.4996, 0, 0, 0);
		testMethod(210, -0.0318, -0.4374, -3.4996, 0, 0, 0);
		testMethod(215, -0.034, -0.4549, -3.4996, 0, 0, 0);
		testMethod(220, -0.0364, -0.4724, -3.4996, 0, 0, 0);
		testMethod(225, -0.0388, -0.4899, -3.4996, 0, 0, 0);
		testMethod(230, -0.0413, -0.5074, -3.4996, 0, 0, 0);
		testMethod(235, -0.0438, -0.5249, -3.4996, 0, 0, 0);
		testMethod(240, -0.0465, -0.5424, -3.4996, 0, 0, 0);
		testMethod(245, -0.0493, -0.5599, -3.4996, 0, 0, 0);
		testMethod(250, -0.0521, -0.5774, -3.4996, 0, 0, 0);
		testMethod(255, -0.055, -0.5949, -3.4996, 0, 0, 0);
		testMethod(260, -0.058, -0.6124, -3.4996, 0, 0, 0);
		testMethod(265, -0.0612, -0.6299, -3.4996, 0, 0, 0);
		testMethod(270, -0.0643, -0.6474, -3.4996, 0, 0, 0);
		testMethod(275, -0.0676, -0.6649, -3.4996, 0, 0, 0);
		testMethod(280, -0.071, -0.6824, -3.4996, 0, 0, 0);
		testMethod(285, -0.0745, -0.6999, -3.4996, 0, 0, 0);
		testMethod(290, -0.078, -0.7174, -3.4996, 0, 0, 0);
		testMethod(295, -0.0816, -0.7349, -3.4996, 0, 0, 0);
		testMethod(300, -0.0853, -0.7524, -3.4996, 0, 0, 0);
		testMethod(305, -0.0892, -0.7699, -3.4996, 0, 0, 0);
		testMethod(310, -0.093, -0.7874, -3.4996, 0, 0, 0);
		testMethod(315, -0.097, -0.8049, -3.4996, 0, 0, 0);
		testMethod(320, -0.1011, -0.8224, -3.4996, 0, 0, 0);
		testMethod(325, -0.1052, -0.8399, -3.4996, 0, 0, 0);
		testMethod(330, -0.1095, -0.8574, -3.4996, 0, 0, 0);
		testMethod(335, -0.1138, -0.8749, -3.4996, 0, 0, 0);
		testMethod(340, -0.1182, -0.8924, -3.4996, 0, 0, 0);
		testMethod(345, -0.1227, -0.9099, -3.4996, 0, 0, 0);
		testMethod(350, -0.1273, -0.9274, -3.4996, 0, 0, 0);
		testMethod(355, -0.132, -0.9449, -3.4996, 0, 0, 0);
		testMethod(360, -0.1368, -0.9624, -3.4996, 0, 0, 0);
		testMethod(365, -0.1416, -0.9799, -3.4996, 0, 0, 0);
		testMethod(370, -0.1466, -0.9974, -3.4996, 0, 0, 0);
		testMethod(375, -0.1516, -1.0149, -3.4996, 0, 0, 0);
		testMethod(380, -0.1567, -1.0324, -3.4996, 0, 0, 0);
		testMethod(385, -0.1619, -1.0499, -3.4996, 0, 0, 0);
		testMethod(390, -0.1672, -1.0674, -3.4996, 0, 0, 0);
		testMethod(395, -0.1726, -1.0849, -3.4996, 0, 0, 0);
		testMethod(400, -0.1781, -1.1024, -3.4996, 0, 0, 0);
		testMethod(405, -0.1836, -1.1199, -3.4996, 0, 0, 0);
		testMethod(410, -0.1893, -1.1374, -3.4996, 0, 0, 0);
		testMethod(415, -0.195, -1.1549, -3.4996, 0, 0, 0);
		testMethod(420, -0.2008, -1.1724, -3.4996, 0, 0, 0);
		testMethod(425, -0.2067, -1.1899, -3.4996, 0, 0, 0);
		testMethod(430, -0.2127, -1.2073, -3.4996, 0, 0, 0);
		testMethod(435, -0.2188, -1.2248, -3.4996, 0, 0, 0);
		testMethod(440, -0.225, -1.2423, -3.4996, 0, 0, 0);
		testMethod(445, -0.2312, -1.2598, -3.4996, 0, 0, 0);
		testMethod(450, -0.2376, -1.2773, -3.4996, 0, 0, 0);
		testMethod(455, -0.244, -1.2943, -3.3996, 0, 0, 0);
		testMethod(460, -0.2505, -1.3108, -3.2996, 0, 0, 0);
		testMethod(465, -0.2571, -1.3268, -3.1996, 0, 0, 0);
		testMethod(470, -0.2638, -1.3423, -3.0996, 0, 0, 0);
		testMethod(475, -0.2705, -1.3573, -2.9996, 0, 0, 0);
		testMethod(480, -0.2774, -1.3718, -2.8996, 0, 0, 0);
		testMethod(485, -0.2843, -1.3858, -2.7997, 0, 0, 0);
		testMethod(490, -0.2912, -1.3993, -2.6997, 0, 0, 0);
		testMethod(495, -0.2982, -1.4123, -2.5997, 0, 0, 0);
		testMethod(500, -0.3053, -1.4248, -2.4997, 0, 0, 0);
		testMethod(505, -0.3125, -1.4368, -2.3997, 0, 0, 0);
		testMethod(510, -0.3197, -1.4483, -2.2997, 0, 0, 0);
		testMethod(515, -0.327, -1.4593, -2.1997, 0, 0, 0);
		testMethod(520, -0.3343, -1.4698, -2.0997, 0, 0, 0);
		testMethod(525, -0.3417, -1.4798, -1.9998, 0, 0, 0);
		testMethod(530, -0.3491, -1.4893, -1.8998, 0, 0, 0);
		testMethod(535, -0.3566, -1.4983, -1.7998, 0, 0, 0);
		testMethod(540, -0.3641, -1.5068, -1.6998, 0, 0, 0);
		testMethod(545, -0.3716, -1.5148, -1.5998, 0, 0, 0);
		testMethod(550, -0.3792, -1.5223, -1.4998, 0, 0, 0);
		testMethod(555, -0.3869, -1.5293, -1.3998, 0, 0, 0);
		testMethod(560, -0.3945, -1.5358, -1.2998, 0, 0, 0);
		testMethod(565, -0.4022, -1.5418, -1.1999, 0, 0, 0);
		testMethod(570, -0.4099, -1.5473, -1.0999, 0, 0, 0);
		testMethod(575, -0.4177, -1.5523, -0.9999, 0, 0, 0);
		testMethod(580, -0.4255, -1.5568, -0.8999, 0, 0, 0);
		testMethod(585, -0.4332, -1.5608, -0.7999, 0, 0, 0);
		testMethod(590, -0.4411, -1.5643, -0.6999, 0, 0, 0);
		testMethod(595, -0.4489, -1.5673, -0.5999, 0, 0, 0);
		testMethod(600, -0.4567, -1.5698, -0.4999, 0, 0, 0);
		testMethod(605, -0.4646, -1.5718, -0.4, 0, 0, 0);
		testMethod(610, -0.4724, -1.5733, -0.3, 0, 0, 0);
		testMethod(615, -0.4803, -1.5743, -0.2, 0, 0, 0);
		testMethod(620, -0.4882, -1.5748, -0.1, 0, 0, 0);
		testMethod(625, -0.4961, -1.5748, -0, 0, 0, 0);
		testMethod(630, -0.5039, -1.5748, -0, 0, 0, 0);
		testMethod(635, -0.5118, -1.5748, -0, 0, 0, 0);
		testMethod(640, -0.5197, -1.5743, 0.1, 0, 0, 0);
		testMethod(645, -0.5276, -1.5733, 0.2, 0, 0, 0);
		testMethod(650, -0.5354, -1.5718, 0.3, 0, 0, 0);
		testMethod(655, -0.5433, -1.5698, 0.4, 0, 0, 0);
		testMethod(660, -0.5511, -1.5673, 0.4999, 0, 0, 0);
		testMethod(665, -0.5589, -1.5643, 0.5999, 0, 0, 0);
		testMethod(670, -0.5668, -1.5608, 0.6999, 0, 0, 0);
		testMethod(675, -0.5745, -1.5568, 0.7999, 0, 0, 0);
		testMethod(680, -0.5823, -1.5523, 0.8999, 0, 0, 0);
		testMethod(685, -0.5901, -1.5473, 0.9999, 0, 0, 0);
		testMethod(690, -0.5978, -1.5418, 1.0999, 0, 0, 0);
		testMethod(695, -0.6055, -1.5358, 1.1999, 0, 0, 0);
		testMethod(700, -0.6131, -1.5293, 1.2998, 0, 0, 0);
		testMethod(705, -0.6208, -1.5223, 1.3998, 0, 0, 0);
		testMethod(710, -0.6284, -1.5148, 1.4998, 0, 0, 0);
		testMethod(715, -0.6359, -1.5068, 1.5998, 0, 0, 0);
		testMethod(720, -0.6434, -1.4983, 1.6998, 0, 0, 0);
		testMethod(725, -0.6509, -1.4893, 1.7998, 0, 0, 0);
		testMethod(730, -0.6583, -1.4798, 1.8998, 0, 0, 0);
		testMethod(735, -0.6657, -1.4698, 1.9998, 0, 0, 0);
		testMethod(740, -0.673, -1.4593, 2.0997, 0, 0, 0);
		testMethod(745, -0.6803, -1.4483, 2.1997, 0, 0, 0);
		testMethod(750, -0.6875, -1.4368, 2.2997, 0, 0, 0);
		testMethod(755, -0.6947, -1.4248, 2.3997, 0, 0, 0);
		testMethod(760, -0.7018, -1.4123, 2.4997, 0, 0, 0);
		testMethod(765, -0.7088, -1.3993, 2.5997, 0, 0, 0);
		testMethod(770, -0.7157, -1.3858, 2.6997, 0, 0, 0);
		testMethod(775, -0.7226, -1.3718, 2.7997, 0, 0, 0);
		testMethod(780, -0.7295, -1.3573, 2.8996, 0, 0, 0);
		testMethod(785, -0.7362, -1.3423, 2.9996, 0, 0, 0);
		testMethod(790, -0.7429, -1.3268, 3.0996, 0, 0, 0);
		testMethod(795, -0.7495, -1.3108, 3.1996, 0, 0, 0);
		testMethod(800, -0.756, -1.2943, 3.2996, 0, 0, 0);
		testMethod(805, -0.7624, -1.2773, 3.3996, 0, 0, 0);
		testMethod(810, -0.7688, -1.2598, 3.4996, 0, 0, 0);
		testMethod(815, -0.775, -1.2423, 3.4996, 0, 0, 0);
		testMethod(820, -0.7812, -1.2248, 3.4996, 0, 0, 0);
		testMethod(825, -0.7873, -1.2073, 3.4996, 0, 0, 0);
		testMethod(830, -0.7933, -1.1899, 3.4996, 0, 0, 0);
		testMethod(835, -0.7992, -1.1724, 3.4996, 0, 0, 0);
		testMethod(840, -0.805, -1.1549, 3.4996, 0, 0, 0);
		testMethod(845, -0.8107, -1.1374, 3.4996, 0, 0, 0);
		testMethod(850, -0.8164, -1.1199, 3.4996, 0, 0, 0);
		testMethod(855, -0.8219, -1.1024, 3.4996, 0, 0, 0);
		testMethod(860, -0.8274, -1.0849, 3.4996, 0, 0, 0);
		testMethod(865, -0.8328, -1.0674, 3.4996, 0, 0, 0);
		testMethod(870, -0.8381, -1.0499, 3.4996, 0, 0, 0);
		testMethod(875, -0.8433, -1.0324, 3.4996, 0, 0, 0);
		testMethod(880, -0.8484, -1.0149, 3.4996, 0, 0, 0);
		testMethod(885, -0.8534, -0.9974, 3.4996, 0, 0, 0);
		testMethod(890, -0.8584, -0.9799, 3.4996, 0, 0, 0);
		testMethod(895, -0.8632, -0.9624, 3.4996, 0, 0, 0);
		testMethod(900, -0.868, -0.9449, 3.4996, 0, 0, 0);
		testMethod(905, -0.8727, -0.9274, 3.4996, 0, 0, 0);
		testMethod(910, -0.8773, -0.9099, 3.4996, 0, 0, 0);
		testMethod(915, -0.8818, -0.8924, 3.4996, 0, 0, 0);
		testMethod(920, -0.8862, -0.8749, 3.4996, 0, 0, 0);
		testMethod(925, -0.8905, -0.8574, 3.4996, 0, 0, 0);
		testMethod(930, -0.8948, -0.8399, 3.4996, 0, 0, 0);
		testMethod(935, -0.8989, -0.8224, 3.4996, 0, 0, 0);
		testMethod(940, -0.903, -0.8049, 3.4996, 0, 0, 0);
		testMethod(945, -0.907, -0.7874, 3.4996, 0, 0, 0);
		testMethod(950, -0.9108, -0.7699, 3.4996, 0, 0, 0);
		testMethod(955, -0.9147, -0.7524, 3.4996, 0, 0, 0);
		testMethod(960, -0.9184, -0.7349, 3.4996, 0, 0, 0);
		testMethod(965, -0.922, -0.7174, 3.4996, 0, 0, 0);
		testMethod(970, -0.9255, -0.6999, 3.4996, 0, 0, 0);
		testMethod(975, -0.929, -0.6824, 3.4996, 0, 0, 0);
		testMethod(980, -0.9324, -0.6649, 3.4996, 0, 0, 0);
		testMethod(985, -0.9357, -0.6474, 3.4996, 0, 0, 0);
		testMethod(990, -0.9388, -0.6299, 3.4996, 0, 0, 0);
		testMethod(995, -0.942, -0.6124, 3.4996, 0, 0, 0);
		testMethod(1000, -0.945, -0.5949, 3.4996, 0, 0, 0);
		testMethod(1005, -0.9479, -0.5774, 3.4996, 0, 0, 0);
		testMethod(1010, -0.9507, -0.5599, 3.4996, 0, 0, 0);
		testMethod(1015, -0.9535, -0.5424, 3.4996, 0, 0, 0);
		testMethod(1020, -0.9562, -0.5249, 3.4996, 0, 0, 0);
		testMethod(1025, -0.9587, -0.5074, 3.4996, 0, 0, 0);
		testMethod(1030, -0.9612, -0.4899, 3.4996, 0, 0, 0);
		testMethod(1035, -0.9636, -0.4724, 3.4996, 0, 0, 0);
		testMethod(1040, -0.966, -0.4549, 3.4996, 0, 0, 0);
		testMethod(1045, -0.9682, -0.4374, 3.4996, 0, 0, 0);
		testMethod(1050, -0.9703, -0.4199, 3.4996, 0, 0, 0);
		testMethod(1055, -0.9724, -0.4024, 3.4996, 0, 0, 0);
		testMethod(1060, -0.9744, -0.385, 3.4996, 0, 0, 0);
		testMethod(1065, -0.9762, -0.3675, 3.4996, 0, 0, 0);
		testMethod(1070, -0.978, -0.35, 3.4996, 0, 0, 0);
		testMethod(1075, -0.9797, -0.3325, 3.4996, 0, 0, 0);
		testMethod(1080, -0.9814, -0.315, 3.4996, 0, 0, 0);
		testMethod(1085, -0.9829, -0.2975, 3.4996, 0, 0, 0);
		testMethod(1090, -0.9843, -0.2805, 3.3996, 0, 0, 0);
		testMethod(1095, -0.9857, -0.264, 3.2996, 0, 0, 0);
		testMethod(1100, -0.987, -0.248, 3.1996, 0, 0, 0);
		testMethod(1105, -0.9882, -0.2325, 3.0996, 0, 0, 0);
		testMethod(1110, -0.9893, -0.2175, 2.9996, 0, 0, 0);
		testMethod(1115, -0.9904, -0.203, 2.8996, 0, 0, 0);
		testMethod(1120, -0.9913, -0.189, 2.7997, 0, 0, 0);
		testMethod(1125, -0.9922, -0.1755, 2.6997, 0, 0, 0);
		testMethod(1130, -0.9931, -0.1625, 2.5997, 0, 0, 0);
		testMethod(1135, -0.9939, -0.15, 2.4997, 0, 0, 0);
		testMethod(1140, -0.9946, -0.138, 2.3997, 0, 0, 0);
		testMethod(1145, -0.9953, -0.1265, 2.2997, 0, 0, 0);
		testMethod(1150, -0.9959, -0.1155, 2.1997, 0, 0, 0);
		testMethod(1155, -0.9964, -0.105, 2.0997, 0, 0, 0);
		testMethod(1160, -0.9969, -0.095, 1.9998, 0, 0, 0);
		testMethod(1165, -0.9974, -0.0855, 1.8998, 0, 0, 0);
		testMethod(1170, -0.9978, -0.0765, 1.7998, 0, 0, 0);
		testMethod(1175, -0.9981, -0.068, 1.6998, 0, 0, 0);
		testMethod(1180, -0.9985, -0.06, 1.5998, 0, 0, 0);
		testMethod(1185, -0.9987, -0.0525, 1.4998, 0, 0, 0);
		testMethod(1190, -0.999, -0.0455, 1.3998, 0, 0, 0);
		testMethod(1195, -0.9992, -0.039, 1.2998, 0, 0, 0);
		testMethod(1200, -0.9994, -0.033, 1.1999, 0, 0, 0);
		testMethod(1205, -0.9995, -0.0275, 1.0999, 0, 0, 0);
		testMethod(1210, -0.9996, -0.0225, 0.9999, 0, 0, 0);
		testMethod(1215, -0.9997, -0.018, 0.8999, 0, 0, 0);
		testMethod(1220, -0.9998, -0.014, 0.7999, 0, 0, 0);
		testMethod(1225, -0.9999, -0.0105, 0.6999, 0, 0, 0);
		testMethod(1230, -0.9999, -0.0075, 0.5999, 0, 0, 0);
		testMethod(1235, -1, -0.005, 0.4999, 0, 0, 0);
		testMethod(1240, -1, -0.003, 0.4, 0, 0, 0);
		testMethod(1245, -1, -0.0015, 0.3, 0, 0, 0);
		testMethod(1250, -1, -0.0005, 0.2, 0, 0, 0);
		testMethod(1255, -1, -0, 0.1, 0, 0, 0);
		testMethod(1260, -1, -0, -0, 0, 0, 0);
		testMethod(1260, -1, -0, -0, 0, 0, 0);
	}
	public void testMethod(int t, double pos, double vel, double acc, double hed, double omg, double alf) {
		time.add((long) t);
		translation.add(new MotionState1D(pos, vel, acc));
		rotation.add(new MotionState1D(hed, omg, alf));
	}

}