package org.usfirst.frc.team1197.robot;

public class LoadingPos1 extends TorTrajectory {

	public LoadingPos1() {
		super(-4.0742, -1.0471);
		time.clear();
		translation.clear();
		rotation.clear();
		testMethod(0, 0, 0, 0, 0, 0, 0);
		testMethod(5, -0, -0.0003, -0.0621, 0, 0, 0);
		testMethod(10, -0, -0.0009, -0.1243, 0, 0, 0);
		testMethod(15, -0, -0.0019, -0.1864, 0, 0, 0);
		testMethod(20, -0, -0.0031, -0.2486, 0, 0, 0);
		testMethod(25, -0, -0.0047, -0.3107, 0, 0, 0);
		testMethod(30, -0.0001, -0.0065, -0.3728, 0, 0, 0);
		testMethod(35, -0.0001, -0.0087, -0.435, 0, 0, 0);
		testMethod(40, -0.0002, -0.0112, -0.4971, 0, 0, 0);
		testMethod(45, -0.0002, -0.014, -0.5593, 0, 0, 0);
		testMethod(50, -0.0003, -0.0171, -0.6214, 0, 0, 0);
		testMethod(55, -0.0004, -0.0205, -0.6835, 0, 0, 0);
		testMethod(60, -0.0005, -0.0242, -0.7457, 0, 0, 0);
		testMethod(65, -0.0006, -0.0283, -0.8078, 0, 0, 0);
		testMethod(70, -0.0008, -0.0326, -0.87, 0, 0, 0);
		testMethod(75, -0.001, -0.0373, -0.9321, 0, 0, 0);
		testMethod(80, -0.0012, -0.0423, -0.9942, 0, 0, 0);
		testMethod(85, -0.0014, -0.0475, -1.0564, 0, 0, 0);
		testMethod(90, -0.0016, -0.0531, -1.1185, 0, 0, 0);
		testMethod(95, -0.0019, -0.059, -1.1807, 0, 0, 0);
		testMethod(100, -0.0022, -0.0652, -1.2428, 0, 0, 0);
		testMethod(105, -0.0026, -0.0718, -1.3049, 0, 0, 0);
		testMethod(110, -0.0029, -0.0786, -1.3671, 0, 0, 0);
		testMethod(115, -0.0034, -0.0858, -1.4292, 0, 0, 0);
		testMethod(120, -0.0038, -0.0932, -1.4914, 0, 0, 0);
		testMethod(125, -0.0043, -0.101, -1.5535, 0, 0, 0);
		testMethod(130, -0.0048, -0.1091, -1.6156, 0, 0, 0);
		testMethod(135, -0.0054, -0.1174, -1.6778, 0, 0, 0);
		testMethod(140, -0.006, -0.1261, -1.7399, 0, 0, 0);
		testMethod(145, -0.0066, -0.1352, -1.8021, 0, 0, 0);
		testMethod(150, -0.0073, -0.1445, -1.8642, 0, 0, 0);
		testMethod(155, -0.0081, -0.1541, -1.9263, 0, 0, 0);
		testMethod(160, -0.0089, -0.164, -1.9885, 0, 0, 0);
		testMethod(165, -0.0097, -0.1743, -2.0506, 0, 0, 0);
		testMethod(170, -0.0106, -0.1849, -2.1128, 0, 0, 0);
		testMethod(175, -0.0116, -0.1957, -2.1749, 0, 0, 0);
		testMethod(180, -0.0126, -0.2069, -2.237, 0, 0, 0);
		testMethod(185, -0.0137, -0.2184, -2.2992, 0, 0, 0);
		testMethod(190, -0.0148, -0.2302, -2.3613, 0, 0, 0);
		testMethod(195, -0.016, -0.2423, -2.4235, 0, 0, 0);
		testMethod(200, -0.0172, -0.2548, -2.4856, 0, 0, 0);
		testMethod(205, -0.0185, -0.2672, -2.4856, 0, 0, 0);
		testMethod(210, -0.0199, -0.2796, -2.4856, 0, 0, 0);
		testMethod(215, -0.0213, -0.2921, -2.4856, 0, 0, 0);
		testMethod(220, -0.0228, -0.3045, -2.4856, 0, 0, 0);
		testMethod(225, -0.0243, -0.3169, -2.4856, 0, 0, 0);
		testMethod(230, -0.026, -0.3293, -2.4856, 0, 0, 0);
		testMethod(235, -0.0276, -0.3418, -2.4856, 0, 0, 0);
		testMethod(240, -0.0294, -0.3542, -2.4856, 0, 0, 0);
		testMethod(245, -0.0312, -0.3666, -2.4856, 0, 0, 0);
		testMethod(250, -0.033, -0.3791, -2.4856, 0, 0, 0);
		testMethod(255, -0.035, -0.3915, -2.4856, 0, 0, 0);
		testMethod(260, -0.037, -0.4039, -2.4856, 0, 0, 0);
		testMethod(265, -0.039, -0.4163, -2.4856, 0, 0, 0);
		testMethod(270, -0.0411, -0.4288, -2.4856, 0, 0, 0);
		testMethod(275, -0.0433, -0.4412, -2.4856, 0, 0, 0);
		testMethod(280, -0.0455, -0.4536, -2.4856, 0, 0, 0);
		testMethod(285, -0.0478, -0.4661, -2.4856, 0, 0, 0);
		testMethod(290, -0.0502, -0.4785, -2.4856, 0, 0, 0);
		testMethod(295, -0.0526, -0.4909, -2.4856, 0, 0, 0);
		testMethod(300, -0.0551, -0.5033, -2.4856, 0, 0, 0);
		testMethod(305, -0.0577, -0.5158, -2.4856, 0, 0, 0);
		testMethod(310, -0.0603, -0.5282, -2.4856, 0, 0, 0);
		testMethod(315, -0.0629, -0.5406, -2.4856, 0, 0, 0);
		testMethod(320, -0.0657, -0.553, -2.4856, 0, 0, 0);
		testMethod(325, -0.0685, -0.5655, -2.4856, 0, 0, 0);
		testMethod(330, -0.0713, -0.5779, -2.4856, 0, 0, 0);
		testMethod(335, -0.0742, -0.5903, -2.4856, 0, 0, 0);
		testMethod(340, -0.0772, -0.6028, -2.4856, 0, 0, 0);
		testMethod(345, -0.0803, -0.6152, -2.4856, 0, 0, 0);
		testMethod(350, -0.0834, -0.6276, -2.4856, 0, 0, 0);
		testMethod(355, -0.0865, -0.64, -2.4856, 0, 0, 0);
		testMethod(360, -0.0898, -0.6525, -2.4856, 0, 0, 0);
		testMethod(365, -0.0931, -0.6649, -2.4856, 0, 0, 0);
		testMethod(370, -0.0964, -0.6773, -2.4856, 0, 0, 0);
		testMethod(375, -0.0998, -0.6898, -2.4856, 0, 0, 0);
		testMethod(380, -0.1033, -0.7022, -2.4856, 0, 0, 0);
		testMethod(385, -0.1069, -0.7146, -2.4856, 0, 0, 0);
		testMethod(390, -0.1105, -0.727, -2.4856, 0, 0, 0);
		testMethod(395, -0.1141, -0.7395, -2.4856, 0, 0, 0);
		testMethod(400, -0.1179, -0.7519, -2.4856, 0, 0, 0);
		testMethod(405, -0.1217, -0.7643, -2.4856, 0, 0, 0);
		testMethod(410, -0.1255, -0.7768, -2.4856, 0, 0, 0);
		testMethod(415, -0.1294, -0.7892, -2.4856, 0, 0, 0);
		testMethod(420, -0.1334, -0.8016, -2.4856, 0, 0, 0);
		testMethod(425, -0.1374, -0.814, -2.4856, 0, 0, 0);
		testMethod(430, -0.1415, -0.8265, -2.4856, 0, 0, 0);
		testMethod(435, -0.1457, -0.8389, -2.4856, 0, 0, 0);
		testMethod(440, -0.1499, -0.8513, -2.4856, 0, 0, 0);
		testMethod(445, -0.1542, -0.8637, -2.4856, 0, 0, 0);
		testMethod(450, -0.1586, -0.8762, -2.4856, 0, 0, 0);
		testMethod(455, -0.163, -0.8886, -2.4856, 0, 0, 0);
		testMethod(460, -0.1675, -0.901, -2.4856, 0, 0, 0);
		testMethod(465, -0.172, -0.9135, -2.4856, 0, 0, 0);
		testMethod(470, -0.1766, -0.9259, -2.4856, 0, 0, 0);
		testMethod(475, -0.1812, -0.9383, -2.4856, 0, 0, 0);
		testMethod(480, -0.186, -0.9507, -2.4856, 0, 0, 0);
		testMethod(485, -0.1908, -0.9632, -2.4856, 0, 0, 0);
		testMethod(490, -0.1956, -0.9756, -2.4856, 0, 0, 0);
		testMethod(495, -0.2005, -0.988, -2.4856, 0, 0, 0);
		testMethod(500, -0.2055, -1.0005, -2.4856, 0, 0, 0);
		testMethod(505, -0.2105, -1.0129, -2.4856, 0, 0, 0);
		testMethod(510, -0.2156, -1.0253, -2.4856, 0, 0, 0);
		testMethod(515, -0.2208, -1.0377, -2.4856, 0, 0, 0);
		testMethod(520, -0.226, -1.0502, -2.4856, 0, 0, 0);
		testMethod(525, -0.2313, -1.0626, -2.4856, 0, 0, 0);
		testMethod(530, -0.2366, -1.075, -2.4856, 0, 0, 0);
		testMethod(535, -0.242, -1.0875, -2.4856, 0, 0, 0);
		testMethod(540, -0.2475, -1.0999, -2.4856, 0, 0, 0);
		testMethod(545, -0.253, -1.1123, -2.4856, 0, 0, 0);
		testMethod(550, -0.2586, -1.1247, -2.4856, 0, 0, 0);
		testMethod(555, -0.2643, -1.1372, -2.4856, 0, 0, 0);
		testMethod(560, -0.27, -1.1496, -2.4856, 0, 0, 0);
		testMethod(565, -0.2758, -1.162, -2.4856, 0, 0, 0);
		testMethod(570, -0.2816, -1.1744, -2.4856, 0, 0, 0);
		testMethod(575, -0.2875, -1.1869, -2.4856, 0, 0, 0);
		testMethod(580, -0.2935, -1.1993, -2.4856, 0, 0, 0);
		testMethod(585, -0.2995, -1.2117, -2.4856, 0, 0, 0);
		testMethod(590, -0.3056, -1.2242, -2.4856, 0, 0, 0);
		testMethod(595, -0.3117, -1.2366, -2.4856, 0, 0, 0);
		testMethod(600, -0.318, -1.249, -2.4856, 0, 0, 0);
		testMethod(605, -0.3242, -1.2614, -2.4856, 0, 0, 0);
		testMethod(610, -0.3306, -1.2739, -2.4856, 0, 0, 0);
		testMethod(615, -0.337, -1.2863, -2.4856, 0, 0, 0);
		testMethod(620, -0.3434, -1.2987, -2.4856, 0, 0, 0);
		testMethod(625, -0.35, -1.3112, -2.4856, 0, 0, 0);
		testMethod(630, -0.3565, -1.3236, -2.4856, 0, 0, 0);
		testMethod(635, -0.3632, -1.336, -2.4856, 0, 0, 0);
		testMethod(640, -0.3699, -1.3484, -2.4856, 0, 0, 0);
		testMethod(645, -0.3767, -1.3609, -2.4856, 0, 0, 0);
		testMethod(650, -0.3835, -1.3733, -2.4856, 0, 0, 0);
		testMethod(655, -0.3904, -1.3857, -2.4856, 0, 0, 0);
		testMethod(660, -0.3974, -1.3982, -2.4856, 0, 0, 0);
		testMethod(665, -0.4044, -1.4106, -2.4856, 0, 0, 0);
		testMethod(670, -0.4115, -1.423, -2.4856, 0, 0, 0);
		testMethod(675, -0.4186, -1.4354, -2.4856, 0, 0, 0);
		testMethod(680, -0.4258, -1.4479, -2.4856, 0, 0, 0);
		testMethod(685, -0.4331, -1.4603, -2.4856, 0, 0, 0);
		testMethod(690, -0.4404, -1.4727, -2.4856, 0, 0, 0);
		testMethod(695, -0.4478, -1.4851, -2.4856, 0, 0, 0);
		testMethod(700, -0.4553, -1.4976, -2.4856, 0, 0, 0);
		testMethod(705, -0.4628, -1.51, -2.4856, 0, 0, 0);
		testMethod(710, -0.4704, -1.5224, -2.4856, 0, 0, 0);
		testMethod(715, -0.478, -1.5349, -2.4856, 0, 0, 0);
		testMethod(720, -0.4857, -1.5473, -2.4856, -0, -0, -0.0043);
		testMethod(725, -0.4935, -1.5597, -2.4856, -0, -0.0004, -0.0824);
		testMethod(730, -0.5013, -1.5721, -2.4856, -0, -0.0014, -0.1911);
		testMethod(735, -0.5092, -1.5846, -2.4856, -0, -0.0029, -0.305);
		testMethod(740, -0.5172, -1.597, -2.4856, -0, -0.005, -0.4241);
		testMethod(745, -0.5252, -1.6094, -2.4856, -0.0001, -0.0078, -0.5485);
		testMethod(750, -0.5333, -1.6219, -2.4856, -0.0001, -0.0112, -0.6784);
		testMethod(755, -0.5414, -1.6343, -2.4856, -0.0002, -0.0152, -0.8138);
		testMethod(760, -0.5496, -1.6467, -2.4856, -0.0003, -0.02, -0.9548);
		testMethod(765, -0.5579, -1.6591, -2.4856, -0.0004, -0.0255, -1.1015);
		testMethod(770, -0.5662, -1.6716, -2.4856, -0.0005, -0.0318, -1.2541);
		testMethod(775, -0.5746, -1.684, -2.4856, -0.0007, -0.0389, -1.4127);
		testMethod(780, -0.583, -1.6961, -2.4235, -0.0009, -0.0467, -1.5754);
		testMethod(785, -0.5916, -1.7079, -2.3613, -0.0012, -0.0554, -1.7431);
		testMethod(790, -0.6001, -1.7194, -2.2992, -0.0015, -0.065, -1.9155);
		testMethod(795, -0.6087, -1.7306, -2.237, -0.0018, -0.0755, -2.0924);
		testMethod(800, -0.6174, -1.7415, -2.1749, -0.0022, -0.0869, -2.2737);
		testMethod(805, -0.6262, -1.752, -2.1128, -0.0027, -0.0991, -2.4592);
		testMethod(810, -0.6349, -1.7623, -2.0506, -0.0032, -0.1124, -2.6486);
		testMethod(815, -0.6438, -1.7722, -1.9885, -0.0038, -0.1266, -2.8418);
		testMethod(820, -0.6527, -1.7819, -1.9263, -0.0045, -0.1418, -3.0385);
		testMethod(825, -0.6616, -1.7912, -1.8642, -0.0052, -0.158, -3.2385);
		testMethod(830, -0.6706, -1.8002, -1.8021, -0.0061, -0.1752, -3.4416);
		testMethod(835, -0.6796, -1.8089, -1.7399, -0.007, -0.1934, -3.6475);
		testMethod(840, -0.6887, -1.8173, -1.6778, -0.008, -0.2127, -3.856);
		testMethod(845, -0.6978, -1.8254, -1.6156, -0.0091, -0.233, -4.0668);
		testMethod(850, -0.7069, -1.8331, -1.5535, -0.0103, -0.2544, -4.2797);
		testMethod(855, -0.7161, -1.8406, -1.4914, -0.0117, -0.2769, -4.4944);
		testMethod(860, -0.7253, -1.8477, -1.4292, -0.0131, -0.3005, -4.7105);
		testMethod(865, -0.7346, -1.8546, -1.3671, -0.0147, -0.3251, -4.928);
		testMethod(870, -0.7439, -1.8611, -1.3049, -0.0164, -0.3508, -5.1463);
		testMethod(875, -0.7532, -1.8673, -1.2428, -0.0182, -0.3777, -5.3653);
		testMethod(880, -0.7625, -1.8732, -1.1807, -0.0201, -0.4056, -5.5847);
		testMethod(885, -0.7719, -1.8788, -1.1185, -0.0222, -0.4346, -5.8041);
		testMethod(890, -0.7813, -1.8841, -1.0564, -0.0245, -0.4647, -6.0233);
		testMethod(895, -0.7908, -1.8891, -0.9942, -0.0269, -0.4959, -6.2419);
		testMethod(900, -0.8002, -1.8937, -0.9321, -0.0294, -0.5282, -6.4597);
		testMethod(905, -0.8097, -1.8981, -0.87, -0.0322, -0.5616, -6.6763);
		testMethod(910, -0.8192, -1.9021, -0.8078, -0.0351, -0.5955, -6.777);
		testMethod(915, -0.8287, -1.9058, -0.7457, -0.0381, -0.6282, -6.5469);
		testMethod(920, -0.8383, -1.9093, -0.6835, -0.0413, -0.6601, -6.369);
		testMethod(925, -0.8478, -1.9124, -0.6214, -0.0447, -0.691, -6.185);
		testMethod(930, -0.8574, -1.9152, -0.5593, -0.0483, -0.721, -5.9953);
		testMethod(935, -0.867, -1.9176, -0.4971, -0.0519, -0.75, -5.8002);
		testMethod(940, -0.8766, -1.9198, -0.435, -0.0558, -0.778, -5.5999);
		testMethod(945, -0.8862, -1.9217, -0.3728, -0.0597, -0.805, -5.3949);
		testMethod(950, -0.8958, -1.9232, -0.3107, -0.0638, -0.8309, -5.1852);
		testMethod(955, -0.9054, -1.9245, -0.2486, -0.068, -0.8557, -4.9714);
		testMethod(960, -0.915, -1.9254, -0.1864, -0.0724, -0.8795, -4.7537);
		testMethod(965, -0.9246, -1.926, -0.1243, -0.0768, -0.9022, -4.5324);
		testMethod(970, -0.9343, -1.9263, -0.0621, -0.0814, -0.9237, -4.3078);
		testMethod(975, -0.9439, -1.9263, -0, -0.086, -0.9441, -4.0803);
		testMethod(980, -0.9535, -1.9263, -0, -0.0908, -0.9635, -3.8815);
		testMethod(985, -0.9632, -1.9263, -0, -0.0957, -0.9819, -3.6827);
		testMethod(990, -0.9728, -1.9263, -0, -0.1006, -0.9994, -3.4839);
		testMethod(995, -0.9824, -1.9263, -0, -0.1057, -1.0158, -3.2851);
		testMethod(1000, -0.9921, -1.9263, -0, -0.1108, -1.0312, -3.0863);
		testMethod(1005, -1.0017, -1.9263, -0, -0.116, -1.0456, -2.8876);
		testMethod(1010, -1.0113, -1.9263, -0, -0.1212, -1.0591, -2.6888);
		testMethod(1015, -1.021, -1.9263, -0, -0.1266, -1.0715, -2.49);
		testMethod(1020, -1.0306, -1.9263, -0, -0.132, -1.083, -2.2912);
		testMethod(1025, -1.0402, -1.9263, -0, -0.1374, -1.0935, -2.0924);
		testMethod(1030, -1.0499, -1.9263, -0, -0.1429, -1.1029, -1.8936);
		testMethod(1035, -1.0595, -1.9263, -0, -0.1484, -1.1114, -1.6948);
		testMethod(1040, -1.0691, -1.9263, -0, -0.154, -1.1189, -1.4961);
		testMethod(1045, -1.0788, -1.9263, -0, -0.1596, -1.1254, -1.2973);
		testMethod(1050, -1.0884, -1.9263, -0, -0.1653, -1.1309, -1.0985);
		testMethod(1055, -1.098, -1.9263, -0, -0.1709, -1.1354, -0.8997);
		testMethod(1060, -1.1076, -1.9263, -0, -0.1766, -1.1389, -0.7009);
		testMethod(1065, -1.1173, -1.9263, -0, -0.1823, -1.1414, -0.5021);
		testMethod(1070, -1.1269, -1.9263, -0, -0.188, -1.1429, -0.3034);
		testMethod(1075, -1.1365, -1.9263, -0, -0.1937, -1.1434, -0.1046);
		testMethod(1080, -1.1462, -1.9263, -0, -0.1995, -1.1434, -0.0001);
		testMethod(1085, -1.1558, -1.9263, -0, -0.2052, -1.1434, 0);
		testMethod(1090, -1.1654, -1.9263, -0, -0.2109, -1.1434, 0);
		testMethod(1095, -1.1751, -1.9263, -0, -0.2166, -1.1434, 0);
		testMethod(1100, -1.1847, -1.9263, -0, -0.2223, -1.1434, 0);
		testMethod(1105, -1.1943, -1.9263, -0, -0.228, -1.1434, 0);
		testMethod(1110, -1.204, -1.9263, -0, -0.2338, -1.1434, 0);
		testMethod(1115, -1.2136, -1.9263, -0, -0.2395, -1.1434, 0);
		testMethod(1120, -1.2232, -1.9263, -0, -0.2452, -1.1434, 0);
		testMethod(1125, -1.2329, -1.9263, -0, -0.2509, -1.1434, 0);
		testMethod(1130, -1.2425, -1.9263, -0, -0.2566, -1.1434, 0);
		testMethod(1135, -1.2521, -1.9263, -0, -0.2623, -1.1434, 0);
		testMethod(1140, -1.2618, -1.9263, -0, -0.2681, -1.1434, 0);
		testMethod(1145, -1.2714, -1.9263, -0, -0.2738, -1.1434, 0);
		testMethod(1150, -1.281, -1.9263, -0, -0.2795, -1.1434, 0);
		testMethod(1155, -1.2907, -1.9263, -0, -0.2852, -1.1434, 0);
		testMethod(1160, -1.3003, -1.9263, -0, -0.2909, -1.1434, 0);
		testMethod(1165, -1.3099, -1.9263, -0, -0.2966, -1.1434, 0);
		testMethod(1170, -1.3195, -1.9263, -0, -0.3024, -1.1434, 0);
		testMethod(1175, -1.3292, -1.9263, -0, -0.3081, -1.1434, 0);
		testMethod(1180, -1.3388, -1.9263, -0, -0.3138, -1.1434, 0);
		testMethod(1185, -1.3484, -1.9263, -0, -0.3195, -1.1434, 0);
		testMethod(1190, -1.3581, -1.9263, -0, -0.3252, -1.1434, 0);
		testMethod(1195, -1.3677, -1.9263, -0, -0.3309, -1.1434, 0);
		testMethod(1200, -1.3773, -1.9263, -0, -0.3367, -1.1434, 0);
		testMethod(1205, -1.387, -1.9263, -0, -0.3424, -1.1434, 0);
		testMethod(1210, -1.3966, -1.9263, -0, -0.3481, -1.1434, 0);
		testMethod(1215, -1.4062, -1.9263, -0, -0.3538, -1.1434, 0);
		testMethod(1220, -1.4159, -1.9263, -0, -0.3595, -1.1434, 0);
		testMethod(1225, -1.4255, -1.9263, -0, -0.3652, -1.1434, 0);
		testMethod(1230, -1.4351, -1.9263, -0, -0.371, -1.1434, 0);
		testMethod(1235, -1.4448, -1.9263, -0, -0.3767, -1.1434, 0);
		testMethod(1240, -1.4544, -1.9263, -0, -0.3824, -1.1434, 0);
		testMethod(1245, -1.464, -1.9263, -0, -0.3881, -1.1434, 0);
		testMethod(1250, -1.4737, -1.9263, -0, -0.3938, -1.1434, 0);
		testMethod(1255, -1.4833, -1.9263, -0, -0.3996, -1.1434, 0);
		testMethod(1260, -1.4929, -1.9263, -0, -0.4053, -1.1434, 0);
		testMethod(1265, -1.5025, -1.9263, -0, -0.411, -1.1434, 0);
		testMethod(1270, -1.5122, -1.9263, -0, -0.4167, -1.1434, 0);
		testMethod(1275, -1.5218, -1.9263, -0, -0.4224, -1.1434, 0);
		testMethod(1280, -1.5314, -1.9263, -0, -0.4281, -1.1434, 0);
		testMethod(1285, -1.5411, -1.9263, -0, -0.4339, -1.1434, 0);
		testMethod(1290, -1.5507, -1.9263, -0, -0.4396, -1.1434, 0);
		testMethod(1295, -1.5603, -1.9263, -0, -0.4453, -1.1434, 0);
		testMethod(1300, -1.57, -1.9263, -0, -0.451, -1.1434, 0);
		testMethod(1305, -1.5796, -1.9263, -0, -0.4567, -1.1434, 0);
		testMethod(1310, -1.5892, -1.9263, -0, -0.4624, -1.1434, 0);
		testMethod(1315, -1.5989, -1.9263, -0, -0.4682, -1.1434, 0);
		testMethod(1320, -1.6085, -1.9263, -0, -0.4739, -1.1434, 0);
		testMethod(1325, -1.6181, -1.9263, -0, -0.4796, -1.1434, 0);
		testMethod(1330, -1.6278, -1.9263, -0, -0.4853, -1.1434, 0);
		testMethod(1335, -1.6374, -1.9263, -0, -0.491, -1.1434, 0);
		testMethod(1340, -1.647, -1.9263, -0, -0.4967, -1.1434, 0);
		testMethod(1345, -1.6567, -1.9263, -0, -0.5025, -1.1434, 0);
		testMethod(1350, -1.6663, -1.9263, -0, -0.5082, -1.1434, 0);
		testMethod(1355, -1.6759, -1.9263, -0, -0.5139, -1.1434, 0);
		testMethod(1360, -1.6856, -1.9263, -0, -0.5196, -1.1434, 0);
		testMethod(1365, -1.6952, -1.9263, -0, -0.5253, -1.1434, 0);
		testMethod(1370, -1.7048, -1.9263, -0, -0.531, -1.1434, 0);
		testMethod(1375, -1.7144, -1.9263, -0, -0.5368, -1.1434, 0);
		testMethod(1380, -1.7241, -1.9263, -0, -0.5425, -1.1434, 0);
		testMethod(1385, -1.7337, -1.9263, -0, -0.5482, -1.1434, 0);
		testMethod(1390, -1.7433, -1.9263, -0, -0.5539, -1.1434, 0);
		testMethod(1395, -1.753, -1.9263, -0, -0.5596, -1.1434, 0);
		testMethod(1400, -1.7626, -1.9263, -0, -0.5653, -1.1434, 0);
		testMethod(1405, -1.7722, -1.9263, -0, -0.5711, -1.1434, 0);
		testMethod(1410, -1.7819, -1.9263, -0, -0.5768, -1.1434, 0);
		testMethod(1415, -1.7915, -1.9263, -0, -0.5825, -1.1434, 0);
		testMethod(1420, -1.8011, -1.9263, -0, -0.5882, -1.1434, 0);
		testMethod(1425, -1.8108, -1.9263, -0, -0.5939, -1.1434, 0);
		testMethod(1430, -1.8204, -1.9263, -0, -0.5996, -1.1434, 0);
		testMethod(1435, -1.83, -1.9263, -0, -0.6054, -1.1434, 0);
		testMethod(1440, -1.8397, -1.9263, -0, -0.6111, -1.1434, 0);
		testMethod(1445, -1.8493, -1.9263, -0, -0.6168, -1.1434, 0);
		testMethod(1450, -1.8589, -1.9263, -0, -0.6225, -1.1434, 0);
		testMethod(1455, -1.8686, -1.9263, -0, -0.6282, -1.1434, 0);
		testMethod(1460, -1.8782, -1.9263, -0, -0.634, -1.1434, 0);
		testMethod(1465, -1.8878, -1.9263, -0, -0.6397, -1.1434, 0);
		testMethod(1470, -1.8974, -1.9263, -0, -0.6454, -1.1434, 0);
		testMethod(1475, -1.9071, -1.9263, -0, -0.6511, -1.1434, 0);
		testMethod(1480, -1.9167, -1.9263, -0, -0.6568, -1.1434, 0);
		testMethod(1485, -1.9263, -1.9263, -0, -0.6625, -1.1434, 0);
		testMethod(1490, -1.936, -1.9263, -0, -0.6683, -1.1434, 0);
		testMethod(1495, -1.9456, -1.9263, -0, -0.674, -1.1434, 0);
		testMethod(1500, -1.9552, -1.9263, -0, -0.6797, -1.1434, 0);
		testMethod(1505, -1.9649, -1.9263, -0, -0.6854, -1.1434, 0);
		testMethod(1510, -1.9745, -1.9263, -0, -0.6911, -1.1434, 0);
		testMethod(1515, -1.9841, -1.9263, -0, -0.6968, -1.1434, 0);
		testMethod(1520, -1.9938, -1.9263, -0, -0.7026, -1.1434, 0);
		testMethod(1525, -2.0034, -1.9263, -0, -0.7083, -1.1434, 0);
		testMethod(1530, -2.013, -1.9263, -0, -0.714, -1.1434, 0);
		testMethod(1535, -2.0227, -1.9263, -0, -0.7197, -1.1434, 0);
		testMethod(1540, -2.0323, -1.9263, -0, -0.7254, -1.1434, 0);
		testMethod(1545, -2.0419, -1.9263, -0, -0.7311, -1.1434, 0);
		testMethod(1550, -2.0516, -1.9263, -0, -0.7369, -1.1434, 0);
		testMethod(1555, -2.0612, -1.9263, -0, -0.7426, -1.1434, 0);
		testMethod(1560, -2.0708, -1.9263, -0, -0.7483, -1.1434, 0);
		testMethod(1565, -2.0805, -1.9263, -0, -0.754, -1.1434, 0);
		testMethod(1570, -2.0901, -1.9263, -0, -0.7597, -1.1434, 0);
		testMethod(1575, -2.0997, -1.9263, -0, -0.7654, -1.1434, 0);
		testMethod(1580, -2.1093, -1.9263, -0, -0.7712, -1.1434, 0);
		testMethod(1585, -2.119, -1.9263, -0, -0.7769, -1.1434, 0);
		testMethod(1590, -2.1286, -1.9263, -0, -0.7826, -1.1434, 0);
		testMethod(1595, -2.1382, -1.9263, -0, -0.7883, -1.1434, 0);
		testMethod(1600, -2.1479, -1.9263, -0, -0.794, -1.1434, 0);
		testMethod(1605, -2.1575, -1.9263, -0, -0.7997, -1.1434, 0);
		testMethod(1610, -2.1671, -1.9263, -0, -0.8055, -1.1434, 0);
		testMethod(1615, -2.1768, -1.9263, -0, -0.8112, -1.1434, 0);
		testMethod(1620, -2.1864, -1.9263, -0, -0.8169, -1.1434, 0);
		testMethod(1625, -2.196, -1.9263, -0, -0.8226, -1.1434, 0);
		testMethod(1630, -2.2057, -1.9263, -0, -0.8283, -1.1434, 0);
		testMethod(1635, -2.2153, -1.9263, -0, -0.834, -1.1434, 0);
		testMethod(1640, -2.2249, -1.9263, -0, -0.8398, -1.1434, 0);
		testMethod(1645, -2.2346, -1.9263, -0, -0.8455, -1.1434, 0);
		testMethod(1650, -2.2442, -1.9263, -0, -0.8512, -1.1434, 0);
		testMethod(1655, -2.2538, -1.9263, -0, -0.8569, -1.1432, 0.0427);
		testMethod(1660, -2.2635, -1.9263, -0, -0.8626, -1.1421, 0.2297);
		testMethod(1665, -2.2731, -1.9263, -0, -0.8683, -1.1399, 0.4285);
		testMethod(1670, -2.2827, -1.9263, -0, -0.874, -1.1368, 0.6273);
		testMethod(1675, -2.2923, -1.9263, -0, -0.8797, -1.1326, 0.826);
		testMethod(1680, -2.302, -1.9263, -0, -0.8854, -1.1275, 1.0248);
		testMethod(1685, -2.3116, -1.9263, -0, -0.891, -1.1214, 1.2236);
		testMethod(1690, -2.3212, -1.9263, -0, -0.8966, -1.1143, 1.4224);
		testMethod(1695, -2.3309, -1.9263, -0, -0.9021, -1.1062, 1.6212);
		testMethod(1700, -2.3405, -1.9263, -0, -0.9076, -1.0971, 1.82);
		testMethod(1705, -2.3501, -1.9263, -0, -0.9131, -1.087, 2.0188);
		testMethod(1710, -2.3598, -1.9263, -0, -0.9185, -1.0759, 2.2175);
		testMethod(1715, -2.3694, -1.9263, -0, -0.9238, -1.0638, 2.4163);
		testMethod(1720, -2.379, -1.9263, -0, -0.9291, -1.0507, 2.6151);
		testMethod(1725, -2.3887, -1.9263, -0, -0.9343, -1.0367, 2.8139);
		testMethod(1730, -2.3983, -1.9263, -0, -0.9395, -1.0216, 3.0127);
		testMethod(1735, -2.4079, -1.9263, -0, -0.9446, -1.0056, 3.2115);
		testMethod(1740, -2.4176, -1.9263, -0, -0.9495, -0.9885, 3.4102);
		testMethod(1745, -2.4272, -1.9263, -0, -0.9544, -0.9705, 3.609);
		testMethod(1750, -2.4368, -1.9263, -0, -0.9593, -0.9514, 3.8078);
		testMethod(1755, -2.4465, -1.9263, -0, -0.964, -0.9314, 4.0066);
		testMethod(1760, -2.4561, -1.9263, -0, -0.9686, -0.9104, 4.2054);
		testMethod(1765, -2.4657, -1.9263, -0, -0.9731, -0.8883, 4.4042);
		testMethod(1770, -2.4754, -1.9263, -0, -0.9774, -0.8653, 4.603);
		testMethod(1775, -2.485, -1.9263, -0, -0.9817, -0.8413, 4.8017);
		testMethod(1780, -2.4946, -1.9263, -0, -0.9859, -0.8163, 5.0005);
		testMethod(1785, -2.5042, -1.9263, -0, -0.9899, -0.7903, 5.1993);
		testMethod(1790, -2.5139, -1.9263, -0, -0.9938, -0.7633, 5.3981);
		testMethod(1795, -2.5235, -1.9263, -0, -0.9975, -0.7353, 5.5969);
		testMethod(1800, -2.5331, -1.9263, -0, -1.0011, -0.7064, 5.7957);
		testMethod(1805, -2.5428, -1.9263, -0, -1.0046, -0.6764, 5.9944);
		testMethod(1810, -2.5524, -1.9263, -0, -1.0079, -0.6454, 6.1932);
		testMethod(1815, -2.562, -1.9263, -0, -1.011, -0.6135, 6.392);
		testMethod(1820, -2.5717, -1.9263, -0, -1.014, -0.5805, 6.5908);
		testMethod(1825, -2.5813, -1.9263, -0, -1.0168, -0.5468, 6.7397);
		testMethod(1830, -2.5909, -1.9263, -0, -1.0195, -0.5143, 6.4945);
		testMethod(1835, -2.6006, -1.9263, -0, -1.022, -0.4829, 6.2957);
		testMethod(1840, -2.6102, -1.9263, -0, -1.0243, -0.4524, 6.0969);
		testMethod(1845, -2.6198, -1.9263, -0, -1.0265, -0.4229, 5.8981);
		testMethod(1850, -2.6295, -1.9263, -0, -1.0285, -0.3944, 5.6993);
		testMethod(1855, -2.6391, -1.9263, -0, -1.0304, -0.3669, 5.5006);
		testMethod(1860, -2.6487, -1.9263, -0, -1.0322, -0.3404, 5.3018);
		testMethod(1865, -2.6584, -1.9263, -0, -1.0338, -0.3149, 5.103);
		testMethod(1870, -2.668, -1.9263, -0, -1.0354, -0.2903, 4.9042);
		testMethod(1875, -2.6776, -1.9263, -0, -1.0367, -0.2668, 4.7054);
		testMethod(1880, -2.6872, -1.9263, -0, -1.038, -0.2443, 4.5066);
		testMethod(1885, -2.6969, -1.9263, -0, -1.0392, -0.2227, 4.3078);
		testMethod(1890, -2.7065, -1.9263, -0, -1.0403, -0.2022, 4.1091);
		testMethod(1895, -2.7161, -1.9263, -0, -1.0412, -0.1826, 3.9103);
		testMethod(1900, -2.7258, -1.9263, -0, -1.0421, -0.1641, 3.7115);
		testMethod(1905, -2.7354, -1.9263, -0, -1.0429, -0.1465, 3.5127);
		testMethod(1910, -2.745, -1.9263, -0, -1.0436, -0.13, 3.3139);
		testMethod(1915, -2.7547, -1.9263, -0, -1.0442, -0.1144, 3.1151);
		testMethod(1920, -2.7643, -1.9263, -0, -1.0447, -0.0998, 2.9164);
		testMethod(1925, -2.7739, -1.9263, -0, -1.0452, -0.0862, 2.7176);
		testMethod(1930, -2.7836, -1.9263, -0, -1.0456, -0.0736, 2.5188);
		testMethod(1935, -2.7932, -1.9263, -0, -1.0459, -0.062, 2.32);
		testMethod(1940, -2.8028, -1.9263, -0, -1.0462, -0.0514, 2.1212);
		testMethod(1945, -2.8125, -1.9263, -0, -1.0464, -0.0418, 1.9224);
		testMethod(1950, -2.8221, -1.9263, -0, -1.0466, -0.0332, 1.7236);
		testMethod(1955, -2.8317, -1.9263, -0, -1.0467, -0.0256, 1.5249);
		testMethod(1960, -2.8414, -1.9263, -0, -1.0469, -0.0189, 1.3261);
		testMethod(1965, -2.851, -1.9263, -0, -1.0469, -0.0133, 1.1273);
		testMethod(1970, -2.8606, -1.9263, -0, -1.047, -0.0086, 0.9285);
		testMethod(1975, -2.8703, -1.9263, -0, -1.047, -0.005, 0.7297);
		testMethod(1980, -2.8799, -1.9263, -0, -1.047, -0.0023, 0.5309);
		testMethod(1985, -2.8895, -1.9263, -0, -1.0471, -0.0007, 0.3322);
		testMethod(1990, -2.8991, -1.9263, -0, -1.0471, -0, 0.1334);
		testMethod(1995, -2.9088, -1.9263, -0, -1.0471, 0, 0.0029);
		testMethod(2000, -2.9184, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2005, -2.928, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2010, -2.9377, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2015, -2.9473, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2020, -2.9569, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2025, -2.9666, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2030, -2.9762, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2035, -2.9858, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2040, -2.9955, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2045, -3.0051, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2050, -3.0147, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2055, -3.0244, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2060, -3.034, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2065, -3.0436, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2070, -3.0533, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2075, -3.0629, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2080, -3.0725, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2085, -3.0821, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2090, -3.0918, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2095, -3.1014, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2100, -3.111, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2105, -3.1207, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2110, -3.1303, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2115, -3.1399, -1.9263, -0, -1.0471, 0, 0);
		testMethod(2120, -3.1496, -1.926, 0.0621, -1.0471, 0, 0);
		testMethod(2125, -3.1592, -1.9254, 0.1243, -1.0471, 0, 0);
		testMethod(2130, -3.1688, -1.9245, 0.1864, -1.0471, 0, 0);
		testMethod(2135, -3.1784, -1.9232, 0.2486, -1.0471, 0, 0);
		testMethod(2140, -3.1881, -1.9217, 0.3107, -1.0471, 0, 0);
		testMethod(2145, -3.1977, -1.9198, 0.3728, -1.0471, 0, 0);
		testMethod(2150, -3.2073, -1.9176, 0.435, -1.0471, 0, 0);
		testMethod(2155, -3.2168, -1.9152, 0.4971, -1.0471, 0, 0);
		testMethod(2160, -3.2264, -1.9124, 0.5593, -1.0471, 0, 0);
		testMethod(2165, -3.236, -1.9093, 0.6214, -1.0471, 0, 0);
		testMethod(2170, -3.2455, -1.9058, 0.6835, -1.0471, 0, 0);
		testMethod(2175, -3.255, -1.9021, 0.7457, -1.0471, 0, 0);
		testMethod(2180, -3.2645, -1.8981, 0.8078, -1.0471, 0, 0);
		testMethod(2185, -3.274, -1.8937, 0.87, -1.0471, 0, 0);
		testMethod(2190, -3.2835, -1.8891, 0.9321, -1.0471, 0, 0);
		testMethod(2195, -3.2929, -1.8841, 0.9942, -1.0471, 0, 0);
		testMethod(2200, -3.3023, -1.8788, 1.0564, -1.0471, 0, 0);
		testMethod(2205, -3.3117, -1.8732, 1.1185, -1.0471, 0, 0);
		testMethod(2210, -3.321, -1.8673, 1.1807, -1.0471, 0, 0);
		testMethod(2215, -3.3303, -1.8611, 1.2428, -1.0471, 0, 0);
		testMethod(2220, -3.3396, -1.8546, 1.3049, -1.0471, 0, 0);
		testMethod(2225, -3.3489, -1.8477, 1.3671, -1.0471, 0, 0);
		testMethod(2230, -3.3581, -1.8406, 1.4292, -1.0471, 0, 0);
		testMethod(2235, -3.3673, -1.8331, 1.4914, -1.0471, 0, 0);
		testMethod(2240, -3.3764, -1.8254, 1.5535, -1.0471, 0, 0);
		testMethod(2245, -3.3855, -1.8173, 1.6156, -1.0471, 0, 0);
		testMethod(2250, -3.3946, -1.8089, 1.6778, -1.0471, 0, 0);
		testMethod(2255, -3.4036, -1.8002, 1.7399, -1.0471, 0, 0);
		testMethod(2260, -3.4126, -1.7912, 1.8021, -1.0471, 0, 0);
		testMethod(2265, -3.4215, -1.7819, 1.8642, -1.0471, 0, 0);
		testMethod(2270, -3.4304, -1.7722, 1.9263, -1.0471, 0, 0);
		testMethod(2275, -3.4393, -1.7623, 1.9885, -1.0471, 0, 0);
		testMethod(2280, -3.4481, -1.752, 2.0506, -1.0471, 0, 0);
		testMethod(2285, -3.4568, -1.7415, 2.1128, -1.0471, 0, 0);
		testMethod(2290, -3.4655, -1.7306, 2.1749, -1.0471, 0, 0);
		testMethod(2295, -3.4741, -1.7194, 2.237, -1.0471, 0, 0);
		testMethod(2300, -3.4827, -1.7079, 2.2992, -1.0471, 0, 0);
		testMethod(2305, -3.4912, -1.6961, 2.3613, -1.0471, 0, 0);
		testMethod(2310, -3.4996, -1.684, 2.4235, -1.0471, 0, 0);
		testMethod(2315, -3.508, -1.6716, 2.4856, -1.0471, 0, 0);
		testMethod(2320, -3.5163, -1.6591, 2.4856, -1.0471, 0, 0);
		testMethod(2325, -3.5246, -1.6467, 2.4856, -1.0471, 0, 0);
		testMethod(2330, -3.5328, -1.6343, 2.4856, -1.0471, 0, 0);
		testMethod(2335, -3.5409, -1.6219, 2.4856, -1.0471, 0, 0);
		testMethod(2340, -3.549, -1.6094, 2.4856, -1.0471, 0, 0);
		testMethod(2345, -3.557, -1.597, 2.4856, -1.0471, 0, 0);
		testMethod(2350, -3.565, -1.5846, 2.4856, -1.0471, 0, 0);
		testMethod(2355, -3.5729, -1.5721, 2.4856, -1.0471, 0, 0);
		testMethod(2360, -3.5807, -1.5597, 2.4856, -1.0471, 0, 0);
		testMethod(2365, -3.5885, -1.5473, 2.4856, -1.0471, 0, 0);
		testMethod(2370, -3.5962, -1.5349, 2.4856, -1.0471, 0, 0);
		testMethod(2375, -3.6038, -1.5224, 2.4856, -1.0471, 0, 0);
		testMethod(2380, -3.6114, -1.51, 2.4856, -1.0471, 0, 0);
		testMethod(2385, -3.6189, -1.4976, 2.4856, -1.0471, 0, 0);
		testMethod(2390, -3.6264, -1.4851, 2.4856, -1.0471, 0, 0);
		testMethod(2395, -3.6338, -1.4727, 2.4856, -1.0471, 0, 0);
		testMethod(2400, -3.6411, -1.4603, 2.4856, -1.0471, 0, 0);
		testMethod(2405, -3.6484, -1.4479, 2.4856, -1.0471, 0, 0);
		testMethod(2410, -3.6556, -1.4354, 2.4856, -1.0471, 0, 0);
		testMethod(2415, -3.6627, -1.423, 2.4856, -1.0471, 0, 0);
		testMethod(2420, -3.6698, -1.4106, 2.4856, -1.0471, 0, 0);
		testMethod(2425, -3.6768, -1.3982, 2.4856, -1.0471, 0, 0);
		testMethod(2430, -3.6838, -1.3857, 2.4856, -1.0471, 0, 0);
		testMethod(2435, -3.6907, -1.3733, 2.4856, -1.0471, 0, 0);
		testMethod(2440, -3.6975, -1.3609, 2.4856, -1.0471, 0, 0);
		testMethod(2445, -3.7043, -1.3484, 2.4856, -1.0471, 0, 0);
		testMethod(2450, -3.711, -1.336, 2.4856, -1.0471, 0, 0);
		testMethod(2455, -3.7177, -1.3236, 2.4856, -1.0471, 0, 0);
		testMethod(2460, -3.7243, -1.3112, 2.4856, -1.0471, 0, 0);
		testMethod(2465, -3.7308, -1.2987, 2.4856, -1.0471, 0, 0);
		testMethod(2470, -3.7372, -1.2863, 2.4856, -1.0471, 0, 0);
		testMethod(2475, -3.7436, -1.2739, 2.4856, -1.0471, 0, 0);
		testMethod(2480, -3.75, -1.2614, 2.4856, -1.0471, 0, 0);
		testMethod(2485, -3.7563, -1.249, 2.4856, -1.0471, 0, 0);
		testMethod(2490, -3.7625, -1.2366, 2.4856, -1.0471, 0, 0);
		testMethod(2495, -3.7686, -1.2242, 2.4856, -1.0471, 0, 0);
		testMethod(2500, -3.7747, -1.2117, 2.4856, -1.0471, 0, 0);
		testMethod(2505, -3.7807, -1.1993, 2.4856, -1.0471, 0, 0);
		testMethod(2510, -3.7867, -1.1869, 2.4856, -1.0471, 0, 0);
		testMethod(2515, -3.7926, -1.1744, 2.4856, -1.0471, 0, 0);
		testMethod(2520, -3.7985, -1.162, 2.4856, -1.0471, 0, 0);
		testMethod(2525, -3.8042, -1.1496, 2.4856, -1.0471, 0, 0);
		testMethod(2530, -3.81, -1.1372, 2.4856, -1.0471, 0, 0);
		testMethod(2535, -3.8156, -1.1247, 2.4856, -1.0471, 0, 0);
		testMethod(2540, -3.8212, -1.1123, 2.4856, -1.0471, 0, 0);
		testMethod(2545, -3.8267, -1.0999, 2.4856, -1.0471, 0, 0);
		testMethod(2550, -3.8322, -1.0875, 2.4856, -1.0471, 0, 0);
		testMethod(2555, -3.8376, -1.075, 2.4856, -1.0471, 0, 0);
		testMethod(2560, -3.8429, -1.0626, 2.4856, -1.0471, 0, 0);
		testMethod(2565, -3.8482, -1.0502, 2.4856, -1.0471, 0, 0);
		testMethod(2570, -3.8534, -1.0377, 2.4856, -1.0471, 0, 0);
		testMethod(2575, -3.8586, -1.0253, 2.4856, -1.0471, 0, 0);
		testMethod(2580, -3.8637, -1.0129, 2.4856, -1.0471, 0, 0);
		testMethod(2585, -3.8687, -1.0005, 2.4856, -1.0471, 0, 0);
		testMethod(2590, -3.8737, -0.988, 2.4856, -1.0471, 0, 0);
		testMethod(2595, -3.8786, -0.9756, 2.4856, -1.0471, 0, 0);
		testMethod(2600, -3.8835, -0.9632, 2.4856, -1.0471, 0, 0);
		testMethod(2605, -3.8882, -0.9507, 2.4856, -1.0471, 0, 0);
		testMethod(2610, -3.893, -0.9383, 2.4856, -1.0471, 0, 0);
		testMethod(2615, -3.8976, -0.9259, 2.4856, -1.0471, 0, 0);
		testMethod(2620, -3.9022, -0.9135, 2.4856, -1.0471, 0, 0);
		testMethod(2625, -3.9068, -0.901, 2.4856, -1.0471, 0, 0);
		testMethod(2630, -3.9112, -0.8886, 2.4856, -1.0471, 0, 0);
		testMethod(2635, -3.9157, -0.8762, 2.4856, -1.0471, 0, 0);
		testMethod(2640, -3.92, -0.8637, 2.4856, -1.0471, 0, 0);
		testMethod(2645, -3.9243, -0.8513, 2.4856, -1.0471, 0, 0);
		testMethod(2650, -3.9285, -0.8389, 2.4856, -1.0471, 0, 0);
		testMethod(2655, -3.9327, -0.8265, 2.4856, -1.0471, 0, 0);
		testMethod(2660, -3.9368, -0.814, 2.4856, -1.0471, 0, 0);
		testMethod(2665, -3.9408, -0.8016, 2.4856, -1.0471, 0, 0);
		testMethod(2670, -3.9448, -0.7892, 2.4856, -1.0471, 0, 0);
		testMethod(2675, -3.9487, -0.7768, 2.4856, -1.0471, 0, 0);
		testMethod(2680, -3.9526, -0.7643, 2.4856, -1.0471, 0, 0);
		testMethod(2685, -3.9564, -0.7519, 2.4856, -1.0471, 0, 0);
		testMethod(2690, -3.9601, -0.7395, 2.4856, -1.0471, 0, 0);
		testMethod(2695, -3.9637, -0.727, 2.4856, -1.0471, 0, 0);
		testMethod(2700, -3.9674, -0.7146, 2.4856, -1.0471, 0, 0);
		testMethod(2705, -3.9709, -0.7022, 2.4856, -1.0471, 0, 0);
		testMethod(2710, -3.9744, -0.6898, 2.4856, -1.0471, 0, 0);
		testMethod(2715, -3.9778, -0.6773, 2.4856, -1.0471, 0, 0);
		testMethod(2720, -3.9811, -0.6649, 2.4856, -1.0471, 0, 0);
		testMethod(2725, -3.9844, -0.6525, 2.4856, -1.0471, 0, 0);
		testMethod(2730, -3.9877, -0.64, 2.4856, -1.0471, 0, 0);
		testMethod(2735, -3.9908, -0.6276, 2.4856, -1.0471, 0, 0);
		testMethod(2740, -3.9939, -0.6152, 2.4856, -1.0471, 0, 0);
		testMethod(2745, -3.997, -0.6028, 2.4856, -1.0471, 0, 0);
		testMethod(2750, -4, -0.5903, 2.4856, -1.0471, 0, 0);
		testMethod(2755, -4.0029, -0.5779, 2.4856, -1.0471, 0, 0);
		testMethod(2760, -4.0058, -0.5655, 2.4856, -1.0471, 0, 0);
		testMethod(2765, -4.0085, -0.553, 2.4856, -1.0471, 0, 0);
		testMethod(2770, -4.0113, -0.5406, 2.4856, -1.0471, 0, 0);
		testMethod(2775, -4.014, -0.5282, 2.4856, -1.0471, 0, 0);
		testMethod(2780, -4.0166, -0.5158, 2.4856, -1.0471, 0, 0);
		testMethod(2785, -4.0191, -0.5033, 2.4856, -1.0471, 0, 0);
		testMethod(2790, -4.0216, -0.4909, 2.4856, -1.0471, 0, 0);
		testMethod(2795, -4.024, -0.4785, 2.4856, -1.0471, 0, 0);
		testMethod(2800, -4.0264, -0.4661, 2.4856, -1.0471, 0, 0);
		testMethod(2805, -4.0287, -0.4536, 2.4856, -1.0471, 0, 0);
		testMethod(2810, -4.0309, -0.4412, 2.4856, -1.0471, 0, 0);
		testMethod(2815, -4.0331, -0.4288, 2.4856, -1.0471, 0, 0);
		testMethod(2820, -4.0352, -0.4163, 2.4856, -1.0471, 0, 0);
		testMethod(2825, -4.0373, -0.4039, 2.4856, -1.0471, 0, 0);
		testMethod(2830, -4.0392, -0.3915, 2.4856, -1.0471, 0, 0);
		testMethod(2835, -4.0412, -0.3791, 2.4856, -1.0471, 0, 0);
		testMethod(2840, -4.043, -0.3666, 2.4856, -1.0471, 0, 0);
		testMethod(2845, -4.0448, -0.3542, 2.4856, -1.0471, 0, 0);
		testMethod(2850, -4.0466, -0.3418, 2.4856, -1.0471, 0, 0);
		testMethod(2855, -4.0483, -0.3293, 2.4856, -1.0471, 0, 0);
		testMethod(2860, -4.0499, -0.3169, 2.4856, -1.0471, 0, 0);
		testMethod(2865, -4.0514, -0.3045, 2.4856, -1.0471, 0, 0);
		testMethod(2870, -4.0529, -0.2921, 2.4856, -1.0471, 0, 0);
		testMethod(2875, -4.0543, -0.2796, 2.4856, -1.0471, 0, 0);
		testMethod(2880, -4.0557, -0.2672, 2.4856, -1.0471, 0, 0);
		testMethod(2885, -4.057, -0.2548, 2.4856, -1.0471, 0, 0);
		testMethod(2890, -4.0583, -0.2423, 2.4856, -1.0471, 0, 0);
		testMethod(2895, -4.0594, -0.2302, 2.4235, -1.0471, 0, 0);
		testMethod(2900, -4.0606, -0.2184, 2.3613, -1.0471, 0, 0);
		testMethod(2905, -4.0616, -0.2069, 2.2992, -1.0471, 0, 0);
		testMethod(2910, -4.0626, -0.1957, 2.237, -1.0471, 0, 0);
		testMethod(2915, -4.0636, -0.1849, 2.1749, -1.0471, 0, 0);
		testMethod(2920, -4.0645, -0.1743, 2.1128, -1.0471, 0, 0);
		testMethod(2925, -4.0653, -0.164, 2.0506, -1.0471, 0, 0);
		testMethod(2930, -4.0661, -0.1541, 1.9885, -1.0471, 0, 0);
		testMethod(2935, -4.0669, -0.1445, 1.9263, -1.0471, 0, 0);
		testMethod(2940, -4.0676, -0.1352, 1.8642, -1.0471, 0, 0);
		testMethod(2945, -4.0682, -0.1261, 1.8021, -1.0471, 0, 0);
		testMethod(2950, -4.0688, -0.1174, 1.7399, -1.0471, 0, 0);
		testMethod(2955, -4.0694, -0.1091, 1.6778, -1.0471, 0, 0);
		testMethod(2960, -4.0699, -0.101, 1.6156, -1.0471, 0, 0);
		testMethod(2965, -4.0704, -0.0932, 1.5535, -1.0471, 0, 0);
		testMethod(2970, -4.0709, -0.0858, 1.4914, -1.0471, 0, 0);
		testMethod(2975, -4.0713, -0.0786, 1.4292, -1.0471, 0, 0);
		testMethod(2980, -4.0716, -0.0718, 1.3671, -1.0471, 0, 0);
		testMethod(2985, -4.072, -0.0652, 1.3049, -1.0471, 0, 0);
		testMethod(2990, -4.0723, -0.059, 1.2428, -1.0471, 0, 0);
		testMethod(2995, -4.0726, -0.0531, 1.1807, -1.0471, 0, 0);
		testMethod(3000, -4.0728, -0.0475, 1.1185, -1.0471, 0, 0);
		testMethod(3005, -4.0731, -0.0423, 1.0564, -1.0471, 0, 0);
		testMethod(3010, -4.0733, -0.0373, 0.9942, -1.0471, 0, 0);
		testMethod(3015, -4.0734, -0.0326, 0.9321, -1.0471, 0, 0);
		testMethod(3020, -4.0736, -0.0283, 0.87, -1.0471, 0, 0);
		testMethod(3025, -4.0737, -0.0242, 0.8078, -1.0471, 0, 0);
		testMethod(3030, -4.0738, -0.0205, 0.7457, -1.0471, 0, 0);
		testMethod(3035, -4.0739, -0.0171, 0.6835, -1.0471, 0, 0);
		testMethod(3040, -4.074, -0.014, 0.6214, -1.0471, 0, 0);
		testMethod(3045, -4.0741, -0.0112, 0.5593, -1.0471, 0, 0);
		testMethod(3050, -4.0741, -0.0087, 0.4971, -1.0471, 0, 0);
		testMethod(3055, -4.0741, -0.0065, 0.435, -1.0471, 0, 0);
		testMethod(3060, -4.0742, -0.0047, 0.3728, -1.0471, 0, 0);
		testMethod(3065, -4.0742, -0.0031, 0.3107, -1.0471, 0, 0);
		testMethod(3070, -4.0742, -0.0019, 0.2486, -1.0471, 0, 0);
		testMethod(3075, -4.0742, -0.0009, 0.1864, -1.0471, 0, 0);
		testMethod(3080, -4.0742, -0.0003, 0.1243, -1.0471, 0, 0);
		testMethod(3085, -4.0742, -0, 0.0621, -1.0471, 0, 0);
		testMethod(3090, -4.0742, -0, -0, -1.0471, 0, 0);
		testMethod(3090, -4.0742, -0, -0, -1.0471, 0, 0);
	}
	public void testMethod(int t, double pos, double vel, double acc, double hed, double omg, double alf) {
		time.add((long) t);
		translation.add(new MotionState1D(pos, vel, acc));
		rotation.add(new MotionState1D(hed, omg, alf));
	}

}