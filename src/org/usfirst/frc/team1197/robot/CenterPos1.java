package org.usfirst.frc.team1197.robot;

public class CenterPos1 extends TorTrajectory {

	public CenterPos1() {
		super(-2.31, 0);
		time.clear();
		translation.clear();
		rotation.clear();
		testMethod(0, 0, 0, 0, 0, 0, 0);
		testMethod(5, -0, -0.0003, -0.0625, 0, 0, 0);
		testMethod(10, -0, -0.0009, -0.125, 0, 0, 0);
		testMethod(15, -0, -0.0019, -0.1875, 0, 0, 0);
		testMethod(20, -0, -0.0031, -0.25, 0, 0, 0);
		testMethod(25, -0, -0.0047, -0.3125, 0, 0, 0);
		testMethod(30, -0.0001, -0.0066, -0.375, 0, 0, 0);
		testMethod(35, -0.0001, -0.0088, -0.4375, 0, 0, 0);
		testMethod(40, -0.0002, -0.0113, -0.5, 0, 0, 0);
		testMethod(45, -0.0002, -0.0141, -0.5625, 0, 0, 0);
		testMethod(50, -0.0003, -0.0172, -0.625, 0, 0, 0);
		testMethod(55, -0.0004, -0.0206, -0.6875, 0, 0, 0);
		testMethod(60, -0.0005, -0.0244, -0.75, 0, 0, 0);
		testMethod(65, -0.0006, -0.0284, -0.8125, 0, 0, 0);
		testMethod(70, -0.0008, -0.0328, -0.875, 0, 0, 0);
		testMethod(75, -0.001, -0.0375, -0.9375, 0, 0, 0);
		testMethod(80, -0.0012, -0.0425, -1, 0, 0, 0);
		testMethod(85, -0.0014, -0.0478, -1.0625, 0, 0, 0);
		testMethod(90, -0.0016, -0.0534, -1.125, 0, 0, 0);
		testMethod(95, -0.0019, -0.0594, -1.1875, 0, 0, 0);
		testMethod(100, -0.0022, -0.0656, -1.25, 0, 0, 0);
		testMethod(105, -0.0026, -0.0722, -1.3125, 0, 0, 0);
		testMethod(110, -0.003, -0.0791, -1.375, 0, 0, 0);
		testMethod(115, -0.0034, -0.0863, -1.4375, 0, 0, 0);
		testMethod(120, -0.0038, -0.0938, -1.5, 0, 0, 0);
		testMethod(125, -0.0043, -0.1016, -1.5625, 0, 0, 0);
		testMethod(130, -0.0048, -0.1097, -1.625, 0, 0, 0);
		testMethod(135, -0.0054, -0.1181, -1.6875, 0, 0, 0);
		testMethod(140, -0.006, -0.1269, -1.75, 0, 0, 0);
		testMethod(145, -0.0067, -0.1359, -1.8125, 0, 0, 0);
		testMethod(150, -0.0074, -0.1453, -1.875, 0, 0, 0);
		testMethod(155, -0.0081, -0.155, -1.9375, 0, 0, 0);
		testMethod(160, -0.0089, -0.165, -2, 0, 0, 0);
		testMethod(165, -0.0098, -0.1753, -2.0625, 0, 0, 0);
		testMethod(170, -0.0107, -0.1859, -2.125, 0, 0, 0);
		testMethod(175, -0.0116, -0.1969, -2.1875, 0, 0, 0);
		testMethod(180, -0.0127, -0.2081, -2.25, 0, 0, 0);
		testMethod(185, -0.0137, -0.2197, -2.3125, 0, 0, 0);
		testMethod(190, -0.0149, -0.2316, -2.375, 0, 0, 0);
		testMethod(195, -0.016, -0.2437, -2.4375, 0, 0, 0);
		testMethod(200, -0.0173, -0.2562, -2.5, 0, 0, 0);
		testMethod(205, -0.0186, -0.2687, -2.5, 0, 0, 0);
		testMethod(210, -0.02, -0.2812, -2.5, 0, 0, 0);
		testMethod(215, -0.0214, -0.2937, -2.5, 0, 0, 0);
		testMethod(220, -0.0229, -0.3062, -2.5, 0, 0, 0);
		testMethod(225, -0.0245, -0.3187, -2.5, 0, 0, 0);
		testMethod(230, -0.0261, -0.3312, -2.5, 0, 0, 0);
		testMethod(235, -0.0278, -0.3437, -2.5, 0, 0, 0);
		testMethod(240, -0.0295, -0.3562, -2.5, 0, 0, 0);
		testMethod(245, -0.0314, -0.3687, -2.5, 0, 0, 0);
		testMethod(250, -0.0332, -0.3812, -2.5, 0, 0, 0);
		testMethod(255, -0.0352, -0.3937, -2.5, 0, 0, 0);
		testMethod(260, -0.0372, -0.4062, -2.5, 0, 0, 0);
		testMethod(265, -0.0392, -0.4187, -2.5, 0, 0, 0);
		testMethod(270, -0.0414, -0.4312, -2.5, 0, 0, 0);
		testMethod(275, -0.0435, -0.4437, -2.5, 0, 0, 0);
		testMethod(280, -0.0458, -0.4562, -2.5, 0, 0, 0);
		testMethod(285, -0.0481, -0.4687, -2.5, 0, 0, 0);
		testMethod(290, -0.0505, -0.4812, -2.5, 0, 0, 0);
		testMethod(295, -0.0529, -0.4937, -2.5, 0, 0, 0);
		testMethod(300, -0.0554, -0.5062, -2.5, 0, 0, 0);
		testMethod(305, -0.058, -0.5187, -2.5, 0, 0, 0);
		testMethod(310, -0.0606, -0.5312, -2.5, 0, 0, 0);
		testMethod(315, -0.0633, -0.5437, -2.5, 0, 0, 0);
		testMethod(320, -0.066, -0.5562, -2.5, 0, 0, 0);
		testMethod(325, -0.0689, -0.5687, -2.5, 0, 0, 0);
		testMethod(330, -0.0717, -0.5812, -2.5, 0, 0, 0);
		testMethod(335, -0.0747, -0.5937, -2.5, 0, 0, 0);
		testMethod(340, -0.0777, -0.6062, -2.5, 0, 0, 0);
		testMethod(345, -0.0807, -0.6187, -2.5, 0, 0, 0);
		testMethod(350, -0.0839, -0.6312, -2.5, 0, 0, 0);
		testMethod(355, -0.087, -0.6437, -2.5, 0, 0, 0);
		testMethod(360, -0.0903, -0.6562, -2.5, 0, 0, 0);
		testMethod(365, -0.0936, -0.6687, -2.5, 0, 0, 0);
		testMethod(370, -0.097, -0.6812, -2.5, 0, 0, 0);
		testMethod(375, -0.1004, -0.6937, -2.5, 0, 0, 0);
		testMethod(380, -0.1039, -0.7062, -2.5, 0, 0, 0);
		testMethod(385, -0.1075, -0.7187, -2.5, 0, 0, 0);
		testMethod(390, -0.1111, -0.7312, -2.5, 0, 0, 0);
		testMethod(395, -0.1148, -0.7437, -2.5, 0, 0, 0);
		testMethod(400, -0.1185, -0.7562, -2.5, 0, 0, 0);
		testMethod(405, -0.1224, -0.7687, -2.5, 0, 0, 0);
		testMethod(410, -0.1262, -0.7812, -2.5, 0, 0, 0);
		testMethod(415, -0.1302, -0.7937, -2.5, 0, 0, 0);
		testMethod(420, -0.1342, -0.8062, -2.5, 0, 0, 0);
		testMethod(425, -0.1382, -0.8187, -2.5, 0, 0, 0);
		testMethod(430, -0.1424, -0.8312, -2.5, 0, 0, 0);
		testMethod(435, -0.1465, -0.8437, -2.5, 0, 0, 0);
		testMethod(440, -0.1508, -0.8562, -2.5, 0, 0, 0);
		testMethod(445, -0.1551, -0.8687, -2.5, 0, 0, 0);
		testMethod(450, -0.1595, -0.8812, -2.5, 0, 0, 0);
		testMethod(455, -0.1639, -0.8937, -2.5, 0, 0, 0);
		testMethod(460, -0.1684, -0.9062, -2.5, 0, 0, 0);
		testMethod(465, -0.173, -0.9187, -2.5, 0, 0, 0);
		testMethod(470, -0.1776, -0.9313, -2.5, 0, 0, 0);
		testMethod(475, -0.1823, -0.9437, -2.5, 0, 0, 0);
		testMethod(480, -0.187, -0.9563, -2.5, 0, 0, 0);
		testMethod(485, -0.1919, -0.9688, -2.5, 0, 0, 0);
		testMethod(490, -0.1967, -0.9813, -2.5, 0, 0, 0);
		testMethod(495, -0.2017, -0.9938, -2.5, 0, 0, 0);
		testMethod(500, -0.2067, -1.0063, -2.5, 0, 0, 0);
		testMethod(505, -0.2117, -1.0188, -2.5, 0, 0, 0);
		testMethod(510, -0.2169, -1.0313, -2.5, 0, 0, 0);
		testMethod(515, -0.222, -1.0438, -2.5, 0, 0, 0);
		testMethod(520, -0.2273, -1.0563, -2.5, 0, 0, 0);
		testMethod(525, -0.2326, -1.0688, -2.5, 0, 0, 0);
		testMethod(530, -0.238, -1.0813, -2.5, 0, 0, 0);
		testMethod(535, -0.2434, -1.0938, -2.5, 0, 0, 0);
		testMethod(540, -0.2489, -1.1063, -2.5, 0, 0, 0);
		testMethod(545, -0.2545, -1.1188, -2.5, 0, 0, 0);
		testMethod(550, -0.2601, -1.1313, -2.5, 0, 0, 0);
		testMethod(555, -0.2658, -1.1438, -2.5, 0, 0, 0);
		testMethod(560, -0.2715, -1.1563, -2.5, 0, 0, 0);
		testMethod(565, -0.2774, -1.1688, -2.5, 0, 0, 0);
		testMethod(570, -0.2832, -1.1813, -2.5, 0, 0, 0);
		testMethod(575, -0.2892, -1.1938, -2.5, 0, 0, 0);
		testMethod(580, -0.2952, -1.2063, -2.5, 0, 0, 0);
		testMethod(585, -0.3012, -1.2188, -2.5, 0, 0, 0);
		testMethod(590, -0.3074, -1.2313, -2.5, 0, 0, 0);
		testMethod(595, -0.3135, -1.2438, -2.5, 0, 0, 0);
		testMethod(600, -0.3198, -1.2563, -2.5, 0, 0, 0);
		testMethod(605, -0.3261, -1.2688, -2.5, 0, 0, 0);
		testMethod(610, -0.3325, -1.2813, -2.5, 0, 0, 0);
		testMethod(615, -0.3389, -1.2938, -2.5, 0, 0, 0);
		testMethod(620, -0.3454, -1.3063, -2.5, 0, 0, 0);
		testMethod(625, -0.352, -1.3188, -2.5, 0, 0, 0);
		testMethod(630, -0.3586, -1.3313, -2.5, 0, 0, 0);
		testMethod(635, -0.3653, -1.3438, -2.5, 0, 0, 0);
		testMethod(640, -0.372, -1.3563, -2.5, 0, 0, 0);
		testMethod(645, -0.3789, -1.3688, -2.5, 0, 0, 0);
		testMethod(650, -0.3857, -1.3813, -2.5, 0, 0, 0);
		testMethod(655, -0.3927, -1.3938, -2.5, 0, 0, 0);
		testMethod(660, -0.3997, -1.4063, -2.5, 0, 0, 0);
		testMethod(665, -0.4067, -1.4188, -2.5, 0, 0, 0);
		testMethod(670, -0.4139, -1.4313, -2.5, 0, 0, 0);
		testMethod(675, -0.421, -1.4438, -2.5, 0, 0, 0);
		testMethod(680, -0.4283, -1.4563, -2.5, 0, 0, 0);
		testMethod(685, -0.4356, -1.4688, -2.5, 0, 0, 0);
		testMethod(690, -0.443, -1.4813, -2.5, 0, 0, 0);
		testMethod(695, -0.4504, -1.4938, -2.5, 0, 0, 0);
		testMethod(700, -0.4579, -1.5063, -2.5, 0, 0, 0);
		testMethod(705, -0.4655, -1.5188, -2.5, 0, 0, 0);
		testMethod(710, -0.4731, -1.5313, -2.5, 0, 0, 0);
		testMethod(715, -0.4808, -1.5438, -2.5, 0, 0, 0);
		testMethod(720, -0.4885, -1.5563, -2.5, 0, 0, 0);
		testMethod(725, -0.4964, -1.5688, -2.5, 0, 0, 0);
		testMethod(730, -0.5042, -1.5813, -2.5, 0, 0, 0);
		testMethod(735, -0.5122, -1.5938, -2.5, 0, 0, 0);
		testMethod(740, -0.5202, -1.6063, -2.5, 0, 0, 0);
		testMethod(745, -0.5282, -1.6188, -2.5, 0, 0, 0);
		testMethod(750, -0.5364, -1.6313, -2.5, 0, 0, 0);
		testMethod(755, -0.5445, -1.6438, -2.5, 0, 0, 0);
		testMethod(760, -0.5528, -1.6563, -2.5, 0, 0, 0);
		testMethod(765, -0.5611, -1.6688, -2.5, 0, 0, 0);
		testMethod(770, -0.5695, -1.6813, -2.5, 0, 0, 0);
		testMethod(775, -0.5779, -1.6934, -2.4375, 0, 0, 0);
		testMethod(780, -0.5864, -1.7053, -2.375, 0, 0, 0);
		testMethod(785, -0.595, -1.7169, -2.3125, 0, 0, 0);
		testMethod(790, -0.6036, -1.7281, -2.25, 0, 0, 0);
		testMethod(795, -0.6123, -1.7391, -2.1875, 0, 0, 0);
		testMethod(800, -0.621, -1.7497, -2.125, 0, 0, 0);
		testMethod(805, -0.6298, -1.76, -2.0625, 0, 0, 0);
		testMethod(810, -0.6386, -1.77, -2, 0, 0, 0);
		testMethod(815, -0.6474, -1.7797, -1.9375, 0, 0, 0);
		testMethod(820, -0.6564, -1.7891, -1.875, 0, 0, 0);
		testMethod(825, -0.6653, -1.7981, -1.8125, 0, 0, 0);
		testMethod(830, -0.6744, -1.8069, -1.75, 0, 0, 0);
		testMethod(835, -0.6834, -1.8153, -1.6875, 0, 0, 0);
		testMethod(840, -0.6925, -1.8234, -1.625, 0, 0, 0);
		testMethod(845, -0.7016, -1.8313, -1.5625, 0, 0, 0);
		testMethod(850, -0.7108, -1.8388, -1.5, 0, 0, 0);
		testMethod(855, -0.72, -1.8459, -1.4375, 0, 0, 0);
		testMethod(860, -0.7293, -1.8528, -1.375, 0, 0, 0);
		testMethod(865, -0.7386, -1.8594, -1.3125, 0, 0, 0);
		testMethod(870, -0.7479, -1.8656, -1.25, 0, 0, 0);
		testMethod(875, -0.7572, -1.8716, -1.1875, 0, 0, 0);
		testMethod(880, -0.7666, -1.8772, -1.125, 0, 0, 0);
		testMethod(885, -0.776, -1.8825, -1.0625, 0, 0, 0);
		testMethod(890, -0.7854, -1.8875, -1, 0, 0, 0);
		testMethod(895, -0.7949, -1.8922, -0.9375, 0, 0, 0);
		testMethod(900, -0.8043, -1.8966, -0.875, 0, 0, 0);
		testMethod(905, -0.8138, -1.9006, -0.8125, 0, 0, 0);
		testMethod(910, -0.8233, -1.9044, -0.75, 0, 0, 0);
		testMethod(915, -0.8329, -1.9078, -0.6875, 0, 0, 0);
		testMethod(920, -0.8424, -1.9109, -0.625, 0, 0, 0);
		testMethod(925, -0.852, -1.9138, -0.5625, 0, 0, 0);
		testMethod(930, -0.8615, -1.9163, -0.5, 0, 0, 0);
		testMethod(935, -0.8711, -1.9184, -0.4375, 0, 0, 0);
		testMethod(940, -0.8807, -1.9203, -0.375, 0, 0, 0);
		testMethod(945, -0.8903, -1.9219, -0.3125, 0, 0, 0);
		testMethod(950, -0.8999, -1.9231, -0.25, 0, 0, 0);
		testMethod(955, -0.9096, -1.9241, -0.1875, 0, 0, 0);
		testMethod(960, -0.9192, -1.9247, -0.125, 0, 0, 0);
		testMethod(965, -0.9288, -1.925, -0.0625, 0, 0, 0);
		testMethod(970, -0.9384, -1.925, -0, 0, 0, 0);
		testMethod(975, -0.9481, -1.925, -0, 0, 0, 0);
		testMethod(980, -0.9577, -1.925, -0, 0, 0, 0);
		testMethod(985, -0.9673, -1.925, -0, 0, 0, 0);
		testMethod(990, -0.9769, -1.925, -0, 0, 0, 0);
		testMethod(995, -0.9866, -1.925, -0, 0, 0, 0);
		testMethod(1000, -0.9962, -1.925, -0, 0, 0, 0);
		testMethod(1005, -1.0058, -1.925, -0, 0, 0, 0);
		testMethod(1010, -1.0154, -1.925, -0, 0, 0, 0);
		testMethod(1015, -1.0251, -1.925, -0, 0, 0, 0);
		testMethod(1020, -1.0347, -1.925, -0, 0, 0, 0);
		testMethod(1025, -1.0443, -1.925, -0, 0, 0, 0);
		testMethod(1030, -1.0539, -1.925, -0, 0, 0, 0);
		testMethod(1035, -1.0636, -1.925, -0, 0, 0, 0);
		testMethod(1040, -1.0732, -1.925, -0, 0, 0, 0);
		testMethod(1045, -1.0828, -1.925, -0, 0, 0, 0);
		testMethod(1050, -1.0924, -1.925, -0, 0, 0, 0);
		testMethod(1055, -1.1021, -1.925, -0, 0, 0, 0);
		testMethod(1060, -1.1117, -1.925, -0, 0, 0, 0);
		testMethod(1065, -1.1213, -1.925, -0, 0, 0, 0);
		testMethod(1070, -1.1309, -1.925, -0, 0, 0, 0);
		testMethod(1075, -1.1406, -1.925, -0, 0, 0, 0);
		testMethod(1080, -1.1502, -1.925, -0, 0, 0, 0);
		testMethod(1085, -1.1598, -1.925, -0, 0, 0, 0);
		testMethod(1090, -1.1694, -1.925, -0, 0, 0, 0);
		testMethod(1095, -1.1791, -1.925, -0, 0, 0, 0);
		testMethod(1100, -1.1887, -1.925, -0, 0, 0, 0);
		testMethod(1105, -1.1983, -1.925, -0, 0, 0, 0);
		testMethod(1110, -1.2079, -1.925, -0, 0, 0, 0);
		testMethod(1115, -1.2176, -1.925, -0, 0, 0, 0);
		testMethod(1120, -1.2272, -1.925, -0, 0, 0, 0);
		testMethod(1125, -1.2368, -1.925, -0, 0, 0, 0);
		testMethod(1130, -1.2464, -1.925, -0, 0, 0, 0);
		testMethod(1135, -1.2561, -1.925, -0, 0, 0, 0);
		testMethod(1140, -1.2657, -1.925, -0, 0, 0, 0);
		testMethod(1145, -1.2753, -1.925, -0, 0, 0, 0);
		testMethod(1150, -1.2849, -1.925, -0, 0, 0, 0);
		testMethod(1155, -1.2946, -1.925, -0, 0, 0, 0);
		testMethod(1160, -1.3042, -1.925, -0, 0, 0, 0);
		testMethod(1165, -1.3138, -1.925, -0, 0, 0, 0);
		testMethod(1170, -1.3234, -1.925, -0, 0, 0, 0);
		testMethod(1175, -1.3331, -1.925, -0, 0, 0, 0);
		testMethod(1180, -1.3427, -1.925, -0, 0, 0, 0);
		testMethod(1185, -1.3523, -1.925, -0, 0, 0, 0);
		testMethod(1190, -1.3619, -1.925, -0, 0, 0, 0);
		testMethod(1195, -1.3716, -1.925, -0, 0, 0, 0);
		testMethod(1200, -1.3812, -1.925, -0, 0, 0, 0);
		testMethod(1205, -1.3908, -1.9247, 0.0625, 0, 0, 0);
		testMethod(1210, -1.4004, -1.9241, 0.125, 0, 0, 0);
		testMethod(1215, -1.4101, -1.9231, 0.1875, 0, 0, 0);
		testMethod(1220, -1.4197, -1.9219, 0.25, 0, 0, 0);
		testMethod(1225, -1.4293, -1.9203, 0.3125, 0, 0, 0);
		testMethod(1230, -1.4389, -1.9184, 0.375, 0, 0, 0);
		testMethod(1235, -1.4485, -1.9163, 0.4375, 0, 0, 0);
		testMethod(1240, -1.458, -1.9138, 0.5, 0, 0, 0);
		testMethod(1245, -1.4676, -1.9109, 0.5625, 0, 0, 0);
		testMethod(1250, -1.4771, -1.9078, 0.625, 0, 0, 0);
		testMethod(1255, -1.4867, -1.9044, 0.6875, 0, 0, 0);
		testMethod(1260, -1.4962, -1.9006, 0.75, 0, 0, 0);
		testMethod(1265, -1.5057, -1.8966, 0.8125, 0, 0, 0);
		testMethod(1270, -1.5151, -1.8922, 0.875, 0, 0, 0);
		testMethod(1275, -1.5246, -1.8875, 0.9375, 0, 0, 0);
		testMethod(1280, -1.534, -1.8825, 1, 0, 0, 0);
		testMethod(1285, -1.5434, -1.8772, 1.0625, 0, 0, 0);
		testMethod(1290, -1.5528, -1.8716, 1.125, 0, 0, 0);
		testMethod(1295, -1.5621, -1.8656, 1.1875, 0, 0, 0);
		testMethod(1300, -1.5714, -1.8594, 1.25, 0, 0, 0);
		testMethod(1305, -1.5807, -1.8528, 1.3125, 0, 0, 0);
		testMethod(1310, -1.59, -1.8459, 1.375, 0, 0, 0);
		testMethod(1315, -1.5992, -1.8388, 1.4375, 0, 0, 0);
		testMethod(1320, -1.6084, -1.8313, 1.5, 0, 0, 0);
		testMethod(1325, -1.6175, -1.8234, 1.5625, 0, 0, 0);
		testMethod(1330, -1.6266, -1.8153, 1.625, 0, 0, 0);
		testMethod(1335, -1.6356, -1.8069, 1.6875, 0, 0, 0);
		testMethod(1340, -1.6447, -1.7981, 1.75, 0, 0, 0);
		testMethod(1345, -1.6536, -1.7891, 1.8125, 0, 0, 0);
		testMethod(1350, -1.6626, -1.7797, 1.875, 0, 0, 0);
		testMethod(1355, -1.6714, -1.77, 1.9375, 0, 0, 0);
		testMethod(1360, -1.6803, -1.76, 2, 0, 0, 0);
		testMethod(1365, -1.689, -1.7497, 2.0625, 0, 0, 0);
		testMethod(1370, -1.6977, -1.7391, 2.125, 0, 0, 0);
		testMethod(1375, -1.7064, -1.7281, 2.1875, 0, 0, 0);
		testMethod(1380, -1.715, -1.7169, 2.25, 0, 0, 0);
		testMethod(1385, -1.7236, -1.7053, 2.3125, 0, 0, 0);
		testMethod(1390, -1.7321, -1.6934, 2.375, 0, 0, 0);
		testMethod(1395, -1.7405, -1.6813, 2.4375, 0, 0, 0);
		testMethod(1400, -1.7489, -1.6688, 2.5, 0, 0, 0);
		testMethod(1405, -1.7572, -1.6563, 2.5, 0, 0, 0);
		testMethod(1410, -1.7655, -1.6438, 2.5, 0, 0, 0);
		testMethod(1415, -1.7736, -1.6313, 2.5, 0, 0, 0);
		testMethod(1420, -1.7818, -1.6188, 2.5, 0, 0, 0);
		testMethod(1425, -1.7898, -1.6063, 2.5, 0, 0, 0);
		testMethod(1430, -1.7978, -1.5938, 2.5, 0, 0, 0);
		testMethod(1435, -1.8058, -1.5813, 2.5, 0, 0, 0);
		testMethod(1440, -1.8136, -1.5688, 2.5, 0, 0, 0);
		testMethod(1445, -1.8215, -1.5563, 2.5, 0, 0, 0);
		testMethod(1450, -1.8292, -1.5438, 2.5, 0, 0, 0);
		testMethod(1455, -1.8369, -1.5313, 2.5, 0, 0, 0);
		testMethod(1460, -1.8445, -1.5188, 2.5, 0, 0, 0);
		testMethod(1465, -1.8521, -1.5063, 2.5, 0, 0, 0);
		testMethod(1470, -1.8596, -1.4938, 2.5, 0, 0, 0);
		testMethod(1475, -1.867, -1.4813, 2.5, 0, 0, 0);
		testMethod(1480, -1.8744, -1.4688, 2.5, 0, 0, 0);
		testMethod(1485, -1.8817, -1.4563, 2.5, 0, 0, 0);
		testMethod(1490, -1.889, -1.4438, 2.5, 0, 0, 0);
		testMethod(1495, -1.8961, -1.4313, 2.5, 0, 0, 0);
		testMethod(1500, -1.9033, -1.4188, 2.5, 0, 0, 0);
		testMethod(1505, -1.9103, -1.4063, 2.5, 0, 0, 0);
		testMethod(1510, -1.9173, -1.3938, 2.5, 0, 0, 0);
		testMethod(1515, -1.9243, -1.3813, 2.5, 0, 0, 0);
		testMethod(1520, -1.9311, -1.3688, 2.5, 0, 0, 0);
		testMethod(1525, -1.938, -1.3563, 2.5, 0, 0, 0);
		testMethod(1530, -1.9447, -1.3438, 2.5, 0, 0, 0);
		testMethod(1535, -1.9514, -1.3313, 2.5, 0, 0, 0);
		testMethod(1540, -1.958, -1.3188, 2.5, 0, 0, 0);
		testMethod(1545, -1.9646, -1.3063, 2.5, 0, 0, 0);
		testMethod(1550, -1.9711, -1.2938, 2.5, 0, 0, 0);
		testMethod(1555, -1.9775, -1.2813, 2.5, 0, 0, 0);
		testMethod(1560, -1.9839, -1.2688, 2.5, 0, 0, 0);
		testMethod(1565, -1.9902, -1.2563, 2.5, 0, 0, 0);
		testMethod(1570, -1.9965, -1.2438, 2.5, 0, 0, 0);
		testMethod(1575, -2.0026, -1.2313, 2.5, 0, 0, 0);
		testMethod(1580, -2.0088, -1.2188, 2.5, 0, 0, 0);
		testMethod(1585, -2.0148, -1.2063, 2.5, 0, 0, 0);
		testMethod(1590, -2.0208, -1.1938, 2.5, 0, 0, 0);
		testMethod(1595, -2.0268, -1.1813, 2.5, 0, 0, 0);
		testMethod(1600, -2.0326, -1.1688, 2.5, 0, 0, 0);
		testMethod(1605, -2.0385, -1.1563, 2.5, 0, 0, 0);
		testMethod(1610, -2.0442, -1.1438, 2.5, 0, 0, 0);
		testMethod(1615, -2.0499, -1.1313, 2.5, 0, 0, 0);
		testMethod(1620, -2.0555, -1.1188, 2.5, 0, 0, 0);
		testMethod(1625, -2.0611, -1.1063, 2.5, 0, 0, 0);
		testMethod(1630, -2.0666, -1.0938, 2.5, 0, 0, 0);
		testMethod(1635, -2.072, -1.0813, 2.5, 0, 0, 0);
		testMethod(1640, -2.0774, -1.0688, 2.5, 0, 0, 0);
		testMethod(1645, -2.0827, -1.0563, 2.5, 0, 0, 0);
		testMethod(1650, -2.088, -1.0438, 2.5, 0, 0, 0);
		testMethod(1655, -2.0931, -1.0313, 2.5, 0, 0, 0);
		testMethod(1660, -2.0983, -1.0188, 2.5, 0, 0, 0);
		testMethod(1665, -2.1033, -1.0063, 2.5, 0, 0, 0);
		testMethod(1670, -2.1083, -0.9938, 2.5, 0, 0, 0);
		testMethod(1675, -2.1133, -0.9812, 2.5, 0, 0, 0);
		testMethod(1680, -2.1181, -0.9688, 2.5, 0, 0, 0);
		testMethod(1685, -2.123, -0.9563, 2.5, 0, 0, 0);
		testMethod(1690, -2.1277, -0.9437, 2.5, 0, 0, 0);
		testMethod(1695, -2.1324, -0.9313, 2.5, 0, 0, 0);
		testMethod(1700, -2.137, -0.9187, 2.5, 0, 0, 0);
		testMethod(1705, -2.1416, -0.9062, 2.5, 0, 0, 0);
		testMethod(1710, -2.1461, -0.8938, 2.5, 0, 0, 0);
		testMethod(1715, -2.1505, -0.8812, 2.5, 0, 0, 0);
		testMethod(1720, -2.1549, -0.8687, 2.5, 0, 0, 0);
		testMethod(1725, -2.1592, -0.8562, 2.5, 0, 0, 0);
		testMethod(1730, -2.1635, -0.8437, 2.5, 0, 0, 0);
		testMethod(1735, -2.1676, -0.8312, 2.5, 0, 0, 0);
		testMethod(1740, -2.1718, -0.8187, 2.5, 0, 0, 0);
		testMethod(1745, -2.1758, -0.8062, 2.5, 0, 0, 0);
		testMethod(1750, -2.1798, -0.7937, 2.5, 0, 0, 0);
		testMethod(1755, -2.1838, -0.7812, 2.5, 0, 0, 0);
		testMethod(1760, -2.1876, -0.7687, 2.5, 0, 0, 0);
		testMethod(1765, -2.1915, -0.7562, 2.5, 0, 0, 0);
		testMethod(1770, -2.1952, -0.7437, 2.5, 0, 0, 0);
		testMethod(1775, -2.1989, -0.7312, 2.5, 0, 0, 0);
		testMethod(1780, -2.2025, -0.7187, 2.5, 0, 0, 0);
		testMethod(1785, -2.2061, -0.7062, 2.5, 0, 0, 0);
		testMethod(1790, -2.2096, -0.6937, 2.5, 0, 0, 0);
		testMethod(1795, -2.213, -0.6812, 2.5, 0, 0, 0);
		testMethod(1800, -2.2164, -0.6687, 2.5, 0, 0, 0);
		testMethod(1805, -2.2197, -0.6562, 2.5, 0, 0, 0);
		testMethod(1810, -2.223, -0.6437, 2.5, 0, 0, 0);
		testMethod(1815, -2.2261, -0.6312, 2.5, 0, 0, 0);
		testMethod(1820, -2.2293, -0.6187, 2.5, 0, 0, 0);
		testMethod(1825, -2.2323, -0.6062, 2.5, 0, 0, 0);
		testMethod(1830, -2.2353, -0.5937, 2.5, 0, 0, 0);
		testMethod(1835, -2.2383, -0.5812, 2.5, 0, 0, 0);
		testMethod(1840, -2.2411, -0.5687, 2.5, 0, 0, 0);
		testMethod(1845, -2.244, -0.5562, 2.5, 0, 0, 0);
		testMethod(1850, -2.2467, -0.5437, 2.5, 0, 0, 0);
		testMethod(1855, -2.2494, -0.5312, 2.5, 0, 0, 0);
		testMethod(1860, -2.252, -0.5187, 2.5, 0, 0, 0);
		testMethod(1865, -2.2546, -0.5062, 2.5, 0, 0, 0);
		testMethod(1870, -2.2571, -0.4937, 2.5, 0, 0, 0);
		testMethod(1875, -2.2595, -0.4812, 2.5, 0, 0, 0);
		testMethod(1880, -2.2619, -0.4687, 2.5, 0, 0, 0);
		testMethod(1885, -2.2642, -0.4562, 2.5, 0, 0, 0);
		testMethod(1890, -2.2665, -0.4437, 2.5, 0, 0, 0);
		testMethod(1895, -2.2686, -0.4312, 2.5, 0, 0, 0);
		testMethod(1900, -2.2708, -0.4187, 2.5, 0, 0, 0);
		testMethod(1905, -2.2728, -0.4062, 2.5, 0, 0, 0);
		testMethod(1910, -2.2748, -0.3937, 2.5, 0, 0, 0);
		testMethod(1915, -2.2768, -0.3812, 2.5, 0, 0, 0);
		testMethod(1920, -2.2786, -0.3687, 2.5, 0, 0, 0);
		testMethod(1925, -2.2805, -0.3562, 2.5, 0, 0, 0);
		testMethod(1930, -2.2822, -0.3437, 2.5, 0, 0, 0);
		testMethod(1935, -2.2839, -0.3312, 2.5, 0, 0, 0);
		testMethod(1940, -2.2855, -0.3187, 2.5, 0, 0, 0);
		testMethod(1945, -2.2871, -0.3062, 2.5, 0, 0, 0);
		testMethod(1950, -2.2886, -0.2937, 2.5, 0, 0, 0);
		testMethod(1955, -2.29, -0.2812, 2.5, 0, 0, 0);
		testMethod(1960, -2.2914, -0.2687, 2.5, 0, 0, 0);
		testMethod(1965, -2.2927, -0.2562, 2.5, 0, 0, 0);
		testMethod(1970, -2.294, -0.2437, 2.5, 0, 0, 0);
		testMethod(1975, -2.2951, -0.2316, 2.4375, 0, 0, 0);
		testMethod(1980, -2.2963, -0.2197, 2.375, 0, 0, 0);
		testMethod(1985, -2.2973, -0.2081, 2.3125, 0, 0, 0);
		testMethod(1990, -2.2984, -0.1969, 2.25, 0, 0, 0);
		testMethod(1995, -2.2993, -0.1859, 2.1875, 0, 0, 0);
		testMethod(2000, -2.3002, -0.1753, 2.125, 0, 0, 0);
		testMethod(2005, -2.3011, -0.165, 2.0625, 0, 0, 0);
		testMethod(2010, -2.3019, -0.155, 2, 0, 0, 0);
		testMethod(2015, -2.3026, -0.1453, 1.9375, 0, 0, 0);
		testMethod(2020, -2.3033, -0.1359, 1.875, 0, 0, 0);
		testMethod(2025, -2.304, -0.1269, 1.8125, 0, 0, 0);
		testMethod(2030, -2.3046, -0.1181, 1.75, 0, 0, 0);
		testMethod(2035, -2.3052, -0.1097, 1.6875, 0, 0, 0);
		testMethod(2040, -2.3057, -0.1016, 1.625, 0, 0, 0);
		testMethod(2045, -2.3062, -0.0938, 1.5625, 0, 0, 0);
		testMethod(2050, -2.3066, -0.0863, 1.5, 0, 0, 0);
		testMethod(2055, -2.307, -0.0791, 1.4375, 0, 0, 0);
		testMethod(2060, -2.3074, -0.0722, 1.375, 0, 0, 0);
		testMethod(2065, -2.3078, -0.0656, 1.3125, 0, 0, 0);
		testMethod(2070, -2.3081, -0.0594, 1.25, 0, 0, 0);
		testMethod(2075, -2.3084, -0.0534, 1.1875, 0, 0, 0);
		testMethod(2080, -2.3086, -0.0478, 1.125, 0, 0, 0);
		testMethod(2085, -2.3088, -0.0425, 1.0625, 0, 0, 0);
		testMethod(2090, -2.309, -0.0375, 1, 0, 0, 0);
		testMethod(2095, -2.3092, -0.0328, 0.9375, 0, 0, 0);
		testMethod(2100, -2.3094, -0.0284, 0.875, 0, 0, 0);
		testMethod(2105, -2.3095, -0.0244, 0.8125, 0, 0, 0);
		testMethod(2110, -2.3096, -0.0206, 0.75, 0, 0, 0);
		testMethod(2115, -2.3097, -0.0172, 0.6875, 0, 0, 0);
		testMethod(2120, -2.3098, -0.0141, 0.625, 0, 0, 0);
		testMethod(2125, -2.3098, -0.0113, 0.5625, 0, 0, 0);
		testMethod(2130, -2.3099, -0.0088, 0.5, 0, 0, 0);
		testMethod(2135, -2.3099, -0.0066, 0.4375, 0, 0, 0);
		testMethod(2140, -2.31, -0.0047, 0.375, 0, 0, 0);
		testMethod(2145, -2.31, -0.0031, 0.3125, 0, 0, 0);
		testMethod(2150, -2.31, -0.0019, 0.25, 0, 0, 0);
		testMethod(2155, -2.31, -0.0009, 0.1875, 0, 0, 0);
		testMethod(2160, -2.31, -0.0003, 0.125, 0, 0, 0);
		testMethod(2165, -2.31, -0, 0.0625, 0, 0, 0);
		testMethod(2170, -2.31, -0, -0, 0, 0, 0);
		testMethod(2170, -2.31, -0, -0, 0, 0, 0);
	}
	public void testMethod(int t, double pos, double vel, double acc, double hed, double omg, double alf) {
		time.add((long) t);
		translation.add(new MotionState1D(pos, vel, acc));
		rotation.add(new MotionState1D(hed, omg, alf));
	}

}