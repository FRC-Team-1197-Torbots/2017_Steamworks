package org.usfirst.frc.team1197.robot;

public class BoilerPos3 extends TorTrajectory {

	public BoilerPos3() {
		super(2.3921, -0.7854);
		time.clear();
		translation.clear();
		rotation.clear();
		testMethod(0, 0, 0, 0, 0, 0, 0);
		testMethod(5, 0, 0.0005, 0.0998, 0, 0, 0);
		testMethod(10, 0, 0.0015, 0.1996, 0, 0, 0);
		testMethod(15, 0, 0.003, 0.2994, 0, 0, 0);
		testMethod(20, 0, 0.005, 0.3992, 0, 0, 0);
		testMethod(25, 0.0001, 0.0075, 0.499, 0, 0, 0);
		testMethod(30, 0.0001, 0.0105, 0.5989, 0, 0, 0);
		testMethod(35, 0.0002, 0.014, 0.6987, 0, 0, 0);
		testMethod(40, 0.0003, 0.018, 0.7985, 0, 0, 0);
		testMethod(45, 0.0004, 0.0225, 0.8983, 0, 0, 0);
		testMethod(50, 0.0005, 0.0274, 0.9981, 0, 0, 0);
		testMethod(55, 0.0006, 0.0329, 1.0979, 0, 0, 0);
		testMethod(60, 0.0008, 0.0389, 1.1977, 0, 0, 0);
		testMethod(65, 0.001, 0.0454, 1.2975, 0, 0, 0);
		testMethod(70, 0.0013, 0.0524, 1.3973, 0, 0, 0);
		testMethod(75, 0.0015, 0.0599, 1.4971, 0, 0, 0);
		testMethod(80, 0.0019, 0.0679, 1.597, 0, 0, 0);
		testMethod(85, 0.0022, 0.0764, 1.6968, 0, 0, 0);
		testMethod(90, 0.0026, 0.0853, 1.7966, 0, 0, 0);
		testMethod(95, 0.0031, 0.0948, 1.8964, 0, 0, 0);
		testMethod(100, 0.0036, 0.1048, 1.9962, 0, 0, 0);
		testMethod(105, 0.0041, 0.1153, 2.096, 0, 0, 0);
		testMethod(110, 0.0047, 0.1263, 2.1958, 0, 0, 0);
		testMethod(115, 0.0054, 0.1377, 2.2956, 0, 0, 0);
		testMethod(120, 0.0061, 0.1497, 2.3954, 0, 0, 0);
		testMethod(125, 0.0069, 0.1622, 2.4952, 0, 0, 0);
		testMethod(130, 0.0077, 0.1752, 2.595, 0, 0, 0);
		testMethod(135, 0.0086, 0.1886, 2.6949, 0, 0, 0);
		testMethod(140, 0.0096, 0.2026, 2.7947, 0, 0, 0);
		testMethod(145, 0.0107, 0.2171, 2.8945, 0, 0, 0);
		testMethod(150, 0.0118, 0.2321, 2.9943, 0, 0, 0);
		testMethod(155, 0.013, 0.2475, 3.0941, 0, 0, 0);
		testMethod(160, 0.0143, 0.2635, 3.1939, 0, 0, 0);
		testMethod(165, 0.0156, 0.28, 3.2937, 0, 0, 0);
		testMethod(170, 0.0171, 0.2969, 3.3935, 0, 0, 0);
		testMethod(175, 0.0186, 0.3144, 3.4933, 0, 0, 0);
		testMethod(180, 0.0202, 0.3319, 3.4933, 0, 0, 0);
		testMethod(185, 0.0219, 0.3493, 3.4933, 0, 0, 0);
		testMethod(190, 0.0237, 0.3668, 3.4933, 0, 0, 0);
		testMethod(195, 0.0256, 0.3843, 3.4933, 0, 0, 0);
		testMethod(200, 0.0276, 0.4017, 3.4933, 0, 0, 0);
		testMethod(205, 0.0296, 0.4192, 3.4933, 0, 0, 0);
		testMethod(210, 0.0317, 0.4367, 3.4933, 0, 0, 0);
		testMethod(215, 0.034, 0.4541, 3.4933, 0, 0, 0);
		testMethod(220, 0.0363, 0.4716, 3.4933, 0, 0, 0);
		testMethod(225, 0.0387, 0.4891, 3.4933, 0, 0, 0);
		testMethod(230, 0.0412, 0.5065, 3.4933, 0, 0, 0);
		testMethod(235, 0.0438, 0.524, 3.4933, 0, 0, 0);
		testMethod(240, 0.0464, 0.5415, 3.4933, 0, 0, 0);
		testMethod(245, 0.0492, 0.5589, 3.4933, 0, 0, 0);
		testMethod(250, 0.052, 0.5764, 3.4933, 0, 0, 0);
		testMethod(255, 0.0549, 0.5939, 3.4933, 0, 0, 0);
		testMethod(260, 0.0579, 0.6113, 3.4933, 0, 0, 0);
		testMethod(265, 0.061, 0.6288, 3.4933, 0, 0, 0);
		testMethod(270, 0.0642, 0.6463, 3.4933, 0, 0, 0);
		testMethod(275, 0.0675, 0.6637, 3.4933, 0, 0, 0);
		testMethod(280, 0.0709, 0.6812, 3.4933, 0, 0, 0);
		testMethod(285, 0.0743, 0.6987, 3.4933, 0, 0, 0);
		testMethod(290, 0.0779, 0.7161, 3.4933, 0, 0, 0);
		testMethod(295, 0.0815, 0.7336, 3.4933, 0, 0, 0);
		testMethod(300, 0.0852, 0.7511, 3.4933, 0, 0, 0);
		testMethod(305, 0.089, 0.7685, 3.4933, 0, 0, 0);
		testMethod(310, 0.0929, 0.786, 3.4933, 0, 0, 0);
		testMethod(315, 0.0969, 0.8035, 3.4933, 0, 0, 0);
		testMethod(320, 0.1009, 0.8209, 3.4933, 0, 0, 0);
		testMethod(325, 0.1051, 0.8384, 3.4933, 0, 0, 0);
		testMethod(330, 0.1093, 0.8559, 3.4933, 0, 0, 0);
		testMethod(335, 0.1136, 0.8733, 3.4933, 0, 0, 0);
		testMethod(340, 0.118, 0.8908, 3.4933, 0, 0, 0);
		testMethod(345, 0.1225, 0.9083, 3.4933, 0, 0, 0);
		testMethod(350, 0.1271, 0.9257, 3.4933, 0, 0, 0);
		testMethod(355, 0.1318, 0.9432, 3.4933, 0, 0, 0);
		testMethod(360, 0.1365, 0.9607, 3.4933, 0, 0, 0);
		testMethod(365, 0.1414, 0.9781, 3.4933, 0, 0, 0);
		testMethod(370, 0.1463, 0.9956, 3.4933, 0, 0, 0);
		testMethod(375, 0.1513, 1.0131, 3.4933, 0, 0, 0);
		testMethod(380, 0.1565, 1.0305, 3.4933, 0, 0, 0);
		testMethod(385, 0.1617, 1.048, 3.4933, 0, 0, 0);
		testMethod(390, 0.1669, 1.0655, 3.4933, 0, 0, 0);
		testMethod(395, 0.1723, 1.0829, 3.4933, 0, 0, 0);
		testMethod(400, 0.1778, 1.1004, 3.4933, 0, 0, 0);
		testMethod(405, 0.1833, 1.1179, 3.4933, 0, 0, 0);
		testMethod(410, 0.1889, 1.1353, 3.4933, 0, 0, 0);
		testMethod(415, 0.1947, 1.1528, 3.4933, 0, 0, 0);
		testMethod(420, 0.2005, 1.1703, 3.4933, 0, 0, 0);
		testMethod(425, 0.2064, 1.1877, 3.4933, 0, 0, 0);
		testMethod(430, 0.2124, 1.2052, 3.4933, 0, 0, 0);
		testMethod(435, 0.2184, 1.2227, 3.4933, 0, 0, 0);
		testMethod(440, 0.2246, 1.2401, 3.4933, 0, 0, 0);
		testMethod(445, 0.2308, 1.2576, 3.4933, 0, 0, 0);
		testMethod(450, 0.2372, 1.2751, 3.4933, 0, 0, 0);
		testMethod(455, 0.2436, 1.2925, 3.4933, 0, 0, 0);
		testMethod(460, 0.2501, 1.31, 3.4933, 0, 0, 0);
		testMethod(465, 0.2567, 1.3275, 3.4933, 0, 0, 0);
		testMethod(470, 0.2634, 1.3449, 3.4933, 0, 0, 0);
		testMethod(475, 0.2701, 1.3624, 3.4933, 0, 0, 0);
		testMethod(480, 0.277, 1.3799, 3.4933, 0, 0, 0);
		testMethod(485, 0.2839, 1.3973, 3.4933, 0, 0, 0);
		testMethod(490, 0.291, 1.4148, 3.4933, 0, 0, 0);
		testMethod(495, 0.2981, 1.4323, 3.4933, 0, 0, 0);
		testMethod(500, 0.3053, 1.4497, 3.4933, 0, 0, 0);
		testMethod(505, 0.3126, 1.4672, 3.4933, 0, 0, 0);
		testMethod(510, 0.3199, 1.4847, 3.4933, 0, 0, 0);
		testMethod(515, 0.3274, 1.5021, 3.4933, 0, 0, 0);
		testMethod(520, 0.335, 1.5196, 3.4933, 0, 0, 0);
		testMethod(525, 0.3426, 1.5371, 3.4933, 0, 0, 0);
		testMethod(530, 0.3503, 1.5545, 3.4933, 0, 0, 0);
		testMethod(535, 0.3582, 1.572, 3.4933, 0, 0, 0);
		testMethod(540, 0.3661, 1.5895, 3.4933, 0, 0, 0);
		testMethod(545, 0.374, 1.6069, 3.4933, 0, 0, 0);
		testMethod(550, 0.3821, 1.6244, 3.4933, 0, 0, 0);
		testMethod(555, 0.3903, 1.6414, 3.3935, 0, 0, 0);
		testMethod(560, 0.3985, 1.6578, 3.2937, 0, 0, 0);
		testMethod(565, 0.4069, 1.6738, 3.1939, 0, 0, 0);
		testMethod(570, 0.4153, 1.6893, 3.0941, 0, 0, 0);
		testMethod(575, 0.4238, 1.7042, 2.9943, 0, 0, 0);
		testMethod(580, 0.4323, 1.7187, 2.8945, 0, 0, 0);
		testMethod(585, 0.4409, 1.7327, 2.7947, 0, 0, 0);
		testMethod(590, 0.4496, 1.7462, 2.6949, 0, 0, 0);
		testMethod(595, 0.4584, 1.7591, 2.595, 0, 0, 0);
		testMethod(600, 0.4672, 1.7716, 2.4952, 0, 0, 0);
		testMethod(605, 0.4761, 1.7836, 2.3954, 0, 0, 0);
		testMethod(610, 0.4851, 1.7951, 2.2956, 0, 0, 0);
		testMethod(615, 0.4941, 1.8061, 2.1958, 0, 0, 0);
		testMethod(620, 0.5031, 1.8165, 2.096, 0, 0, 0);
		testMethod(625, 0.5122, 1.8265, 1.9962, 0, 0, 0);
		testMethod(630, 0.5214, 1.836, 1.8964, 0, 0, 0);
		testMethod(635, 0.5306, 1.845, 1.7966, 0, 0, 0);
		testMethod(640, 0.5398, 1.8535, 1.6968, 0, 0, 0);
		testMethod(645, 0.5491, 1.8614, 1.597, 0, 0, 0);
		testMethod(650, 0.5585, 1.8689, 1.4971, 0, 0, 0);
		testMethod(655, 0.5678, 1.8759, 1.3973, 0, 0, 0);
		testMethod(660, 0.5772, 1.8824, 1.2975, 0, 0, 0);
		testMethod(665, 0.5866, 1.8884, 1.1977, 0, 0, 0);
		testMethod(670, 0.5961, 1.8939, 1.0979, -0, -0.0001, -0.0105);
		testMethod(675, 0.6056, 1.8989, 0.9981, -0, -0.0008, -0.1583);
		testMethod(680, 0.6151, 1.9034, 0.8983, -0, -0.0026, -0.3506);
		testMethod(685, 0.6246, 1.9074, 0.7985, -0, -0.0053, -0.5451);
		testMethod(690, 0.6342, 1.9109, 0.6987, -0.0001, -0.009, -0.7415);
		testMethod(695, 0.6437, 1.9138, 0.5989, -0.0001, -0.0137, -0.9393);
		testMethod(700, 0.6533, 1.9163, 0.499, -0.0002, -0.0194, -1.1379);
		testMethod(705, 0.6629, 1.9183, 0.3992, -0.0003, -0.0261, -1.3369);
		testMethod(710, 0.6725, 1.9198, 0.2994, -0.0005, -0.0338, -1.5357);
		testMethod(715, 0.6821, 1.9208, 0.1996, -0.0007, -0.0424, -1.7339);
		testMethod(720, 0.6917, 1.9213, 0.0998, -0.0009, -0.0521, -1.9308);
		testMethod(725, 0.7013, 1.9213, 0, -0.0012, -0.0627, -2.1261);
		testMethod(730, 0.7109, 1.9213, 0, -0.0015, -0.0743, -2.3233);
		testMethod(735, 0.7205, 1.9213, 0, -0.0019, -0.087, -2.5206);
		testMethod(740, 0.7301, 1.9213, 0, -0.0024, -0.1005, -2.7178);
		testMethod(745, 0.7397, 1.9213, 0, -0.0029, -0.1151, -2.915);
		testMethod(750, 0.7493, 1.9213, 0, -0.0035, -0.1307, -3.1123);
		testMethod(755, 0.7589, 1.9213, 0, -0.0042, -0.1472, -3.3095);
		testMethod(760, 0.7685, 1.9213, 0, -0.005, -0.1648, -3.5067);
		testMethod(765, 0.7781, 1.9213, 0, -0.0059, -0.1833, -3.704);
		testMethod(770, 0.7877, 1.9213, 0, -0.0069, -0.2028, -3.9012);
		testMethod(775, 0.7974, 1.9213, 0, -0.0079, -0.2233, -4.0985);
		testMethod(780, 0.807, 1.9213, 0, -0.0091, -0.2448, -4.2957);
		testMethod(785, 0.8166, 1.9213, 0, -0.0104, -0.2672, -4.4929);
		testMethod(790, 0.8262, 1.9213, 0, -0.0118, -0.2907, -4.6902);
		testMethod(795, 0.8358, 1.9213, 0, -0.0133, -0.3151, -4.8874);
		testMethod(800, 0.8454, 1.9213, 0, -0.0149, -0.3405, -5.0846);
		testMethod(805, 0.855, 1.9213, 0, -0.0167, -0.3669, -5.2819);
		testMethod(810, 0.8646, 1.9213, 0, -0.0186, -0.3943, -5.4791);
		testMethod(815, 0.8742, 1.9213, 0, -0.0206, -0.4227, -5.6764);
		testMethod(820, 0.8838, 1.9213, 0, -0.0228, -0.4521, -5.8736);
		testMethod(825, 0.8934, 1.9213, 0, -0.0252, -0.4824, -6.0708);
		testMethod(830, 0.903, 1.9213, 0, -0.0276, -0.5138, -6.2681);
		testMethod(835, 0.9126, 1.9213, 0, -0.0303, -0.5461, -6.4653);
		testMethod(840, 0.9222, 1.9213, 0, -0.0331, -0.5794, -6.6625);
		testMethod(845, 0.9318, 1.9213, 0, -0.0361, -0.6137, -6.8598);
		testMethod(850, 0.9415, 1.9213, 0, -0.0392, -0.649, -7.057);
		testMethod(855, 0.9511, 1.9213, 0, -0.0426, -0.6853, -7.2542);
		testMethod(860, 0.9607, 1.9213, 0, -0.0461, -0.7225, -7.4515);
		testMethod(865, 0.9703, 1.9213, 0, -0.0498, -0.7608, -7.6487);
		testMethod(870, 0.9799, 1.9213, 0, -0.0537, -0.8, -7.846);
		testMethod(875, 0.9895, 1.9213, 0, -0.0578, -0.8402, -8.0432);
		testMethod(880, 0.9991, 1.9213, 0, -0.0621, -0.8814, -8.2404);
		testMethod(885, 1.0087, 1.9213, 0, -0.0666, -0.9236, -8.4394);
		testMethod(890, 1.0183, 1.9213, 0, -0.0713, -0.9653, -8.3366);
		testMethod(895, 1.0279, 1.9213, 0, -0.0763, -1.006, -8.1393);
		testMethod(900, 1.0375, 1.9213, 0, -0.0814, -1.0457, -7.9421);
		testMethod(905, 1.0471, 1.9213, 0, -0.0867, -1.0844, -7.7449);
		testMethod(910, 1.0567, 1.9213, 0, -0.0922, -1.1222, -7.5476);
		testMethod(915, 1.0663, 1.9213, 0, -0.0979, -1.1589, -7.3504);
		testMethod(920, 1.0759, 1.9213, 0, -0.1038, -1.1947, -7.1532);
		testMethod(925, 1.0856, 1.9213, 0, -0.1099, -1.2295, -6.9559);
		testMethod(930, 1.0952, 1.9213, 0, -0.1161, -1.2633, -6.7587);
		testMethod(935, 1.1048, 1.9213, 0, -0.1225, -1.2961, -6.5615);
		testMethod(940, 1.1144, 1.9213, 0, -0.1291, -1.3279, -6.3642);
		testMethod(945, 1.124, 1.9213, 0, -0.1358, -1.3587, -6.167);
		testMethod(950, 1.1336, 1.9213, 0, -0.1427, -1.3886, -5.9697);
		testMethod(955, 1.1432, 1.9213, 0, -0.1497, -1.4174, -5.7725);
		testMethod(960, 1.1528, 1.9213, 0, -0.1568, -1.4453, -5.5753);
		testMethod(965, 1.1624, 1.9213, 0, -0.1641, -1.4722, -5.378);
		testMethod(970, 1.172, 1.9213, 0, -0.1716, -1.4981, -5.1808);
		testMethod(975, 1.1816, 1.9213, 0, -0.1791, -1.523, -4.9836);
		testMethod(980, 1.1912, 1.9213, 0, -0.1868, -1.547, -4.7863);
		testMethod(985, 1.2008, 1.9213, 0, -0.1946, -1.5699, -4.5891);
		testMethod(990, 1.2104, 1.9213, 0, -0.2025, -1.5919, -4.3918);
		testMethod(995, 1.22, 1.9213, 0, -0.2105, -1.6128, -4.1946);
		testMethod(1000, 1.2297, 1.9213, 0, -0.2186, -1.6328, -3.9974);
		testMethod(1005, 1.2393, 1.9213, 0, -0.2268, -1.6518, -3.8001);
		testMethod(1010, 1.2489, 1.9213, 0, -0.2351, -1.6698, -3.6029);
		testMethod(1015, 1.2585, 1.9213, 0, -0.2435, -1.6869, -3.4057);
		testMethod(1020, 1.2681, 1.9213, 0, -0.252, -1.7029, -3.2084);
		testMethod(1025, 1.2777, 1.9213, 0, -0.2606, -1.718, -3.0112);
		testMethod(1030, 1.2873, 1.9213, 0, -0.2692, -1.732, -2.8139);
		testMethod(1035, 1.2969, 1.9213, 0, -0.2779, -1.7451, -2.6167);
		testMethod(1040, 1.3065, 1.9213, 0, -0.2866, -1.7572, -2.4195);
		testMethod(1045, 1.3161, 1.9213, 0, -0.2954, -1.7683, -2.2222);
		testMethod(1050, 1.3257, 1.9213, 0, -0.3043, -1.7785, -2.025);
		testMethod(1055, 1.3353, 1.9213, 0, -0.3132, -1.7876, -1.8278);
		testMethod(1060, 1.3449, 1.9213, 0, -0.3222, -1.7957, -1.6305);
		testMethod(1065, 1.3545, 1.9213, 0, -0.3312, -1.8029, -1.4333);
		testMethod(1070, 1.3641, 1.9213, 0, -0.3402, -1.8091, -1.2361);
		testMethod(1075, 1.3738, 1.9213, 0, -0.3493, -1.8143, -1.0388);
		testMethod(1080, 1.3834, 1.9213, 0, -0.3584, -1.8185, -0.8416);
		testMethod(1085, 1.393, 1.9213, 0, -0.3675, -1.8217, -0.6443);
		testMethod(1090, 1.4026, 1.9213, 0, -0.3766, -1.824, -0.4471);
		testMethod(1095, 1.4122, 1.9213, 0, -0.3857, -1.8252, -0.2499);
		testMethod(1100, 1.4218, 1.9213, 0, -0.3948, -1.8255, -0.0526);
		testMethod(1105, 1.4314, 1.9213, 0, -0.4039, -1.8247, 0.1449);
		testMethod(1110, 1.441, 1.9213, 0, -0.4131, -1.823, 0.3422);
		testMethod(1115, 1.4506, 1.9213, 0, -0.4222, -1.8203, 0.5394);
		testMethod(1120, 1.4602, 1.9213, 0, -0.4313, -1.8166, 0.7367);
		testMethod(1125, 1.4698, 1.9213, 0, -0.4403, -1.812, 0.9339);
		testMethod(1130, 1.4794, 1.9213, 0, -0.4494, -1.8063, 1.1311);
		testMethod(1135, 1.489, 1.9213, 0, -0.4584, -1.7997, 1.3284);
		testMethod(1140, 1.4986, 1.9213, 0, -0.4674, -1.7921, 1.5256);
		testMethod(1145, 1.5082, 1.9213, 0, -0.4763, -1.7834, 1.7228);
		testMethod(1150, 1.5179, 1.9213, 0, -0.4852, -1.7738, 1.9201);
		testMethod(1155, 1.5275, 1.9213, 0, -0.4941, -1.7633, 2.1173);
		testMethod(1160, 1.5371, 1.9213, 0, -0.5028, -1.7517, 2.3146);
		testMethod(1165, 1.5467, 1.9213, 0, -0.5116, -1.7391, 2.5118);
		testMethod(1170, 1.5563, 1.9213, 0, -0.5202, -1.7256, 2.709);
		testMethod(1175, 1.5659, 1.9213, 0, -0.5288, -1.711, 2.9063);
		testMethod(1180, 1.5755, 1.9213, 0, -0.5373, -1.6955, 3.1035);
		testMethod(1185, 1.5851, 1.9213, 0, -0.5458, -1.679, 3.3007);
		testMethod(1190, 1.5947, 1.9213, 0, -0.5541, -1.6615, 3.498);
		testMethod(1195, 1.6043, 1.9213, 0, -0.5624, -1.6431, 3.6952);
		testMethod(1200, 1.6139, 1.9213, 0, -0.5706, -1.6236, 3.8924);
		testMethod(1205, 1.6235, 1.9213, 0, -0.5786, -1.6031, 4.0897);
		testMethod(1210, 1.6331, 1.9213, 0, -0.5866, -1.5817, 4.2869);
		testMethod(1215, 1.6427, 1.9213, 0, -0.5944, -1.5593, 4.4842);
		testMethod(1220, 1.6523, 1.9213, 0, -0.6022, -1.5359, 4.6814);
		testMethod(1225, 1.662, 1.9213, 0, -0.6098, -1.5115, 4.8786);
		testMethod(1230, 1.6716, 1.9213, 0, -0.6173, -1.4861, 5.0759);
		testMethod(1235, 1.6812, 1.9213, 0, -0.6247, -1.4597, 5.2731);
		testMethod(1240, 1.6908, 1.9213, 0, -0.6319, -1.4324, 5.4703);
		testMethod(1245, 1.7004, 1.9213, 0, -0.639, -1.4041, 5.6676);
		testMethod(1250, 1.71, 1.9208, -0.0998, -0.6459, -1.3744, 5.9355);
		testMethod(1255, 1.7196, 1.9198, -0.1996, -0.6527, -1.3434, 6.1969);
		testMethod(1260, 1.7292, 1.9183, -0.2994, -0.6594, -1.3111, 6.4515);
		testMethod(1265, 1.7388, 1.9163, -0.3992, -0.6658, -1.2776, 6.6987);
		testMethod(1270, 1.7483, 1.9138, -0.499, -0.6721, -1.243, 6.938);
		testMethod(1275, 1.7579, 1.9109, -0.5989, -0.6783, -1.2071, 7.1689);
		testMethod(1280, 1.7675, 1.9074, -0.6987, -0.6842, -1.1702, 7.3909);
		testMethod(1285, 1.777, 1.9034, -0.7985, -0.69, -1.1321, 7.6036);
		testMethod(1290, 1.7865, 1.8989, -0.8983, -0.6955, -1.0931, 7.8065);
		testMethod(1295, 1.796, 1.8939, -0.9981, -0.7009, -1.0531, 7.9992);
		testMethod(1300, 1.8054, 1.8884, -1.0979, -0.7061, -1.0122, 8.1812);
		testMethod(1305, 1.8148, 1.8824, -1.1977, -0.711, -0.9704, 8.3522);
		testMethod(1310, 1.8242, 1.8759, -1.2975, -0.7158, -0.9279, 8.5116);
		testMethod(1315, 1.8336, 1.8689, -1.3973, -0.7203, -0.8845, 8.6723);
		testMethod(1320, 1.8429, 1.8614, -1.4971, -0.7246, -0.8416, 8.5847);
		testMethod(1325, 1.8522, 1.8535, -1.597, -0.7287, -0.7998, 8.3537);
		testMethod(1330, 1.8615, 1.845, -1.6968, -0.7326, -0.7592, 8.1194);
		testMethod(1335, 1.8707, 1.836, -1.7966, -0.7363, -0.7198, 7.8825);
		testMethod(1340, 1.8798, 1.8265, -1.8964, -0.7398, -0.6816, 7.6433);
		testMethod(1345, 1.8889, 1.8165, -1.9962, -0.7431, -0.6446, 7.4025);
		testMethod(1350, 1.898, 1.8061, -2.096, -0.7462, -0.6088, 7.1606);
		testMethod(1355, 1.907, 1.7951, -2.1958, -0.7492, -0.5742, 6.9179);
		testMethod(1360, 1.9159, 1.7836, -2.2956, -0.752, -0.5408, 6.6749);
		testMethod(1365, 1.9248, 1.7716, -2.3954, -0.7546, -0.5087, 6.4322);
		testMethod(1370, 1.9337, 1.7591, -2.4952, -0.7571, -0.4777, 6.1901);
		testMethod(1375, 1.9424, 1.7462, -2.595, -0.7594, -0.448, 5.9492);
		testMethod(1380, 1.9511, 1.7327, -2.6949, -0.7616, -0.4194, 5.7097);
		testMethod(1385, 1.9597, 1.7187, -2.7947, -0.7636, -0.3921, 5.4722);
		testMethod(1390, 1.9683, 1.7042, -2.8945, -0.7655, -0.3659, 5.237);
		testMethod(1395, 1.9768, 1.6893, -2.9943, -0.7672, -0.3408, 5.0045);
		testMethod(1400, 1.9852, 1.6738, -3.0941, -0.7689, -0.317, 4.7751);
		testMethod(1405, 1.9935, 1.6578, -3.1939, -0.7704, -0.2942, 4.5491);
		testMethod(1410, 2.0018, 1.6414, -3.2937, -0.7718, -0.2726, 4.3268);
		testMethod(1415, 2.0099, 1.6244, -3.3935, -0.7731, -0.252, 4.1085);
		testMethod(1420, 2.018, 1.6069, -3.4933, -0.7744, -0.2326, 3.8946);
		testMethod(1425, 2.026, 1.5895, -3.4933, -0.7755, -0.2142, 3.6723);
		testMethod(1430, 2.0339, 1.572, -3.4933, -0.7765, -0.1969, 3.4587);
		testMethod(1435, 2.0417, 1.5545, -3.4933, -0.7774, -0.1807, 3.2534);
		testMethod(1440, 2.0494, 1.5371, -3.4933, -0.7783, -0.1654, 3.0563);
		testMethod(1445, 2.0571, 1.5196, -3.4933, -0.7791, -0.151, 2.8672);
		testMethod(1450, 2.0646, 1.5021, -3.4933, -0.7798, -0.1376, 2.6859);
		testMethod(1455, 2.0721, 1.4847, -3.4933, -0.7805, -0.125, 2.5121);
		testMethod(1460, 2.0795, 1.4672, -3.4933, -0.7811, -0.1133, 2.3458);
		testMethod(1465, 2.0868, 1.4497, -3.4933, -0.7816, -0.1024, 2.1867);
		testMethod(1470, 2.094, 1.4323, -3.4933, -0.7821, -0.0922, 2.0346);
		testMethod(1475, 2.1011, 1.4148, -3.4933, -0.7825, -0.0828, 1.8894);
		testMethod(1480, 2.1081, 1.3973, -3.4933, -0.7829, -0.074, 1.7508);
		testMethod(1485, 2.1151, 1.3799, -3.4933, -0.7833, -0.0659, 1.6187);
		testMethod(1490, 2.1219, 1.3624, -3.4933, -0.7836, -0.0585, 1.493);
		testMethod(1495, 2.1287, 1.3449, -3.4933, -0.7839, -0.0516, 1.3733);
		testMethod(1500, 2.1354, 1.3275, -3.4933, -0.7841, -0.0453, 1.2596);
		testMethod(1505, 2.142, 1.31, -3.4933, -0.7843, -0.0395, 1.1517);
		testMethod(1510, 2.1485, 1.2925, -3.4933, -0.7845, -0.0343, 1.0494);
		testMethod(1515, 2.1549, 1.2751, -3.4933, -0.7847, -0.0295, 0.9525);
		testMethod(1520, 2.1612, 1.2576, -3.4933, -0.7848, -0.0252, 0.861);
		testMethod(1525, 2.1675, 1.2401, -3.4933, -0.7849, -0.0213, 0.7745);
		testMethod(1530, 2.1736, 1.2227, -3.4933, -0.785, -0.0179, 0.6931);
		testMethod(1535, 2.1797, 1.2052, -3.4933, -0.7851, -0.0148, 0.6164);
		testMethod(1540, 2.1857, 1.1877, -3.4933, -0.7852, -0.0121, 0.5443);
		testMethod(1545, 2.1916, 1.1703, -3.4933, -0.7852, -0.0097, 0.4768);
		testMethod(1550, 2.1974, 1.1528, -3.4933, -0.7853, -0.0076, 0.4136);
		testMethod(1555, 2.2031, 1.1353, -3.4933, -0.7853, -0.0058, 0.3546);
		testMethod(1560, 2.2087, 1.1179, -3.4933, -0.7853, -0.0043, 0.2997);
		testMethod(1565, 2.2143, 1.1004, -3.4933, -0.7853, -0.0031, 0.2486);
		testMethod(1570, 2.2197, 1.0829, -3.4933, -0.7853, -0.0021, 0.2014);
		testMethod(1575, 2.2251, 1.0655, -3.4933, -0.7854, -0.0013, 0.1577);
		testMethod(1580, 2.2304, 1.048, -3.4933, -0.7854, -0.0007, 0.1175);
		testMethod(1585, 2.2356, 1.0305, -3.4933, -0.7854, -0.0003, 0.0807);
		testMethod(1590, 2.2407, 1.0131, -3.4933, -0.7854, -0.0001, 0.0471);
		testMethod(1595, 2.2457, 0.9956, -3.4933, -0.7854, -0, 0.0166);
		testMethod(1600, 2.2507, 0.9781, -3.4933, -0.7854, 0, 0.0001);
		testMethod(1605, 2.2555, 0.9607, -3.4933, -0.7854, 0, 0);
		testMethod(1610, 2.2603, 0.9432, -3.4933, -0.7854, 0, 0);
		testMethod(1615, 2.2649, 0.9257, -3.4933, -0.7854, 0, 0);
		testMethod(1620, 2.2695, 0.9083, -3.4933, -0.7854, 0, 0);
		testMethod(1625, 2.274, 0.8908, -3.4933, -0.7854, 0, 0);
		testMethod(1630, 2.2784, 0.8733, -3.4933, -0.7854, 0, 0);
		testMethod(1635, 2.2828, 0.8559, -3.4933, -0.7854, 0, 0);
		testMethod(1640, 2.287, 0.8384, -3.4933, -0.7854, 0, 0);
		testMethod(1645, 2.2911, 0.8209, -3.4933, -0.7854, 0, 0);
		testMethod(1650, 2.2952, 0.8035, -3.4933, -0.7854, 0, 0);
		testMethod(1655, 2.2992, 0.786, -3.4933, -0.7854, 0, 0);
		testMethod(1660, 2.3031, 0.7685, -3.4933, -0.7854, 0, 0);
		testMethod(1665, 2.3069, 0.7511, -3.4933, -0.7854, 0, 0);
		testMethod(1670, 2.3106, 0.7336, -3.4933, -0.7854, 0, 0);
		testMethod(1675, 2.3142, 0.7161, -3.4933, -0.7854, 0, 0);
		testMethod(1680, 2.3177, 0.6987, -3.4933, -0.7854, 0, 0);
		testMethod(1685, 2.3212, 0.6812, -3.4933, -0.7854, 0, 0);
		testMethod(1690, 2.3245, 0.6637, -3.4933, -0.7854, 0, 0);
		testMethod(1695, 2.3278, 0.6463, -3.4933, -0.7854, 0, 0);
		testMethod(1700, 2.331, 0.6288, -3.4933, -0.7854, 0, 0);
		testMethod(1705, 2.3341, 0.6113, -3.4933, -0.7854, 0, 0);
		testMethod(1710, 2.3371, 0.5939, -3.4933, -0.7854, 0, 0);
		testMethod(1715, 2.3401, 0.5764, -3.4933, -0.7854, 0, 0);
		testMethod(1720, 2.3429, 0.5589, -3.4933, -0.7854, 0, 0);
		testMethod(1725, 2.3456, 0.5415, -3.4933, -0.7854, 0, 0);
		testMethod(1730, 2.3483, 0.524, -3.4933, -0.7854, 0, 0);
		testMethod(1735, 2.3509, 0.5065, -3.4933, -0.7854, 0, 0);
		testMethod(1740, 2.3534, 0.4891, -3.4933, -0.7854, 0, 0);
		testMethod(1745, 2.3558, 0.4716, -3.4933, -0.7854, 0, 0);
		testMethod(1750, 2.3581, 0.4541, -3.4933, -0.7854, 0, 0);
		testMethod(1755, 2.3603, 0.4367, -3.4933, -0.7854, 0, 0);
		testMethod(1760, 2.3625, 0.4192, -3.4933, -0.7854, 0, 0);
		testMethod(1765, 2.3645, 0.4017, -3.4933, -0.7854, 0, 0);
		testMethod(1770, 2.3665, 0.3843, -3.4933, -0.7854, 0, 0);
		testMethod(1775, 2.3683, 0.3668, -3.4933, -0.7854, 0, 0);
		testMethod(1780, 2.3701, 0.3493, -3.4933, -0.7854, 0, 0);
		testMethod(1785, 2.3718, 0.3319, -3.4933, -0.7854, 0, 0);
		testMethod(1790, 2.3735, 0.3144, -3.4933, -0.7854, 0, 0);
		testMethod(1795, 2.375, 0.2969, -3.4933, -0.7854, 0, 0);
		testMethod(1800, 2.3764, 0.28, -3.3935, -0.7854, 0, 0);
		testMethod(1805, 2.3778, 0.2635, -3.2937, -0.7854, 0, 0);
		testMethod(1810, 2.3791, 0.2475, -3.1939, -0.7854, 0, 0);
		testMethod(1815, 2.3803, 0.2321, -3.0941, -0.7854, 0, 0);
		testMethod(1820, 2.3814, 0.2171, -2.9943, -0.7854, 0, 0);
		testMethod(1825, 2.3824, 0.2026, -2.8945, -0.7854, 0, 0);
		testMethod(1830, 2.3834, 0.1886, -2.7947, -0.7854, 0, 0);
		testMethod(1835, 2.3843, 0.1752, -2.6949, -0.7854, 0, 0);
		testMethod(1840, 2.3852, 0.1622, -2.595, -0.7854, 0, 0);
		testMethod(1845, 2.3859, 0.1497, -2.4952, -0.7854, 0, 0);
		testMethod(1850, 2.3867, 0.1377, -2.3954, -0.7854, 0, 0);
		testMethod(1855, 2.3873, 0.1263, -2.2956, -0.7854, 0, 0);
		testMethod(1860, 2.3879, 0.1153, -2.1958, -0.7854, 0, 0);
		testMethod(1865, 2.3885, 0.1048, -2.096, -0.7854, 0, 0);
		testMethod(1870, 2.389, 0.0948, -1.9962, -0.7854, 0, 0);
		testMethod(1875, 2.3894, 0.0853, -1.8964, -0.7854, 0, 0);
		testMethod(1880, 2.3898, 0.0764, -1.7966, -0.7854, 0, 0);
		testMethod(1885, 2.3902, 0.0679, -1.6968, -0.7854, 0, 0);
		testMethod(1890, 2.3905, 0.0599, -1.597, -0.7854, 0, 0);
		testMethod(1895, 2.3908, 0.0524, -1.4971, -0.7854, 0, 0);
		testMethod(1900, 2.391, 0.0454, -1.3973, -0.7854, 0, 0);
		testMethod(1905, 2.3912, 0.0389, -1.2975, -0.7854, 0, 0);
		testMethod(1910, 2.3914, 0.0329, -1.1977, -0.7854, 0, 0);
		testMethod(1915, 2.3916, 0.0274, -1.0979, -0.7854, 0, 0);
		testMethod(1920, 2.3917, 0.0225, -0.9981, -0.7854, 0, 0);
		testMethod(1925, 2.3918, 0.018, -0.8983, -0.7854, 0, 0);
		testMethod(1930, 2.3919, 0.014, -0.7985, -0.7854, 0, 0);
		testMethod(1935, 2.3919, 0.0105, -0.6987, -0.7854, 0, 0);
		testMethod(1940, 2.392, 0.0075, -0.5989, -0.7854, 0, 0);
		testMethod(1945, 2.392, 0.005, -0.499, -0.7854, 0, 0);
		testMethod(1950, 2.392, 0.003, -0.3992, -0.7854, 0, 0);
		testMethod(1955, 2.3921, 0.0015, -0.2994, -0.7854, 0, 0);
		testMethod(1960, 2.3921, 0.0005, -0.1996, -0.7854, 0, 0);
		testMethod(1965, 2.3921, 0, -0.0998, -0.7854, 0, 0);
		testMethod(1970, 2.3921, 0, 0, -0.7854, 0, 0);
		testMethod(1970, 2.3921, 0, 0, -0.7854, 0, 0);
	}
	public void testMethod(int t, double pos, double vel, double acc, double hed, double omg, double alf) {
		time.add((long) t);
		translation.add(new MotionState1D(pos, vel, acc));
		rotation.add(new MotionState1D(hed, omg, alf));
	}

}