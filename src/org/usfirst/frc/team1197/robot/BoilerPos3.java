package org.usfirst.frc.team1197.robot;

public class BoilerPos3 extends TorTrajectory {

	public BoilerPos3() {
		super(-0.5, 0);
		time.clear();
		translation.clear();
		rotation.clear();
		testMethod(0, 0, 0, 0, 0, 0, 0);
		testMethod(5, -0, -0.0005, -0.0992, 0, 0, 0);
		testMethod(10, -0, -0.0015, -0.1984, 0, 0, 0);
		testMethod(15, -0, -0.003, -0.2976, 0, 0, 0);
		testMethod(20, -0, -0.005, -0.3968, 0, 0, 0);
		testMethod(25, -0.0001, -0.0074, -0.496, 0, 0, 0);
		testMethod(30, -0.0001, -0.0104, -0.5952, 0, 0, 0);
		testMethod(35, -0.0002, -0.0139, -0.6944, 0, 0, 0);
		testMethod(40, -0.0003, -0.0179, -0.7937, 0, 0, 0);
		testMethod(45, -0.0004, -0.0223, -0.8929, 0, 0, 0);
		testMethod(50, -0.0005, -0.0273, -0.9921, 0, 0, 0);
		testMethod(55, -0.0006, -0.0327, -1.0913, 0, 0, 0);
		testMethod(60, -0.0008, -0.0387, -1.1905, 0, 0, 0);
		testMethod(65, -0.001, -0.0451, -1.2897, 0, 0, 0);
		testMethod(70, -0.0013, -0.0521, -1.3889, 0, 0, 0);
		testMethod(75, -0.0015, -0.0595, -1.4881, 0, 0, 0);
		testMethod(80, -0.0019, -0.0675, -1.5873, 0, 0, 0);
		testMethod(85, -0.0022, -0.0759, -1.6865, 0, 0, 0);
		testMethod(90, -0.0026, -0.0848, -1.7857, 0, 0, 0);
		testMethod(95, -0.0031, -0.0942, -1.8849, 0, 0, 0);
		testMethod(100, -0.0036, -0.1042, -1.9841, 0, 0, 0);
		testMethod(105, -0.0041, -0.1146, -2.0833, 0, 0, 0);
		testMethod(110, -0.0047, -0.1255, -2.1825, 0, 0, 0);
		testMethod(115, -0.0054, -0.1369, -2.2817, 0, 0, 0);
		testMethod(120, -0.0061, -0.1488, -2.381, 0, 0, 0);
		testMethod(125, -0.0069, -0.1612, -2.4802, 0, 0, 0);
		testMethod(130, -0.0077, -0.1741, -2.5794, 0, 0, 0);
		testMethod(135, -0.0086, -0.1875, -2.6786, 0, 0, 0);
		testMethod(140, -0.0096, -0.2014, -2.7778, 0, 0, 0);
		testMethod(145, -0.0106, -0.2158, -2.877, 0, 0, 0);
		testMethod(150, -0.0117, -0.2307, -2.9762, 0, 0, 0);
		testMethod(155, -0.0129, -0.246, -3.0754, 0, 0, 0);
		testMethod(160, -0.0142, -0.2619, -3.1746, 0, 0, 0);
		testMethod(165, -0.0155, -0.2783, -3.2738, 0, 0, 0);
		testMethod(170, -0.017, -0.2951, -3.373, 0, 0, 0);
		testMethod(175, -0.0185, -0.3125, -3.4722, 0, 0, 0);
		testMethod(180, -0.0201, -0.3299, -3.4722, 0, 0, 0);
		testMethod(185, -0.0218, -0.3472, -3.4722, 0, 0, 0);
		testMethod(190, -0.0236, -0.3646, -3.4722, 0, 0, 0);
		testMethod(195, -0.0254, -0.3819, -3.4722, 0, 0, 0);
		testMethod(200, -0.0274, -0.3993, -3.4722, 0, 0, 0);
		testMethod(205, -0.0294, -0.4167, -3.4722, 0, 0, 0);
		testMethod(210, -0.0316, -0.434, -3.4722, 0, 0, 0);
		testMethod(215, -0.0338, -0.4514, -3.4722, 0, 0, 0);
		testMethod(220, -0.0361, -0.4688, -3.4722, 0, 0, 0);
		testMethod(225, -0.0385, -0.4861, -3.4722, 0, 0, 0);
		testMethod(230, -0.0409, -0.5035, -3.4722, 0, 0, 0);
		testMethod(235, -0.0435, -0.5208, -3.4722, 0, 0, 0);
		testMethod(240, -0.0461, -0.5382, -3.4722, 0, 0, 0);
		testMethod(245, -0.0489, -0.5556, -3.4722, 0, 0, 0);
		testMethod(250, -0.0517, -0.5729, -3.4722, 0, 0, 0);
		testMethod(255, -0.0546, -0.5903, -3.4722, 0, 0, 0);
		testMethod(260, -0.0576, -0.6076, -3.4722, 0, 0, 0);
		testMethod(265, -0.0607, -0.625, -3.4722, 0, 0, 0);
		testMethod(270, -0.0638, -0.6424, -3.4722, 0, 0, 0);
		testMethod(275, -0.0671, -0.6597, -3.4722, 0, 0, 0);
		testMethod(280, -0.0704, -0.6771, -3.4722, 0, 0, 0);
		testMethod(285, -0.0739, -0.6944, -3.4722, 0, 0, 0);
		testMethod(290, -0.0774, -0.7118, -3.4722, 0, 0, 0);
		testMethod(295, -0.081, -0.7292, -3.4722, 0, 0, 0);
		testMethod(300, -0.0847, -0.7465, -3.4722, 0, 0, 0);
		testMethod(305, -0.0885, -0.7634, -3.373, 0, 0, 0);
		testMethod(310, -0.0923, -0.7798, -3.2738, 0, 0, 0);
		testMethod(315, -0.0962, -0.7956, -3.1746, 0, 0, 0);
		testMethod(320, -0.1003, -0.811, -3.0754, 0, 0, 0);
		testMethod(325, -0.1044, -0.8259, -2.9762, 0, 0, 0);
		testMethod(330, -0.1085, -0.8403, -2.877, 0, 0, 0);
		testMethod(335, -0.1128, -0.8542, -2.7778, 0, 0, 0);
		testMethod(340, -0.1171, -0.8676, -2.6786, 0, 0, 0);
		testMethod(345, -0.1214, -0.8805, -2.5794, 0, 0, 0);
		testMethod(350, -0.1259, -0.8929, -2.4802, 0, 0, 0);
		testMethod(355, -0.1304, -0.9048, -2.381, 0, 0, 0);
		testMethod(360, -0.1349, -0.9162, -2.2817, 0, 0, 0);
		testMethod(365, -0.1395, -0.9271, -2.1825, 0, 0, 0);
		testMethod(370, -0.1442, -0.9375, -2.0833, 0, 0, 0);
		testMethod(375, -0.1489, -0.9474, -1.9841, 0, 0, 0);
		testMethod(380, -0.1537, -0.9568, -1.8849, 0, 0, 0);
		testMethod(385, -0.1585, -0.9658, -1.7857, 0, 0, 0);
		testMethod(390, -0.1633, -0.9742, -1.6865, 0, 0, 0);
		testMethod(395, -0.1682, -0.9821, -1.5873, 0, 0, 0);
		testMethod(400, -0.1731, -0.9896, -1.4881, 0, 0, 0);
		testMethod(405, -0.1781, -0.9965, -1.3889, 0, 0, 0);
		testMethod(410, -0.1831, -1.003, -1.2897, 0, 0, 0);
		testMethod(415, -0.1881, -1.0089, -1.1905, 0, 0, 0);
		testMethod(420, -0.1932, -1.0144, -1.0913, 0, 0, 0);
		testMethod(425, -0.1983, -1.0193, -0.9921, 0, 0, 0);
		testMethod(430, -0.2034, -1.0238, -0.8929, 0, 0, 0);
		testMethod(435, -0.2085, -1.0278, -0.7937, 0, 0, 0);
		testMethod(440, -0.2137, -1.0312, -0.6944, 0, 0, 0);
		testMethod(445, -0.2188, -1.0342, -0.5952, 0, 0, 0);
		testMethod(450, -0.224, -1.0367, -0.496, 0, 0, 0);
		testMethod(455, -0.2292, -1.0387, -0.3968, 0, 0, 0);
		testMethod(460, -0.2344, -1.0402, -0.2976, 0, 0, 0);
		testMethod(465, -0.2396, -1.0412, -0.1984, 0, 0, 0);
		testMethod(470, -0.2448, -1.0417, -0.0992, 0, 0, 0);
		testMethod(475, -0.25, -1.0417, -0, 0, 0, 0);
		testMethod(480, -0.2552, -1.0417, -0, 0, 0, 0);
		testMethod(485, -0.2604, -1.0412, 0.0992, 0, 0, 0);
		testMethod(490, -0.2656, -1.0402, 0.1984, 0, 0, 0);
		testMethod(495, -0.2708, -1.0387, 0.2976, 0, 0, 0);
		testMethod(500, -0.276, -1.0367, 0.3968, 0, 0, 0);
		testMethod(505, -0.2812, -1.0342, 0.496, 0, 0, 0);
		testMethod(510, -0.2863, -1.0312, 0.5952, 0, 0, 0);
		testMethod(515, -0.2915, -1.0278, 0.6944, 0, 0, 0);
		testMethod(520, -0.2966, -1.0238, 0.7937, 0, 0, 0);
		testMethod(525, -0.3017, -1.0193, 0.8929, 0, 0, 0);
		testMethod(530, -0.3068, -1.0144, 0.9921, 0, 0, 0);
		testMethod(535, -0.3119, -1.0089, 1.0913, 0, 0, 0);
		testMethod(540, -0.3169, -1.003, 1.1905, 0, 0, 0);
		testMethod(545, -0.3219, -0.9965, 1.2897, 0, 0, 0);
		testMethod(550, -0.3269, -0.9896, 1.3889, 0, 0, 0);
		testMethod(555, -0.3318, -0.9821, 1.4881, 0, 0, 0);
		testMethod(560, -0.3367, -0.9742, 1.5873, 0, 0, 0);
		testMethod(565, -0.3415, -0.9658, 1.6865, 0, 0, 0);
		testMethod(570, -0.3463, -0.9568, 1.7857, 0, 0, 0);
		testMethod(575, -0.3511, -0.9474, 1.8849, 0, 0, 0);
		testMethod(580, -0.3558, -0.9375, 1.9841, 0, 0, 0);
		testMethod(585, -0.3605, -0.9271, 2.0833, 0, 0, 0);
		testMethod(590, -0.3651, -0.9162, 2.1825, 0, 0, 0);
		testMethod(595, -0.3696, -0.9048, 2.2817, 0, 0, 0);
		testMethod(600, -0.3741, -0.8929, 2.381, 0, 0, 0);
		testMethod(605, -0.3786, -0.8805, 2.4802, 0, 0, 0);
		testMethod(610, -0.3829, -0.8676, 2.5794, 0, 0, 0);
		testMethod(615, -0.3872, -0.8542, 2.6786, 0, 0, 0);
		testMethod(620, -0.3915, -0.8403, 2.7778, 0, 0, 0);
		testMethod(625, -0.3956, -0.8259, 2.877, 0, 0, 0);
		testMethod(630, -0.3997, -0.811, 2.9762, 0, 0, 0);
		testMethod(635, -0.4037, -0.7956, 3.0754, 0, 0, 0);
		testMethod(640, -0.4077, -0.7798, 3.1746, 0, 0, 0);
		testMethod(645, -0.4115, -0.7634, 3.2738, 0, 0, 0);
		testMethod(650, -0.4153, -0.7465, 3.373, 0, 0, 0);
		testMethod(655, -0.419, -0.7292, 3.4722, 0, 0, 0);
		testMethod(660, -0.4226, -0.7118, 3.4722, 0, 0, 0);
		testMethod(665, -0.4261, -0.6944, 3.4722, 0, 0, 0);
		testMethod(670, -0.4296, -0.6771, 3.4722, 0, 0, 0);
		testMethod(675, -0.4329, -0.6597, 3.4722, 0, 0, 0);
		testMethod(680, -0.4362, -0.6424, 3.4722, 0, 0, 0);
		testMethod(685, -0.4393, -0.625, 3.4722, 0, 0, 0);
		testMethod(690, -0.4424, -0.6076, 3.4722, 0, 0, 0);
		testMethod(695, -0.4454, -0.5903, 3.4722, 0, 0, 0);
		testMethod(700, -0.4483, -0.5729, 3.4722, 0, 0, 0);
		testMethod(705, -0.4511, -0.5556, 3.4722, 0, 0, 0);
		testMethod(710, -0.4539, -0.5382, 3.4722, 0, 0, 0);
		testMethod(715, -0.4565, -0.5208, 3.4722, 0, 0, 0);
		testMethod(720, -0.4591, -0.5035, 3.4722, 0, 0, 0);
		testMethod(725, -0.4615, -0.4861, 3.4722, 0, 0, 0);
		testMethod(730, -0.4639, -0.4688, 3.4722, 0, 0, 0);
		testMethod(735, -0.4662, -0.4514, 3.4722, 0, 0, 0);
		testMethod(740, -0.4684, -0.434, 3.4722, 0, 0, 0);
		testMethod(745, -0.4706, -0.4167, 3.4722, 0, 0, 0);
		testMethod(750, -0.4726, -0.3993, 3.4722, 0, 0, 0);
		testMethod(755, -0.4746, -0.3819, 3.4722, 0, 0, 0);
		testMethod(760, -0.4764, -0.3646, 3.4722, 0, 0, 0);
		testMethod(765, -0.4782, -0.3472, 3.4722, 0, 0, 0);
		testMethod(770, -0.4799, -0.3299, 3.4722, 0, 0, 0);
		testMethod(775, -0.4815, -0.3125, 3.4722, 0, 0, 0);
		testMethod(780, -0.483, -0.2951, 3.4722, 0, 0, 0);
		testMethod(785, -0.4845, -0.2783, 3.373, 0, 0, 0);
		testMethod(790, -0.4858, -0.2619, 3.2738, 0, 0, 0);
		testMethod(795, -0.4871, -0.246, 3.1746, 0, 0, 0);
		testMethod(800, -0.4883, -0.2307, 3.0754, 0, 0, 0);
		testMethod(805, -0.4894, -0.2158, 2.9762, 0, 0, 0);
		testMethod(810, -0.4904, -0.2014, 2.877, 0, 0, 0);
		testMethod(815, -0.4914, -0.1875, 2.7778, 0, 0, 0);
		testMethod(820, -0.4923, -0.1741, 2.6786, 0, 0, 0);
		testMethod(825, -0.4931, -0.1612, 2.5794, 0, 0, 0);
		testMethod(830, -0.4939, -0.1488, 2.4802, 0, 0, 0);
		testMethod(835, -0.4946, -0.1369, 2.381, 0, 0, 0);
		testMethod(840, -0.4953, -0.1255, 2.2817, 0, 0, 0);
		testMethod(845, -0.4959, -0.1146, 2.1825, 0, 0, 0);
		testMethod(850, -0.4964, -0.1042, 2.0833, 0, 0, 0);
		testMethod(855, -0.4969, -0.0942, 1.9841, 0, 0, 0);
		testMethod(860, -0.4974, -0.0848, 1.8849, 0, 0, 0);
		testMethod(865, -0.4978, -0.0759, 1.7857, 0, 0, 0);
		testMethod(870, -0.4981, -0.0675, 1.6865, 0, 0, 0);
		testMethod(875, -0.4985, -0.0595, 1.5873, 0, 0, 0);
		testMethod(880, -0.4987, -0.0521, 1.4881, 0, 0, 0);
		testMethod(885, -0.499, -0.0451, 1.3889, 0, 0, 0);
		testMethod(890, -0.4992, -0.0387, 1.2897, 0, 0, 0);
		testMethod(895, -0.4994, -0.0327, 1.1905, 0, 0, 0);
		testMethod(900, -0.4995, -0.0273, 1.0913, 0, 0, 0);
		testMethod(905, -0.4996, -0.0223, 0.9921, 0, 0, 0);
		testMethod(910, -0.4997, -0.0179, 0.8929, 0, 0, 0);
		testMethod(915, -0.4998, -0.0139, 0.7937, 0, 0, 0);
		testMethod(920, -0.4999, -0.0104, 0.6944, 0, 0, 0);
		testMethod(925, -0.4999, -0.0074, 0.5952, 0, 0, 0);
		testMethod(930, -0.5, -0.005, 0.496, 0, 0, 0);
		testMethod(935, -0.5, -0.003, 0.3968, 0, 0, 0);
		testMethod(940, -0.5, -0.0015, 0.2976, 0, 0, 0);
		testMethod(945, -0.5, -0.0005, 0.1984, 0, 0, 0);
		testMethod(950, -0.5, -0, 0.0992, 0, 0, 0);
		testMethod(955, -0.5, -0, -0, 0, 0, 0);
		testMethod(955, -0.5, -0, -0, 0, 0, 0);
	}
	public void testMethod(int t, double pos, double vel, double acc, double hed, double omg, double alf) {
		time.add((long) t);
		translation.add(new MotionState1D(pos, vel, acc));
		rotation.add(new MotionState1D(hed, omg, alf));
	}

}